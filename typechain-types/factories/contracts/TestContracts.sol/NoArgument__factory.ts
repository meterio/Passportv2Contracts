/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NoArgument,
  NoArgumentInterface,
} from "../../../contracts/TestContracts.sol/NoArgument";

const _abi = [
  {
    anonymous: false,
    inputs: [],
    name: "NoArgumentCalled",
    type: "event",
  },
  {
    inputs: [],
    name: "noArgument",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060968061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063568959ca14602d575b600080fd5b60336035565b005b6040517fc582abe1670c5a7f7cad8f171e4af03c793dd9f59fee6714179f56b6e9aea26f90600090a156fea26469706673582212207049bd5415cebfa4f3963cd0807864555c1b5bf7f78f80cc039598593642edb464736f6c634300080b0033";

type NoArgumentConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NoArgumentConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NoArgument__factory extends ContractFactory {
  constructor(...args: NoArgumentConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<NoArgument> {
    return super.deploy(overrides || {}) as Promise<NoArgument>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NoArgument {
    return super.attach(address) as NoArgument;
  }
  override connect(signer: Signer): NoArgument__factory {
    return super.connect(signer) as NoArgument__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NoArgumentInterface {
    return new utils.Interface(_abi) as NoArgumentInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NoArgument {
    return new Contract(address, _abi, signerOrProvider) as NoArgument;
  }
}
