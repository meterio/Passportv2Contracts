/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TwoArguments } from "../TwoArguments";

export class TwoArguments__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TwoArguments> {
    return super.deploy(overrides || {}) as Promise<TwoArguments>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TwoArguments {
    return super.attach(address) as TwoArguments;
  }
  connect(signer: Signer): TwoArguments__factory {
    return super.connect(signer) as TwoArguments__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TwoArguments {
    return new Contract(address, _abi, signerOrProvider) as TwoArguments;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "argumentOne",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "argumentTwo",
        type: "bytes4",
      },
    ],
    name: "TwoArgumentsCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "argumentOne",
        type: "address[]",
      },
      {
        internalType: "bytes4",
        name: "argumentTwo",
        type: "bytes4",
      },
    ],
    name: "twoArguments",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101b4806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806372e0745c14610030575b600080fd5b61004361003e366004610085565b610045565b005b7fc983106aca50fad459fb18ede1630e8ff8147ff28ad451a856427931fd7f15e383838360405161007893929190610118565b60405180910390a1505050565b60008060006040848603121561009a57600080fd5b833567ffffffffffffffff808211156100b257600080fd5b818601915086601f8301126100c657600080fd5b8135818111156100d557600080fd5b8760208260051b85010111156100ea57600080fd5b602092830195509350508401356001600160e01b03198116811461010d57600080fd5b809150509250925092565b604080825281018390526000846060830182805b878110156101605783356001600160a01b03811680821461014b578384fd5b8452506020938401939092019160010161012c565b5050809250505063ffffffff60e01b8316602083015294935050505056fea264697066735822122045029f9e842a8572d79b622a43505798a8bb4c67d600a137c4a69f19bb14c05064736f6c634300080b0033";
