/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BridgeInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MAX_RELAYERS()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "RELAYER_ROLE()": FunctionFragment;
    "_chainId()": FunctionFragment;
    "_depositCounts(uint8)": FunctionFragment;
    "_domainID()": FunctionFragment;
    "_expiry()": FunctionFragment;
    "_fee()": FunctionFragment;
    "_feeHandler()": FunctionFragment;
    "_feeReserve()": FunctionFragment;
    "_fee_()": FunctionFragment;
    "_hasVotedOnProposal(uint72,bytes32,address)": FunctionFragment;
    "_relayerThreshold()": FunctionFragment;
    "_resourceIDToHandlerAddress(bytes32)": FunctionFragment;
    "_totalRelayers()": FunctionFragment;
    "adminAddRelayer(address)": FunctionFragment;
    "adminChangeExpiry(uint256)": FunctionFragment;
    "adminChangeRelayerThreshold(uint256)": FunctionFragment;
    "adminPauseTransfers()": FunctionFragment;
    "adminRemoveGenericResource(bytes32,address)": FunctionFragment;
    "adminRemoveNativeResourceId()": FunctionFragment;
    "adminRemoveRelayer(address)": FunctionFragment;
    "adminRemoveResourceId(bytes32,address)": FunctionFragment;
    "adminRemoveSpecialFee(uint8)": FunctionFragment;
    "adminSetBurnable(address,address)": FunctionFragment;
    "adminSetDepositNonce(uint8,uint64)": FunctionFragment;
    "adminSetDomainId(uint8)": FunctionFragment;
    "adminSetFee(uint256)": FunctionFragment;
    "adminSetForwarder(address,bool)": FunctionFragment;
    "adminSetGenericResource(address,bytes32,address,bytes4,uint256,bytes4)": FunctionFragment;
    "adminSetNative(bytes32,address,bool)": FunctionFragment;
    "adminSetNativeResource(address)": FunctionFragment;
    "adminSetResource(address,bytes32,address)": FunctionFragment;
    "adminSetSpecialFee(uint8,uint256)": FunctionFragment;
    "adminUnpauseTransfers()": FunctionFragment;
    "adminWithdraw(address,bytes)": FunctionFragment;
    "adminWithdrawETH(address,bytes)": FunctionFragment;
    "cancelProposal(uint8,uint64,bytes32)": FunctionFragment;
    "checkSignature(uint8,uint64,bytes32,bytes,bytes)": FunctionFragment;
    "deposit(uint8,bytes32,bytes,bytes)": FunctionFragment;
    "executeProposal(uint8,uint64,bytes,bytes32,bool)": FunctionFragment;
    "getFee(uint8)": FunctionFragment;
    "getProposal(uint8,uint64,bytes32,bytes)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoleMemberIndex(bytes32,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isRelayer(address)": FunctionFragment;
    "isValidForwarder(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceAdmin(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "special(uint8)": FunctionFragment;
    "specialFee(uint8)": FunctionFragment;
    "transferFee(address[],uint256[])": FunctionFragment;
    "voteProposal(uint8,uint64,bytes32,bytes)": FunctionFragment;
    "voteProposals(uint8,uint64,bytes32,bytes,bytes[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_RELAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_depositCounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_domainID", values?: undefined): string;
  encodeFunctionData(functionFragment: "_expiry", values?: undefined): string;
  encodeFunctionData(functionFragment: "_fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_feeHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_feeReserve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_fee_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_hasVotedOnProposal",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_relayerThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_resourceIDToHandlerAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_totalRelayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminChangeExpiry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminChangeRelayerThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminPauseTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveGenericResource",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveNativeResourceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveResourceId",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveSpecialFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetBurnable",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetDepositNonce",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetDomainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetForwarder",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetGenericResource",
    values: [string, BytesLike, string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetNative",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetNativeResource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetResource",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetSpecialFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminUnpauseTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdraw",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdrawETH",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignature",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberIndex",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "isRelayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isValidForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "special",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "specialFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFee",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "voteProposal",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteProposals",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RELAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAYER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_depositCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_domainID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_expiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_feeHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_feeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_fee_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_hasVotedOnProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_relayerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_resourceIDToHandlerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminChangeExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminChangeRelayerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminPauseTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveGenericResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveNativeResourceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveResourceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveSpecialFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetBurnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetDepositNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetDomainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetGenericResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetNativeResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetSpecialFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminUnpauseTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "special", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "specialFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteProposals",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(uint8,bytes32,uint64,address,bytes,bytes)": EventFragment;
    "FailedHandlerExecution(bytes)": EventFragment;
    "FeeChanged(uint256)": EventFragment;
    "FeeDistributed(address,address,uint256)": EventFragment;
    "FeeHandlerChanged(address)": EventFragment;
    "Paused(address)": EventFragment;
    "ProposalEvent(uint8,uint64,uint8,bytes32)": EventFragment;
    "ProposalVote(uint8,uint64,uint8,bytes32)": EventFragment;
    "RelayerAdded(address)": EventFragment;
    "RelayerRemoved(address)": EventFragment;
    "RelayerThresholdChanged(uint256)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailedHandlerExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeHandlerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerThresholdChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class Bridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BridgeInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "MAX_RELAYERS()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "RELAYER_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    _chainId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_chainId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _depositCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "_depositCounts(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    _domainID(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "_domainID()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    _expiry(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "_expiry()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    _fee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_fee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _feeHandler(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "_feeHandler()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    _feeReserve(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_feeReserve()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _fee_(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_fee_()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _hasVotedOnProposal(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_hasVotedOnProposal(uint72,bytes32,address)"(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    _relayerThreshold(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "_relayerThreshold()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    _resourceIDToHandlerAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "_resourceIDToHandlerAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    _totalRelayers(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_totalRelayers()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    adminAddRelayer(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminAddRelayer(address)"(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminChangeExpiry(
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminChangeExpiry(uint256)"(
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminChangeRelayerThreshold(
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminChangeRelayerThreshold(uint256)"(
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminPauseTransfers(overrides?: Overrides): Promise<ContractTransaction>;

    "adminPauseTransfers()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminRemoveGenericResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminRemoveGenericResource(bytes32,address)"(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminRemoveNativeResourceId(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminRemoveNativeResourceId()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminRemoveRelayer(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminRemoveRelayer(address)"(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminRemoveResourceId(
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminRemoveResourceId(bytes32,address)"(
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminRemoveSpecialFee(
      destinationDomainID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminRemoveSpecialFee(uint8)"(
      destinationDomainID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetBurnable(address,address)"(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminSetDepositNonce(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetDepositNonce(uint8,uint64)"(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminSetDomainId(
      domainID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetDomainId(uint8)"(
      domainID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminSetFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminSetForwarder(
      forwarder: string,
      valid: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetForwarder(address,bool)"(
      forwarder: string,
      valid: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminSetGenericResource(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetGenericResource(address,bytes32,address,bytes4,uint256,bytes4)"(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminSetNative(
      resourceID: BytesLike,
      nativeAddress: string,
      isNative: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetNative(bytes32,address,bool)"(
      resourceID: BytesLike,
      nativeAddress: string,
      isNative: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminSetNativeResource(
      handlerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetNativeResource(address)"(
      handlerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminSetResource(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetResource(address,bytes32,address)"(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminSetSpecialFee(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetSpecialFee(uint8,uint256)"(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminUnpauseTransfers(overrides?: Overrides): Promise<ContractTransaction>;

    "adminUnpauseTransfers()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminWithdraw(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminWithdraw(address,bytes)"(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminWithdrawETH(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminWithdrawETH(address,bytes)"(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelProposal(uint8,uint64,bytes32)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkSignature(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "checkSignature(uint8,uint64,bytes32,bytes,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    deposit(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit(uint8,bytes32,bytes,bytes)"(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    executeProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeProposal(uint8,uint64,bytes,bytes32,bool)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getFee(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getFee(uint8)"(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getProposal(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        _status: number;
        _yesVotes: BigNumber;
        _yesVotesTotal: number;
        _proposedBlock: number;
        0: number;
        1: BigNumber;
        2: number;
        3: number;
      };
    }>;

    "getProposal(uint8,uint64,bytes32,bytes)"(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        _status: number;
        _yesVotes: BigNumber;
        _yesVotesTotal: number;
        _proposedBlock: number;
        0: number;
        1: BigNumber;
        2: number;
        3: number;
      };
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRoleMemberIndex(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isRelayer(
      relayer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isRelayer(address)"(
      relayer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isValidForwarder(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isValidForwarder(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    renounceAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    special(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "special(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    specialFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "specialFee(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferFee(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFee(address[],uint256[])"(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    voteProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "voteProposal(uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    voteProposals(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "voteProposals(uint8,uint64,bytes32,bytes,bytes[])"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  MAX_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_RELAYERS()"(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

  "RELAYER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  _chainId(overrides?: CallOverrides): Promise<BigNumber>;

  "_chainId()"(overrides?: CallOverrides): Promise<BigNumber>;

  _depositCounts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_depositCounts(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _domainID(overrides?: CallOverrides): Promise<number>;

  "_domainID()"(overrides?: CallOverrides): Promise<number>;

  _expiry(overrides?: CallOverrides): Promise<number>;

  "_expiry()"(overrides?: CallOverrides): Promise<number>;

  _fee(overrides?: CallOverrides): Promise<BigNumber>;

  "_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  _feeHandler(overrides?: CallOverrides): Promise<string>;

  "_feeHandler()"(overrides?: CallOverrides): Promise<string>;

  _feeReserve(overrides?: CallOverrides): Promise<BigNumber>;

  "_feeReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

  _fee_(overrides?: CallOverrides): Promise<BigNumber>;

  "_fee_()"(overrides?: CallOverrides): Promise<BigNumber>;

  _hasVotedOnProposal(
    destNonce: BigNumberish,
    dataHash: BytesLike,
    relayer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_hasVotedOnProposal(uint72,bytes32,address)"(
    destNonce: BigNumberish,
    dataHash: BytesLike,
    relayer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _relayerThreshold(overrides?: CallOverrides): Promise<number>;

  "_relayerThreshold()"(overrides?: CallOverrides): Promise<number>;

  _resourceIDToHandlerAddress(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "_resourceIDToHandlerAddress(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  _totalRelayers(overrides?: CallOverrides): Promise<BigNumber>;

  "_totalRelayers()"(overrides?: CallOverrides): Promise<BigNumber>;

  adminAddRelayer(
    relayerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminAddRelayer(address)"(
    relayerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminChangeExpiry(
    expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminChangeExpiry(uint256)"(
    expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminChangeRelayerThreshold(
    newThreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminChangeRelayerThreshold(uint256)"(
    newThreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminPauseTransfers(overrides?: Overrides): Promise<ContractTransaction>;

  "adminPauseTransfers()"(overrides?: Overrides): Promise<ContractTransaction>;

  adminRemoveGenericResource(
    resourceID: BytesLike,
    contractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminRemoveGenericResource(bytes32,address)"(
    resourceID: BytesLike,
    contractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminRemoveNativeResourceId(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminRemoveNativeResourceId()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminRemoveRelayer(
    relayerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminRemoveRelayer(address)"(
    relayerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminRemoveResourceId(
    resourceID: BytesLike,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminRemoveResourceId(bytes32,address)"(
    resourceID: BytesLike,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminRemoveSpecialFee(
    destinationDomainID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminRemoveSpecialFee(uint8)"(
    destinationDomainID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminSetBurnable(
    handlerAddress: string,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetBurnable(address,address)"(
    handlerAddress: string,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminSetDepositNonce(
    domainID: BigNumberish,
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetDepositNonce(uint8,uint64)"(
    domainID: BigNumberish,
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminSetDomainId(
    domainID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetDomainId(uint8)"(
    domainID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminSetFee(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetFee(uint256)"(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminSetForwarder(
    forwarder: string,
    valid: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetForwarder(address,bool)"(
    forwarder: string,
    valid: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminSetGenericResource(
    handlerAddress: string,
    resourceID: BytesLike,
    contractAddress: string,
    depositFunctionSig: BytesLike,
    depositFunctionDepositorOffset: BigNumberish,
    executeFunctionSig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetGenericResource(address,bytes32,address,bytes4,uint256,bytes4)"(
    handlerAddress: string,
    resourceID: BytesLike,
    contractAddress: string,
    depositFunctionSig: BytesLike,
    depositFunctionDepositorOffset: BigNumberish,
    executeFunctionSig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminSetNative(
    resourceID: BytesLike,
    nativeAddress: string,
    isNative: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetNative(bytes32,address,bool)"(
    resourceID: BytesLike,
    nativeAddress: string,
    isNative: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminSetNativeResource(
    handlerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetNativeResource(address)"(
    handlerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminSetResource(
    handlerAddress: string,
    resourceID: BytesLike,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetResource(address,bytes32,address)"(
    handlerAddress: string,
    resourceID: BytesLike,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminSetSpecialFee(
    destinationDomainID: BigNumberish,
    _specialFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetSpecialFee(uint8,uint256)"(
    destinationDomainID: BigNumberish,
    _specialFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminUnpauseTransfers(overrides?: Overrides): Promise<ContractTransaction>;

  "adminUnpauseTransfers()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminWithdraw(
    handlerAddress: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminWithdraw(address,bytes)"(
    handlerAddress: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminWithdrawETH(
    handlerAddress: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminWithdrawETH(address,bytes)"(
    handlerAddress: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelProposal(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    dataHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelProposal(uint8,uint64,bytes32)"(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    dataHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkSignature(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkSignature(uint8,uint64,bytes32,bytes,bytes)"(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deposit(
    destinationDomainID: BigNumberish,
    resourceID: BytesLike,
    depositData: BytesLike,
    feeData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit(uint8,bytes32,bytes,bytes)"(
    destinationDomainID: BigNumberish,
    resourceID: BytesLike,
    depositData: BytesLike,
    feeData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  executeProposal(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    data: BytesLike,
    resourceID: BytesLike,
    revertOnFail: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeProposal(uint8,uint64,bytes,bytes32,bool)"(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    data: BytesLike,
    resourceID: BytesLike,
    revertOnFail: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getFee(
    destinationDomainID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFee(uint8)"(
    destinationDomainID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposal(
    originDomainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    _status: number;
    _yesVotes: BigNumber;
    _yesVotesTotal: number;
    _proposedBlock: number;
    0: number;
    1: BigNumber;
    2: number;
    3: number;
  }>;

  "getProposal(uint8,uint64,bytes32,bytes)"(
    originDomainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    _status: number;
    _yesVotes: BigNumber;
    _yesVotesTotal: number;
    _proposedBlock: number;
    0: number;
    1: BigNumber;
    2: number;
    3: number;
  }>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleMemberIndex(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberIndex(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRelayer(relayer: string, overrides?: CallOverrides): Promise<boolean>;

  "isRelayer(address)"(
    relayer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidForwarder(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isValidForwarder(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  renounceAdmin(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceAdmin(address)"(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  special(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "special(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  specialFee(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "specialFee(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferFee(
    addrs: string[],
    amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFee(address[],uint256[])"(
    addrs: string[],
    amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  voteProposal(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "voteProposal(uint8,uint64,bytes32,bytes)"(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  voteProposals(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signatures: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "voteProposals(uint8,uint64,bytes32,bytes,bytes[])"(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signatures: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_RELAYERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

    "RELAYER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    _chainId(overrides?: CallOverrides): Promise<BigNumber>;

    "_chainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    _depositCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_depositCounts(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _domainID(overrides?: CallOverrides): Promise<number>;

    "_domainID()"(overrides?: CallOverrides): Promise<number>;

    _expiry(overrides?: CallOverrides): Promise<number>;

    "_expiry()"(overrides?: CallOverrides): Promise<number>;

    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    "_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    _feeHandler(overrides?: CallOverrides): Promise<string>;

    "_feeHandler()"(overrides?: CallOverrides): Promise<string>;

    _feeReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "_feeReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_(overrides?: CallOverrides): Promise<BigNumber>;

    "_fee_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _hasVotedOnProposal(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_hasVotedOnProposal(uint72,bytes32,address)"(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _relayerThreshold(overrides?: CallOverrides): Promise<number>;

    "_relayerThreshold()"(overrides?: CallOverrides): Promise<number>;

    _resourceIDToHandlerAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "_resourceIDToHandlerAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    _totalRelayers(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalRelayers()"(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddRelayer(
      relayerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminAddRelayer(address)"(
      relayerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminChangeExpiry(
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminChangeExpiry(uint256)"(
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminChangeRelayerThreshold(
      newThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminChangeRelayerThreshold(uint256)"(
      newThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminPauseTransfers(overrides?: CallOverrides): Promise<void>;

    "adminPauseTransfers()"(overrides?: CallOverrides): Promise<void>;

    adminRemoveGenericResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminRemoveGenericResource(bytes32,address)"(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminRemoveNativeResourceId(overrides?: CallOverrides): Promise<void>;

    "adminRemoveNativeResourceId()"(overrides?: CallOverrides): Promise<void>;

    adminRemoveRelayer(
      relayerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminRemoveRelayer(address)"(
      relayerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminRemoveResourceId(
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminRemoveResourceId(bytes32,address)"(
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminRemoveSpecialFee(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminRemoveSpecialFee(uint8)"(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminSetBurnable(address,address)"(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetDepositNonce(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminSetDepositNonce(uint8,uint64)"(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetDomainId(
      domainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminSetDomainId(uint8)"(
      domainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "adminSetFee(uint256)"(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetForwarder(
      forwarder: string,
      valid: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminSetForwarder(address,bool)"(
      forwarder: string,
      valid: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetGenericResource(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminSetGenericResource(address,bytes32,address,bytes4,uint256,bytes4)"(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetNative(
      resourceID: BytesLike,
      nativeAddress: string,
      isNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminSetNative(bytes32,address,bool)"(
      resourceID: BytesLike,
      nativeAddress: string,
      isNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetNativeResource(
      handlerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminSetNativeResource(address)"(
      handlerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetResource(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminSetResource(address,bytes32,address)"(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetSpecialFee(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminSetSpecialFee(uint8,uint256)"(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminUnpauseTransfers(overrides?: CallOverrides): Promise<void>;

    "adminUnpauseTransfers()"(overrides?: CallOverrides): Promise<void>;

    adminWithdraw(
      handlerAddress: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminWithdraw(address,bytes)"(
      handlerAddress: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    adminWithdrawETH(
      handlerAddress: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminWithdrawETH(address,bytes)"(
      handlerAddress: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelProposal(uint8,uint64,bytes32)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    checkSignature(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkSignature(uint8,uint64,bytes32,bytes,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint8,bytes32,bytes,bytes)"(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeProposal(uint8,uint64,bytes,bytes32,bool)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getFee(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFee(uint8)"(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _status: number;
      _yesVotes: BigNumber;
      _yesVotesTotal: number;
      _proposedBlock: number;
      0: number;
      1: BigNumber;
      2: number;
      3: number;
    }>;

    "getProposal(uint8,uint64,bytes32,bytes)"(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _status: number;
      _yesVotes: BigNumber;
      _yesVotesTotal: number;
      _proposedBlock: number;
      0: number;
      1: BigNumber;
      2: number;
      3: number;
    }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberIndex(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRelayer(relayer: string, overrides?: CallOverrides): Promise<boolean>;

    "isRelayer(address)"(
      relayer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidForwarder(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isValidForwarder(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    renounceAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    "renounceAdmin(address)"(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    special(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "special(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    specialFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "specialFee(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFee(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFee(address[],uint256[])"(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    voteProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "voteProposal(uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    voteProposals(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "voteProposals(uint8,uint64,bytes32,bytes,bytes[])"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      destinationDomainID: null,
      resourceID: null,
      depositNonce: null,
      user: string | null,
      data: null,
      handlerResponse: null
    ): EventFilter;

    FailedHandlerExecution(lowLevelData: null): EventFilter;

    FeeChanged(newFee: null): EventFilter;

    FeeDistributed(
      tokenAddress: null,
      recipient: null,
      amount: null
    ): EventFilter;

    FeeHandlerChanged(newFeeHandler: null): EventFilter;

    Paused(account: null): EventFilter;

    ProposalEvent(
      originDomainID: null,
      depositNonce: null,
      status: null,
      dataHash: null
    ): EventFilter;

    ProposalVote(
      originDomainID: null,
      depositNonce: null,
      status: null,
      dataHash: null
    ): EventFilter;

    RelayerAdded(relayer: null): EventFilter;

    RelayerRemoved(relayer: null): EventFilter;

    RelayerThresholdChanged(newThreshold: null): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_RELAYERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "RELAYER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    _chainId(overrides?: CallOverrides): Promise<BigNumber>;

    "_chainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    _depositCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_depositCounts(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _domainID(overrides?: CallOverrides): Promise<BigNumber>;

    "_domainID()"(overrides?: CallOverrides): Promise<BigNumber>;

    _expiry(overrides?: CallOverrides): Promise<BigNumber>;

    "_expiry()"(overrides?: CallOverrides): Promise<BigNumber>;

    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    "_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    _feeHandler(overrides?: CallOverrides): Promise<BigNumber>;

    "_feeHandler()"(overrides?: CallOverrides): Promise<BigNumber>;

    _feeReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "_feeReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_(overrides?: CallOverrides): Promise<BigNumber>;

    "_fee_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _hasVotedOnProposal(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_hasVotedOnProposal(uint72,bytes32,address)"(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _relayerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "_relayerThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    _resourceIDToHandlerAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_resourceIDToHandlerAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _totalRelayers(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalRelayers()"(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddRelayer(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminAddRelayer(address)"(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminChangeExpiry(
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminChangeExpiry(uint256)"(
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminChangeRelayerThreshold(
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminChangeRelayerThreshold(uint256)"(
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminPauseTransfers(overrides?: Overrides): Promise<BigNumber>;

    "adminPauseTransfers()"(overrides?: Overrides): Promise<BigNumber>;

    adminRemoveGenericResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminRemoveGenericResource(bytes32,address)"(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminRemoveNativeResourceId(overrides?: Overrides): Promise<BigNumber>;

    "adminRemoveNativeResourceId()"(overrides?: Overrides): Promise<BigNumber>;

    adminRemoveRelayer(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminRemoveRelayer(address)"(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminRemoveResourceId(
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminRemoveResourceId(bytes32,address)"(
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminRemoveSpecialFee(
      destinationDomainID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminRemoveSpecialFee(uint8)"(
      destinationDomainID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetBurnable(address,address)"(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminSetDepositNonce(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetDepositNonce(uint8,uint64)"(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminSetDomainId(
      domainID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetDomainId(uint8)"(
      domainID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminSetFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminSetForwarder(
      forwarder: string,
      valid: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetForwarder(address,bool)"(
      forwarder: string,
      valid: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminSetGenericResource(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetGenericResource(address,bytes32,address,bytes4,uint256,bytes4)"(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminSetNative(
      resourceID: BytesLike,
      nativeAddress: string,
      isNative: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetNative(bytes32,address,bool)"(
      resourceID: BytesLike,
      nativeAddress: string,
      isNative: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminSetNativeResource(
      handlerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetNativeResource(address)"(
      handlerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminSetResource(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetResource(address,bytes32,address)"(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminSetSpecialFee(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetSpecialFee(uint8,uint256)"(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminUnpauseTransfers(overrides?: Overrides): Promise<BigNumber>;

    "adminUnpauseTransfers()"(overrides?: Overrides): Promise<BigNumber>;

    adminWithdraw(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminWithdraw(address,bytes)"(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminWithdrawETH(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminWithdrawETH(address,bytes)"(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelProposal(uint8,uint64,bytes32)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkSignature(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkSignature(uint8,uint64,bytes32,bytes,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deposit(uint8,bytes32,bytes,bytes)"(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    executeProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeProposal(uint8,uint64,bytes,bytes32,bool)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getFee(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFee(uint8)"(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProposal(uint8,uint64,bytes32,bytes)"(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberIndex(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRelayer(relayer: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isRelayer(address)"(
      relayer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidForwarder(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidForwarder(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceAdmin(newAdmin: string, overrides?: Overrides): Promise<BigNumber>;

    "renounceAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    special(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "special(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    specialFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "specialFee(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFee(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFee(address[],uint256[])"(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    voteProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "voteProposal(uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    voteProposals(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "voteProposals(uint8,uint64,bytes32,bytes,bytes[])"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_RELAYERS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "RELAYER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_chainId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _depositCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_depositCounts(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _domainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_domainID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_expiry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _feeHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_feeHandler()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _feeReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_feeReserve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_fee_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _hasVotedOnProposal(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_hasVotedOnProposal(uint72,bytes32,address)"(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _relayerThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_relayerThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _resourceIDToHandlerAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_resourceIDToHandlerAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _totalRelayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_totalRelayers()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminAddRelayer(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminAddRelayer(address)"(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminChangeExpiry(
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminChangeExpiry(uint256)"(
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminChangeRelayerThreshold(
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminChangeRelayerThreshold(uint256)"(
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminPauseTransfers(overrides?: Overrides): Promise<PopulatedTransaction>;

    "adminPauseTransfers()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminRemoveGenericResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminRemoveGenericResource(bytes32,address)"(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminRemoveNativeResourceId(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminRemoveNativeResourceId()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminRemoveRelayer(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminRemoveRelayer(address)"(
      relayerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminRemoveResourceId(
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminRemoveResourceId(bytes32,address)"(
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminRemoveSpecialFee(
      destinationDomainID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminRemoveSpecialFee(uint8)"(
      destinationDomainID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetBurnable(address,address)"(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminSetDepositNonce(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetDepositNonce(uint8,uint64)"(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminSetDomainId(
      domainID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetDomainId(uint8)"(
      domainID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminSetFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminSetForwarder(
      forwarder: string,
      valid: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetForwarder(address,bool)"(
      forwarder: string,
      valid: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminSetGenericResource(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetGenericResource(address,bytes32,address,bytes4,uint256,bytes4)"(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminSetNative(
      resourceID: BytesLike,
      nativeAddress: string,
      isNative: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetNative(bytes32,address,bool)"(
      resourceID: BytesLike,
      nativeAddress: string,
      isNative: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminSetNativeResource(
      handlerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetNativeResource(address)"(
      handlerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminSetResource(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetResource(address,bytes32,address)"(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminSetSpecialFee(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetSpecialFee(uint8,uint256)"(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminUnpauseTransfers(overrides?: Overrides): Promise<PopulatedTransaction>;

    "adminUnpauseTransfers()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminWithdraw(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminWithdraw(address,bytes)"(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminWithdrawETH(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminWithdrawETH(address,bytes)"(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelProposal(uint8,uint64,bytes32)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkSignature(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkSignature(uint8,uint64,bytes32,bytes,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint8,bytes32,bytes,bytes)"(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    executeProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeProposal(uint8,uint64,bytes,bytes32,bool)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getFee(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFee(uint8)"(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposal(uint8,uint64,bytes32,bytes)"(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberIndex(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRelayer(
      relayer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRelayer(address)"(
      relayer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidForwarder(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidForwarder(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    special(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "special(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    specialFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "specialFee(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFee(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFee(address[],uint256[])"(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    voteProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "voteProposal(uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    voteProposals(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "voteProposals(uint8,uint64,bytes32,bytes,bytes[])"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
