/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestTargetInterface extends ethers.utils.Interface {
  functions: {
    "burnAllGas()": FunctionFragment;
    "calls()": FunctionFragment;
    "data()": FunctionFragment;
    "gasLeft()": FunctionFragment;
    "setBurnAllGas()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnAllGas",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "calls", values?: undefined): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(functionFragment: "gasLeft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBurnAllGas",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "burnAllGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasLeft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBurnAllGas",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestTarget extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestTargetInterface;

  functions: {
    burnAllGas(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "burnAllGas()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    calls(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "calls()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    data(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "data()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    gasLeft(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "gasLeft()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setBurnAllGas(overrides?: Overrides): Promise<ContractTransaction>;

    "setBurnAllGas()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  burnAllGas(overrides?: CallOverrides): Promise<boolean>;

  "burnAllGas()"(overrides?: CallOverrides): Promise<boolean>;

  calls(overrides?: CallOverrides): Promise<BigNumber>;

  "calls()"(overrides?: CallOverrides): Promise<BigNumber>;

  data(overrides?: CallOverrides): Promise<string>;

  "data()"(overrides?: CallOverrides): Promise<string>;

  gasLeft(overrides?: CallOverrides): Promise<BigNumber>;

  "gasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

  setBurnAllGas(overrides?: Overrides): Promise<ContractTransaction>;

  "setBurnAllGas()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    burnAllGas(overrides?: CallOverrides): Promise<boolean>;

    "burnAllGas()"(overrides?: CallOverrides): Promise<boolean>;

    calls(overrides?: CallOverrides): Promise<BigNumber>;

    "calls()"(overrides?: CallOverrides): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<string>;

    "data()"(overrides?: CallOverrides): Promise<string>;

    gasLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "gasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBurnAllGas(overrides?: CallOverrides): Promise<void>;

    "setBurnAllGas()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    burnAllGas(overrides?: CallOverrides): Promise<BigNumber>;

    "burnAllGas()"(overrides?: CallOverrides): Promise<BigNumber>;

    calls(overrides?: CallOverrides): Promise<BigNumber>;

    "calls()"(overrides?: CallOverrides): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    "data()"(overrides?: CallOverrides): Promise<BigNumber>;

    gasLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "gasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBurnAllGas(overrides?: Overrides): Promise<BigNumber>;

    "setBurnAllGas()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    burnAllGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "burnAllGas()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "calls()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "data()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gasLeft()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBurnAllGas(overrides?: Overrides): Promise<PopulatedTransaction>;

    "setBurnAllGas()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
