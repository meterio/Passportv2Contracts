/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IBridge {
  export type ProposalStruct = {
    _status: BigNumberish;
    _yesVotes: BigNumberish;
    _yesVotesTotal: BigNumberish;
    _proposedBlock: BigNumberish;
  };

  export type ProposalStructOutput = [number, BigNumber, number, number] & {
    _status: number;
    _yesVotes: BigNumber;
    _yesVotesTotal: number;
    _proposedBlock: number;
  };
}

export interface BridgeUpgradeableInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MAX_RELAYERS()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "RELAYER_ROLE()": FunctionFragment;
    "_chainId()": FunctionFragment;
    "_depositCounts(uint8)": FunctionFragment;
    "_domainID()": FunctionFragment;
    "_expiry()": FunctionFragment;
    "_fee()": FunctionFragment;
    "_feeHandler()": FunctionFragment;
    "_feeReserve()": FunctionFragment;
    "_fee_()": FunctionFragment;
    "_hasVotedOnProposal(uint72,bytes32,address)": FunctionFragment;
    "_relayerThreshold()": FunctionFragment;
    "_resourceIDToHandlerAddress(bytes32)": FunctionFragment;
    "_totalRelayers()": FunctionFragment;
    "adminAddRelayer(address)": FunctionFragment;
    "adminChangeExpiry(uint256)": FunctionFragment;
    "adminChangeRelayerThreshold(uint256)": FunctionFragment;
    "adminPauseTransfers()": FunctionFragment;
    "adminRemoveGenericResource(bytes32,address)": FunctionFragment;
    "adminRemoveRelayer(address)": FunctionFragment;
    "adminRemoveResourceId(bytes32,address,bool)": FunctionFragment;
    "adminRemoveSpecialFee(uint8)": FunctionFragment;
    "adminSetBurnable(address,address)": FunctionFragment;
    "adminSetDepositNonce(uint8,uint64)": FunctionFragment;
    "adminSetDomainId(uint8)": FunctionFragment;
    "adminSetFee(uint256)": FunctionFragment;
    "adminSetForwarder(address,bool)": FunctionFragment;
    "adminSetGenericResource(address,bytes32,address,bytes4,uint256,bytes4)": FunctionFragment;
    "adminSetResource(address,bytes32,address,bool)": FunctionFragment;
    "adminSetSpecialFee(uint8,uint256)": FunctionFragment;
    "adminUnpauseTransfers()": FunctionFragment;
    "adminWithdraw(address,bytes)": FunctionFragment;
    "adminWithdrawETH(address,bytes)": FunctionFragment;
    "cancelProposal(uint8,uint64,bytes32)": FunctionFragment;
    "checkSignature(uint8,uint64,bytes32,bytes,bytes)": FunctionFragment;
    "deposit(uint8,bytes32,bytes,bytes)": FunctionFragment;
    "executeProposal(uint8,uint64,bytes,bytes32,bool)": FunctionFragment;
    "getFee(uint8)": FunctionFragment;
    "getProposal(uint8,uint64,bytes32,bytes)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoleMemberIndex(bytes32,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(uint8,address[],uint256,uint256,address)": FunctionFragment;
    "isRelayer(address)": FunctionFragment;
    "isValidForwarder(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceAdmin(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "special(uint8)": FunctionFragment;
    "specialFee(uint8)": FunctionFragment;
    "transferFee(address[],uint256[])": FunctionFragment;
    "voteProposal(uint8,uint64,bytes32,bytes)": FunctionFragment;
    "voteProposals(uint8,uint64,bytes32,bytes,bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_RELAYERS"
      | "PERMIT_TYPEHASH"
      | "RELAYER_ROLE"
      | "_chainId"
      | "_depositCounts"
      | "_domainID"
      | "_expiry"
      | "_fee"
      | "_feeHandler"
      | "_feeReserve"
      | "_fee_"
      | "_hasVotedOnProposal"
      | "_relayerThreshold"
      | "_resourceIDToHandlerAddress"
      | "_totalRelayers"
      | "adminAddRelayer"
      | "adminChangeExpiry"
      | "adminChangeRelayerThreshold"
      | "adminPauseTransfers"
      | "adminRemoveGenericResource"
      | "adminRemoveRelayer"
      | "adminRemoveResourceId"
      | "adminRemoveSpecialFee"
      | "adminSetBurnable"
      | "adminSetDepositNonce"
      | "adminSetDomainId"
      | "adminSetFee"
      | "adminSetForwarder"
      | "adminSetGenericResource"
      | "adminSetResource"
      | "adminSetSpecialFee"
      | "adminUnpauseTransfers"
      | "adminWithdraw"
      | "adminWithdrawETH"
      | "cancelProposal"
      | "checkSignature"
      | "deposit"
      | "executeProposal"
      | "getFee"
      | "getProposal"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoleMemberIndex"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isRelayer"
      | "isValidForwarder"
      | "paused"
      | "renounceAdmin"
      | "renounceRole"
      | "revokeRole"
      | "special"
      | "specialFee"
      | "transferFee"
      | "voteProposal"
      | "voteProposals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_RELAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_depositCounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_domainID", values?: undefined): string;
  encodeFunctionData(functionFragment: "_expiry", values?: undefined): string;
  encodeFunctionData(functionFragment: "_fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_feeHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_feeReserve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_fee_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_hasVotedOnProposal",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_relayerThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_resourceIDToHandlerAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_totalRelayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminChangeExpiry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminChangeRelayerThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminPauseTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveGenericResource",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveResourceId",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveSpecialFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetBurnable",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetDepositNonce",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetDomainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetForwarder",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetGenericResource",
    values: [string, BytesLike, string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetResource",
    values: [string, BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetSpecialFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminUnpauseTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdraw",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdrawETH",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignature",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberIndex",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string[], BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "isRelayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isValidForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "special",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "specialFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFee",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "voteProposal",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteProposals",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RELAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAYER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_depositCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_domainID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_expiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_feeHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_feeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_fee_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_hasVotedOnProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_relayerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_resourceIDToHandlerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminChangeExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminChangeRelayerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminPauseTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveGenericResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveResourceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveSpecialFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetBurnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetDepositNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetDomainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetGenericResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetSpecialFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminUnpauseTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "special", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "specialFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteProposals",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(uint8,bytes32,uint64,address,bytes,bytes)": EventFragment;
    "FailedHandlerExecution(bytes)": EventFragment;
    "FeeChanged(uint256)": EventFragment;
    "FeeDistributed(address,address,uint256)": EventFragment;
    "FeeHandlerChanged(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "ProposalEvent(uint8,uint64,uint8,bytes32)": EventFragment;
    "ProposalVote(uint8,uint64,uint8,bytes32)": EventFragment;
    "RelayerAdded(address)": EventFragment;
    "RelayerRemoved(address)": EventFragment;
    "RelayerThresholdChanged(uint256)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailedHandlerExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeHandlerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerThresholdChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface DepositEventObject {
  destinationDomainID: number;
  resourceID: string;
  depositNonce: BigNumber;
  user: string;
  data: string;
  handlerResponse: string;
}
export type DepositEvent = TypedEvent<
  [number, string, BigNumber, string, string, string],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FailedHandlerExecutionEventObject {
  lowLevelData: string;
}
export type FailedHandlerExecutionEvent = TypedEvent<
  [string],
  FailedHandlerExecutionEventObject
>;

export type FailedHandlerExecutionEventFilter =
  TypedEventFilter<FailedHandlerExecutionEvent>;

export interface FeeChangedEventObject {
  newFee: BigNumber;
}
export type FeeChangedEvent = TypedEvent<[BigNumber], FeeChangedEventObject>;

export type FeeChangedEventFilter = TypedEventFilter<FeeChangedEvent>;

export interface FeeDistributedEventObject {
  tokenAddress: string;
  recipient: string;
  amount: BigNumber;
}
export type FeeDistributedEvent = TypedEvent<
  [string, string, BigNumber],
  FeeDistributedEventObject
>;

export type FeeDistributedEventFilter = TypedEventFilter<FeeDistributedEvent>;

export interface FeeHandlerChangedEventObject {
  newFeeHandler: string;
}
export type FeeHandlerChangedEvent = TypedEvent<
  [string],
  FeeHandlerChangedEventObject
>;

export type FeeHandlerChangedEventFilter =
  TypedEventFilter<FeeHandlerChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ProposalEventEventObject {
  originDomainID: number;
  depositNonce: BigNumber;
  status: number;
  dataHash: string;
}
export type ProposalEventEvent = TypedEvent<
  [number, BigNumber, number, string],
  ProposalEventEventObject
>;

export type ProposalEventEventFilter = TypedEventFilter<ProposalEventEvent>;

export interface ProposalVoteEventObject {
  originDomainID: number;
  depositNonce: BigNumber;
  status: number;
  dataHash: string;
}
export type ProposalVoteEvent = TypedEvent<
  [number, BigNumber, number, string],
  ProposalVoteEventObject
>;

export type ProposalVoteEventFilter = TypedEventFilter<ProposalVoteEvent>;

export interface RelayerAddedEventObject {
  relayer: string;
}
export type RelayerAddedEvent = TypedEvent<[string], RelayerAddedEventObject>;

export type RelayerAddedEventFilter = TypedEventFilter<RelayerAddedEvent>;

export interface RelayerRemovedEventObject {
  relayer: string;
}
export type RelayerRemovedEvent = TypedEvent<
  [string],
  RelayerRemovedEventObject
>;

export type RelayerRemovedEventFilter = TypedEventFilter<RelayerRemovedEvent>;

export interface RelayerThresholdChangedEventObject {
  newThreshold: BigNumber;
}
export type RelayerThresholdChangedEvent = TypedEvent<
  [BigNumber],
  RelayerThresholdChangedEventObject
>;

export type RelayerThresholdChangedEventFilter =
  TypedEventFilter<RelayerThresholdChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface BridgeUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    _depositCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _domainID(overrides?: CallOverrides): Promise<[number]>;

    _expiry(overrides?: CallOverrides): Promise<[number]>;

    _fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _feeHandler(overrides?: CallOverrides): Promise<[string]>;

    _feeReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    _fee_(overrides?: CallOverrides): Promise<[BigNumber]>;

    _hasVotedOnProposal(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _relayerThreshold(overrides?: CallOverrides): Promise<[number]>;

    _resourceIDToHandlerAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _totalRelayers(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminAddRelayer(
      relayerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminChangeExpiry(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminChangeRelayerThreshold(
      newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminPauseTransfers(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminRemoveGenericResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminRemoveRelayer(
      relayerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminRemoveResourceId(
      resourceID: BytesLike,
      tokenAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminRemoveSpecialFee(
      destinationDomainID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminSetDepositNonce(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminSetDomainId(
      domainID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminSetFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminSetForwarder(
      forwarder: string,
      valid: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminSetGenericResource(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminSetResource(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminSetSpecialFee(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminUnpauseTransfers(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminWithdraw(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminWithdrawETH(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkSignature(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deposit(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getFee(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProposal(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[IBridge.ProposalStructOutput]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      domainID: BigNumberish,
      initialRelayers: string[],
      initialRelayerThreshold: BigNumberish,
      expiry: BigNumberish,
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isRelayer(relayer: string, overrides?: CallOverrides): Promise<[boolean]>;

    isValidForwarder(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    special(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    specialFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferFee(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    voteProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    voteProposals(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

  _chainId(overrides?: CallOverrides): Promise<BigNumber>;

  _depositCounts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _domainID(overrides?: CallOverrides): Promise<number>;

  _expiry(overrides?: CallOverrides): Promise<number>;

  _fee(overrides?: CallOverrides): Promise<BigNumber>;

  _feeHandler(overrides?: CallOverrides): Promise<string>;

  _feeReserve(overrides?: CallOverrides): Promise<BigNumber>;

  _fee_(overrides?: CallOverrides): Promise<BigNumber>;

  _hasVotedOnProposal(
    destNonce: BigNumberish,
    dataHash: BytesLike,
    relayer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _relayerThreshold(overrides?: CallOverrides): Promise<number>;

  _resourceIDToHandlerAddress(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  _totalRelayers(overrides?: CallOverrides): Promise<BigNumber>;

  adminAddRelayer(
    relayerAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminChangeExpiry(
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminChangeRelayerThreshold(
    newThreshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminPauseTransfers(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminRemoveGenericResource(
    resourceID: BytesLike,
    contractAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminRemoveRelayer(
    relayerAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminRemoveResourceId(
    resourceID: BytesLike,
    tokenAddress: string,
    isNative: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminRemoveSpecialFee(
    destinationDomainID: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminSetBurnable(
    handlerAddress: string,
    tokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminSetDepositNonce(
    domainID: BigNumberish,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminSetDomainId(
    domainID: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminSetFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminSetForwarder(
    forwarder: string,
    valid: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminSetGenericResource(
    handlerAddress: string,
    resourceID: BytesLike,
    contractAddress: string,
    depositFunctionSig: BytesLike,
    depositFunctionDepositorOffset: BigNumberish,
    executeFunctionSig: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminSetResource(
    handlerAddress: string,
    resourceID: BytesLike,
    tokenAddress: string,
    isNative: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminSetSpecialFee(
    destinationDomainID: BigNumberish,
    _specialFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminUnpauseTransfers(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminWithdraw(
    handlerAddress: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminWithdrawETH(
    handlerAddress: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelProposal(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    dataHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkSignature(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deposit(
    destinationDomainID: BigNumberish,
    resourceID: BytesLike,
    depositData: BytesLike,
    feeData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeProposal(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    data: BytesLike,
    resourceID: BytesLike,
    revertOnFail: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getFee(
    destinationDomainID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposal(
    originDomainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<IBridge.ProposalStructOutput>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleMemberIndex(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    domainID: BigNumberish,
    initialRelayers: string[],
    initialRelayerThreshold: BigNumberish,
    expiry: BigNumberish,
    admin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isRelayer(relayer: string, overrides?: CallOverrides): Promise<boolean>;

  isValidForwarder(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  special(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  specialFee(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferFee(
    addrs: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  voteProposal(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  voteProposals(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signatures: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

    _chainId(overrides?: CallOverrides): Promise<BigNumber>;

    _depositCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _domainID(overrides?: CallOverrides): Promise<number>;

    _expiry(overrides?: CallOverrides): Promise<number>;

    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    _feeHandler(overrides?: CallOverrides): Promise<string>;

    _feeReserve(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_(overrides?: CallOverrides): Promise<BigNumber>;

    _hasVotedOnProposal(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _relayerThreshold(overrides?: CallOverrides): Promise<number>;

    _resourceIDToHandlerAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    _totalRelayers(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddRelayer(
      relayerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminChangeExpiry(
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminChangeRelayerThreshold(
      newThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminPauseTransfers(overrides?: CallOverrides): Promise<void>;

    adminRemoveGenericResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminRemoveRelayer(
      relayerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminRemoveResourceId(
      resourceID: BytesLike,
      tokenAddress: string,
      isNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    adminRemoveSpecialFee(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetDepositNonce(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetDomainId(
      domainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    adminSetForwarder(
      forwarder: string,
      valid: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetGenericResource(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetResource(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      isNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetSpecialFee(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminUnpauseTransfers(overrides?: CallOverrides): Promise<void>;

    adminWithdraw(
      handlerAddress: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    adminWithdrawETH(
      handlerAddress: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    checkSignature(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getFee(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<IBridge.ProposalStructOutput>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      domainID: BigNumberish,
      initialRelayers: string[],
      initialRelayerThreshold: BigNumberish,
      expiry: BigNumberish,
      admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isRelayer(relayer: string, overrides?: CallOverrides): Promise<boolean>;

    isValidForwarder(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    special(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    specialFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFee(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    voteProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    voteProposals(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(uint8,bytes32,uint64,address,bytes,bytes)"(
      destinationDomainID?: null,
      resourceID?: null,
      depositNonce?: null,
      user?: string | null,
      data?: null,
      handlerResponse?: null
    ): DepositEventFilter;
    Deposit(
      destinationDomainID?: null,
      resourceID?: null,
      depositNonce?: null,
      user?: string | null,
      data?: null,
      handlerResponse?: null
    ): DepositEventFilter;

    "FailedHandlerExecution(bytes)"(
      lowLevelData?: null
    ): FailedHandlerExecutionEventFilter;
    FailedHandlerExecution(
      lowLevelData?: null
    ): FailedHandlerExecutionEventFilter;

    "FeeChanged(uint256)"(newFee?: null): FeeChangedEventFilter;
    FeeChanged(newFee?: null): FeeChangedEventFilter;

    "FeeDistributed(address,address,uint256)"(
      tokenAddress?: null,
      recipient?: null,
      amount?: null
    ): FeeDistributedEventFilter;
    FeeDistributed(
      tokenAddress?: null,
      recipient?: null,
      amount?: null
    ): FeeDistributedEventFilter;

    "FeeHandlerChanged(address)"(
      newFeeHandler?: null
    ): FeeHandlerChangedEventFilter;
    FeeHandlerChanged(newFeeHandler?: null): FeeHandlerChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ProposalEvent(uint8,uint64,uint8,bytes32)"(
      originDomainID?: null,
      depositNonce?: null,
      status?: null,
      dataHash?: null
    ): ProposalEventEventFilter;
    ProposalEvent(
      originDomainID?: null,
      depositNonce?: null,
      status?: null,
      dataHash?: null
    ): ProposalEventEventFilter;

    "ProposalVote(uint8,uint64,uint8,bytes32)"(
      originDomainID?: null,
      depositNonce?: null,
      status?: null,
      dataHash?: null
    ): ProposalVoteEventFilter;
    ProposalVote(
      originDomainID?: null,
      depositNonce?: null,
      status?: null,
      dataHash?: null
    ): ProposalVoteEventFilter;

    "RelayerAdded(address)"(relayer?: null): RelayerAddedEventFilter;
    RelayerAdded(relayer?: null): RelayerAddedEventFilter;

    "RelayerRemoved(address)"(relayer?: null): RelayerRemovedEventFilter;
    RelayerRemoved(relayer?: null): RelayerRemovedEventFilter;

    "RelayerThresholdChanged(uint256)"(
      newThreshold?: null
    ): RelayerThresholdChangedEventFilter;
    RelayerThresholdChanged(
      newThreshold?: null
    ): RelayerThresholdChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _chainId(overrides?: CallOverrides): Promise<BigNumber>;

    _depositCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _domainID(overrides?: CallOverrides): Promise<BigNumber>;

    _expiry(overrides?: CallOverrides): Promise<BigNumber>;

    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    _feeHandler(overrides?: CallOverrides): Promise<BigNumber>;

    _feeReserve(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_(overrides?: CallOverrides): Promise<BigNumber>;

    _hasVotedOnProposal(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _relayerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    _resourceIDToHandlerAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _totalRelayers(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddRelayer(
      relayerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminChangeExpiry(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminChangeRelayerThreshold(
      newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminPauseTransfers(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminRemoveGenericResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminRemoveRelayer(
      relayerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminRemoveResourceId(
      resourceID: BytesLike,
      tokenAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminRemoveSpecialFee(
      destinationDomainID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminSetDepositNonce(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminSetDomainId(
      domainID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminSetFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminSetForwarder(
      forwarder: string,
      valid: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminSetGenericResource(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminSetResource(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminSetSpecialFee(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminUnpauseTransfers(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminWithdraw(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminWithdrawETH(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkSignature(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    executeProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getFee(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      domainID: BigNumberish,
      initialRelayers: string[],
      initialRelayerThreshold: BigNumberish,
      expiry: BigNumberish,
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isRelayer(relayer: string, overrides?: CallOverrides): Promise<BigNumber>;

    isValidForwarder(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    special(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    specialFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFee(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    voteProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    voteProposals(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _depositCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _domainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _feeHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _feeReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _hasVotedOnProposal(
      destNonce: BigNumberish,
      dataHash: BytesLike,
      relayer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _relayerThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _resourceIDToHandlerAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _totalRelayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminAddRelayer(
      relayerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminChangeExpiry(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminChangeRelayerThreshold(
      newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminPauseTransfers(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminRemoveGenericResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminRemoveRelayer(
      relayerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminRemoveResourceId(
      resourceID: BytesLike,
      tokenAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminRemoveSpecialFee(
      destinationDomainID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminSetDepositNonce(
      domainID: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminSetDomainId(
      domainID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminSetFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminSetForwarder(
      forwarder: string,
      valid: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminSetGenericResource(
      handlerAddress: string,
      resourceID: BytesLike,
      contractAddress: string,
      depositFunctionSig: BytesLike,
      depositFunctionDepositorOffset: BigNumberish,
      executeFunctionSig: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminSetResource(
      handlerAddress: string,
      resourceID: BytesLike,
      tokenAddress: string,
      isNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminSetSpecialFee(
      destinationDomainID: BigNumberish,
      _specialFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminUnpauseTransfers(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminWithdraw(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminWithdrawETH(
      handlerAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkSignature(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      data: BytesLike,
      resourceID: BytesLike,
      revertOnFail: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getFee(
      destinationDomainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      originDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      domainID: BigNumberish,
      initialRelayers: string[],
      initialRelayerThreshold: BigNumberish,
      expiry: BigNumberish,
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isRelayer(
      relayer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidForwarder(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    special(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    specialFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFee(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    voteProposal(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    voteProposals(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
