/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IFeeHandlerInterface extends ethers.utils.Interface {
  functions: {
    "calculateFee(address,uint8,uint8,bytes32,bytes,bytes)": FunctionFragment;
    "collectFee(address,uint8,uint8,bytes32,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;

  events: {
    "FeeCollected(address,uint8,uint8,bytes32,uint256,address)": EventFragment;
    "FeeDistributed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDistributed"): EventFragment;
}

export class IFeeHandler extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IFeeHandlerInterface;

  functions: {
    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    "calculateFee(address,uint8,uint8,bytes32,bytes,bytes)"(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "collectFee(address,uint8,uint8,bytes32,bytes,bytes)"(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  calculateFee(
    sender: string,
    fromDomainID: BigNumberish,
    destinationDomainID: BigNumberish,
    resourceID: BytesLike,
    depositData: BytesLike,
    feeData: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
  }>;

  "calculateFee(address,uint8,uint8,bytes32,bytes,bytes)"(
    sender: string,
    fromDomainID: BigNumberish,
    destinationDomainID: BigNumberish,
    resourceID: BytesLike,
    depositData: BytesLike,
    feeData: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
  }>;

  collectFee(
    sender: string,
    fromDomainID: BigNumberish,
    destinationDomainID: BigNumberish,
    resourceID: BytesLike,
    depositData: BytesLike,
    feeData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "collectFee(address,uint8,uint8,bytes32,bytes,bytes)"(
    sender: string,
    fromDomainID: BigNumberish,
    destinationDomainID: BigNumberish,
    resourceID: BytesLike,
    depositData: BytesLike,
    feeData: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    "calculateFee(address,uint8,uint8,bytes32,bytes,bytes)"(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "collectFee(address,uint8,uint8,bytes32,bytes,bytes)"(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    FeeCollected(
      sender: null,
      fromDomainID: null,
      destinationDomainID: null,
      resourceID: null,
      fee: null,
      tokenAddress: null
    ): EventFilter;

    FeeDistributed(
      tokenAddress: null,
      recipient: null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateFee(address,uint8,uint8,bytes32,bytes,bytes)"(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "collectFee(address,uint8,uint8,bytes32,bytes,bytes)"(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateFee(address,uint8,uint8,bytes32,bytes,bytes)"(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "collectFee(address,uint8,uint8,bytes32,bytes,bytes)"(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
