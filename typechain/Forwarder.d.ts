/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ForwarderInterface extends ethers.utils.Interface {
  functions: {
    "execute(tuple,bytes)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "verify(tuple,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "execute",
    values: [
      {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export class Forwarder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ForwarderInterface;

  functions: {
    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  execute(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "execute((address,address,uint256,uint256,uint256,bytes),bytes)"(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(address)"(
    from: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verify(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verify((address,address,uint256,uint256,uint256,bytes),bytes)"(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: string;
    }>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: string;
    }>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
