/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IFeeHandlerInterface extends utils.Interface {
  functions: {
    "_fee()": FunctionFragment;
    "calculateFee(address,uint8,uint8,bytes32,bytes,bytes)": FunctionFragment;
    "collectFee(address,uint8,uint8,bytes32,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "_fee" | "calculateFee" | "collectFee"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;

  events: {
    "FeeCollected(address,uint8,uint8,bytes32,uint256,address)": EventFragment;
    "FeeDistributed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDistributed"): EventFragment;
}

export interface FeeCollectedEventObject {
  sender: string;
  fromDomainID: number;
  destinationDomainID: number;
  resourceID: string;
  fee: BigNumber;
  tokenAddress: string;
}
export type FeeCollectedEvent = TypedEvent<
  [string, number, number, string, BigNumber, string],
  FeeCollectedEventObject
>;

export type FeeCollectedEventFilter = TypedEventFilter<FeeCollectedEvent>;

export interface FeeDistributedEventObject {
  tokenAddress: string;
  recipient: string;
  amount: BigNumber;
}
export type FeeDistributedEvent = TypedEvent<
  [string, string, BigNumber],
  FeeDistributedEventObject
>;

export type FeeDistributedEventFilter = TypedEventFilter<FeeDistributedEvent>;

export interface IFeeHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFeeHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  _fee(overrides?: CallOverrides): Promise<BigNumber>;

  calculateFee(
    sender: string,
    fromDomainID: BigNumberish,
    destinationDomainID: BigNumberish,
    resourceID: BytesLike,
    depositData: BytesLike,
    feeData: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>;

  collectFee(
    sender: string,
    fromDomainID: BigNumberish,
    destinationDomainID: BigNumberish,
    resourceID: BytesLike,
    depositData: BytesLike,
    feeData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeCollected(address,uint8,uint8,bytes32,uint256,address)"(
      sender?: null,
      fromDomainID?: null,
      destinationDomainID?: null,
      resourceID?: null,
      fee?: null,
      tokenAddress?: null
    ): FeeCollectedEventFilter;
    FeeCollected(
      sender?: null,
      fromDomainID?: null,
      destinationDomainID?: null,
      resourceID?: null,
      fee?: null,
      tokenAddress?: null
    ): FeeCollectedEventFilter;

    "FeeDistributed(address,address,uint256)"(
      tokenAddress?: null,
      recipient?: null,
      amount?: null
    ): FeeDistributedEventFilter;
    FeeDistributed(
      tokenAddress?: null,
      recipient?: null,
      amount?: null
    ): FeeDistributedEventFilter;
  };

  estimateGas: {
    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
