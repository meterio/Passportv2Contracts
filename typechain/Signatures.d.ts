/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SignaturesInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "RELAYER_ROLE()": FunctionFragment;
    "_TYPE_HASH()": FunctionFragment;
    "_relayerThreshold(uint8)": FunctionFragment;
    "adminChangeRelayerThreshold(uint8,uint256)": FunctionFragment;
    "adminPause()": FunctionFragment;
    "adminSetDestChainId(uint8,uint256,address)": FunctionFragment;
    "adminUnpause()": FunctionFragment;
    "checkSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)": FunctionFragment;
    "destChainId(uint8)": FunctionFragment;
    "destinationBridgeAddress(uint8)": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoleMemberIndex(bytes32,address)": FunctionFragment;
    "getSignatures(uint8,uint64,bytes32,bytes)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasVote(bytes)": FunctionFragment;
    "indexToProposal(uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "proposalIndex()": FunctionFragment;
    "proposals(bytes32)": FunctionFragment;
    "relayerVote(bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "signatures(bytes32,uint256)": FunctionFragment;
    "submitSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_relayerThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminChangeRelayerThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetDestChainId",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignature",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "destChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destinationBridgeAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberIndex",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignatures",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "hasVote", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "indexToProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerVote",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "signatures",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSignature",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAYER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_TYPE_HASH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_relayerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminChangeRelayerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adminPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminSetDestChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destinationBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "indexToProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signatures", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitSignature",
    data: BytesLike
  ): Result;

  events: {
    "Paused(address)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SignaturePass(uint8,uint8,uint64,bytes32,bytes,bytes)": EventFragment;
    "SubmitSignature(uint8,uint8,uint64,bytes32,bytes,bytes)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignaturePass"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class Signatures extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SignaturesInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "RELAYER_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    _TYPE_HASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "_TYPE_HASH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    _relayerThreshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "_relayerThreshold(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    adminChangeRelayerThreshold(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminChangeRelayerThreshold(uint8,uint256)"(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminPause(overrides?: Overrides): Promise<ContractTransaction>;

    "adminPause()"(overrides?: Overrides): Promise<ContractTransaction>;

    adminSetDestChainId(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetDestChainId(uint8,uint256,address)"(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminUnpause(overrides?: Overrides): Promise<ContractTransaction>;

    "adminUnpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    checkSignature(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "checkSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)"(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    destChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "destChainId(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    destinationBridgeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "destinationBridgeAddress(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getProposal(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        originDomainID: number;
        destinationDomainID: number;
        destinationBridge: string;
        depositNonce: BigNumber;
        resourceID: string;
        data: string;
        proposalIndex: BigNumber;
        0: number;
        1: number;
        2: string;
        3: BigNumber;
        4: string;
        5: string;
        6: BigNumber;
      };
    }>;

    "getProposal(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        originDomainID: number;
        destinationDomainID: number;
        destinationBridge: string;
        depositNonce: BigNumber;
        resourceID: string;
        data: string;
        proposalIndex: BigNumber;
        0: number;
        1: number;
        2: string;
        3: BigNumber;
        4: string;
        5: string;
        6: BigNumber;
      };
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRoleMemberIndex(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSignatures(uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getSignatures(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    hasVote(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasVote(bytes)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    indexToProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "indexToProposal(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    proposalIndex(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "proposalIndex()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      originDomainID: number;
      destinationDomainID: number;
      destinationBridge: string;
      depositNonce: BigNumber;
      resourceID: string;
      data: string;
      proposalIndex: BigNumber;
      0: number;
      1: number;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
      6: BigNumber;
    }>;

    "proposals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      originDomainID: number;
      destinationDomainID: number;
      destinationBridge: string;
      depositNonce: BigNumber;
      resourceID: string;
      data: string;
      proposalIndex: BigNumber;
      0: number;
      1: number;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
      6: BigNumber;
    }>;

    relayerVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "relayerVote(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    signatures(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "signatures(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    submitSignature(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)"(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

  "RELAYER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  _TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  "_TYPE_HASH()"(overrides?: CallOverrides): Promise<string>;

  _relayerThreshold(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "_relayerThreshold(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  adminChangeRelayerThreshold(
    destinationDomainID: BigNumberish,
    newThreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminChangeRelayerThreshold(uint8,uint256)"(
    destinationDomainID: BigNumberish,
    newThreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminPause(overrides?: Overrides): Promise<ContractTransaction>;

  "adminPause()"(overrides?: Overrides): Promise<ContractTransaction>;

  adminSetDestChainId(
    destinationDomainID: BigNumberish,
    chainId: BigNumberish,
    destinationBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetDestChainId(uint8,uint256,address)"(
    destinationDomainID: BigNumberish,
    chainId: BigNumberish,
    destinationBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminUnpause(overrides?: Overrides): Promise<ContractTransaction>;

  "adminUnpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  checkSignature(
    domainID: BigNumberish,
    destinationDomainID: BigNumberish,
    destinationBridge: string,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "checkSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)"(
    domainID: BigNumberish,
    destinationDomainID: BigNumberish,
    destinationBridge: string,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  destChainId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "destChainId(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  destinationBridgeAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "destinationBridgeAddress(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposal(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    originDomainID: number;
    destinationDomainID: number;
    destinationBridge: string;
    depositNonce: BigNumber;
    resourceID: string;
    data: string;
    proposalIndex: BigNumber;
    0: number;
    1: number;
    2: string;
    3: BigNumber;
    4: string;
    5: string;
    6: BigNumber;
  }>;

  "getProposal(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    originDomainID: number;
    destinationDomainID: number;
    destinationBridge: string;
    depositNonce: BigNumber;
    resourceID: string;
    data: string;
    proposalIndex: BigNumber;
    0: number;
    1: number;
    2: string;
    3: BigNumber;
    4: string;
    5: string;
    6: BigNumber;
  }>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleMemberIndex(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberIndex(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSignatures(uint8,uint64,bytes32,bytes)"(
    domainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getSignatures(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasVote(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "hasVote(bytes)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  indexToProposal(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "indexToProposal(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    originDomainID: number;
    destinationDomainID: number;
    destinationBridge: string;
    depositNonce: BigNumber;
    resourceID: string;
    data: string;
    proposalIndex: BigNumber;
    0: number;
    1: number;
    2: string;
    3: BigNumber;
    4: string;
    5: string;
    6: BigNumber;
  }>;

  "proposals(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    originDomainID: number;
    destinationDomainID: number;
    destinationBridge: string;
    depositNonce: BigNumber;
    resourceID: string;
    data: string;
    proposalIndex: BigNumber;
    0: number;
    1: number;
    2: string;
    3: BigNumber;
    4: string;
    5: string;
    6: BigNumber;
  }>;

  relayerVote(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "relayerVote(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  signatures(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "signatures(bytes32,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  submitSignature(
    originDomainID: BigNumberish,
    destinationDomainID: BigNumberish,
    destinationBridge: string,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)"(
    originDomainID: BigNumberish,
    destinationDomainID: BigNumberish,
    destinationBridge: string,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

    "RELAYER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    _TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    "_TYPE_HASH()"(overrides?: CallOverrides): Promise<string>;

    _relayerThreshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "_relayerThreshold(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    adminChangeRelayerThreshold(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminChangeRelayerThreshold(uint8,uint256)"(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminPause(overrides?: CallOverrides): Promise<void>;

    "adminPause()"(overrides?: CallOverrides): Promise<void>;

    adminSetDestChainId(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminSetDestChainId(uint8,uint256,address)"(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminUnpause(overrides?: CallOverrides): Promise<void>;

    "adminUnpause()"(overrides?: CallOverrides): Promise<void>;

    checkSignature(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "checkSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)"(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    destChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "destChainId(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destinationBridgeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "destinationBridgeAddress(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposal(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      originDomainID: number;
      destinationDomainID: number;
      destinationBridge: string;
      depositNonce: BigNumber;
      resourceID: string;
      data: string;
      proposalIndex: BigNumber;
      0: number;
      1: number;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
      6: BigNumber;
    }>;

    "getProposal(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      originDomainID: number;
      destinationDomainID: number;
      destinationBridge: string;
      depositNonce: BigNumber;
      resourceID: string;
      data: string;
      proposalIndex: BigNumber;
      0: number;
      1: number;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
      6: BigNumber;
    }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberIndex(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSignatures(uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getSignatures(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasVote(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "hasVote(bytes)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    indexToProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "indexToProposal(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      originDomainID: number;
      destinationDomainID: number;
      destinationBridge: string;
      depositNonce: BigNumber;
      resourceID: string;
      data: string;
      proposalIndex: BigNumber;
      0: number;
      1: number;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
      6: BigNumber;
    }>;

    "proposals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      originDomainID: number;
      destinationDomainID: number;
      destinationBridge: string;
      depositNonce: BigNumber;
      resourceID: string;
      data: string;
      proposalIndex: BigNumber;
      0: number;
      1: number;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
      6: BigNumber;
    }>;

    relayerVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "relayerVote(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signatures(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "signatures(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    submitSignature(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)"(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Paused(account: null): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    SignaturePass(
      originDomainID: BigNumberish | null,
      destinationDomainID: BigNumberish | null,
      depositNonce: null,
      resourceID: BytesLike | null,
      data: null,
      signature: null
    ): EventFilter;

    SubmitSignature(
      originDomainID: BigNumberish | null,
      destinationDomainID: BigNumberish | null,
      depositNonce: null,
      resourceID: BytesLike | null,
      data: null,
      signature: null
    ): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "RELAYER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    _TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    "_TYPE_HASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    _relayerThreshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_relayerThreshold(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adminChangeRelayerThreshold(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminChangeRelayerThreshold(uint8,uint256)"(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminPause(overrides?: Overrides): Promise<BigNumber>;

    "adminPause()"(overrides?: Overrides): Promise<BigNumber>;

    adminSetDestChainId(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetDestChainId(uint8,uint256,address)"(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminUnpause(overrides?: Overrides): Promise<BigNumber>;

    "adminUnpause()"(overrides?: Overrides): Promise<BigNumber>;

    checkSignature(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)"(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "destChainId(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destinationBridgeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "destinationBridgeAddress(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProposal(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberIndex(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSignatures(uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSignatures(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVote(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "hasVote(bytes)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexToProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "indexToProposal(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "proposals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relayerVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "relayerVote(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    signatures(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "signatures(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitSignature(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)"(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "RELAYER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_TYPE_HASH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _relayerThreshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_relayerThreshold(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminChangeRelayerThreshold(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminChangeRelayerThreshold(uint8,uint256)"(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminPause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "adminPause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    adminSetDestChainId(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetDestChainId(uint8,uint256,address)"(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminUnpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "adminUnpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    checkSignature(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)"(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    destChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "destChainId(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    destinationBridgeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "destinationBridgeAddress(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposal(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberIndex(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSignatures(uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSignatures(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVote(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasVote(bytes)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexToProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "indexToProposal(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalIndex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "relayerVote(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    signatures(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "signatures(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitSignature(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitSignature(uint8,uint8,address,uint64,bytes32,bytes,bytes)"(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      destinationBridge: string,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
