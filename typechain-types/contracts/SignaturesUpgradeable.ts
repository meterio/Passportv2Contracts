/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace SignaturesUpgradeable {
  export type ProposalStruct = {
    originDomainID: BigNumberish;
    destinationDomainID: BigNumberish;
    destinationBridge: string;
    depositNonce: BigNumberish;
    resourceID: BytesLike;
    data: BytesLike;
    proposalIndex: BigNumberish;
  };

  export type ProposalStructOutput = [
    number,
    number,
    string,
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    originDomainID: number;
    destinationDomainID: number;
    destinationBridge: string;
    depositNonce: BigNumber;
    resourceID: string;
    data: string;
    proposalIndex: BigNumber;
  };
}

export interface SignaturesUpgradeableInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "RELAYER_ROLE()": FunctionFragment;
    "_TYPE_HASH()": FunctionFragment;
    "_relayerThreshold(uint8)": FunctionFragment;
    "adminChangeRelayerThreshold(uint8,uint256)": FunctionFragment;
    "adminPause()": FunctionFragment;
    "adminSetDestChainId(uint8,uint256,address)": FunctionFragment;
    "adminUnpause()": FunctionFragment;
    "checkSignature(uint8,uint8,uint64,bytes32,bytes,bytes)": FunctionFragment;
    "destChainId(uint8)": FunctionFragment;
    "destinationBridgeAddress(uint8)": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoleMemberIndex(bytes32,address)": FunctionFragment;
    "getSignatures(uint8,uint8,uint64,bytes32,bytes)": FunctionFragment;
    "getSignatures(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasVote(bytes)": FunctionFragment;
    "indexToProposal(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "proposalIndex()": FunctionFragment;
    "proposals(bytes32)": FunctionFragment;
    "relayerVote(bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "signatures(bytes32,uint256)": FunctionFragment;
    "submitSignature(uint8,uint8,uint64,bytes32,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "PERMIT_TYPEHASH"
      | "RELAYER_ROLE"
      | "_TYPE_HASH"
      | "_relayerThreshold"
      | "adminChangeRelayerThreshold"
      | "adminPause"
      | "adminSetDestChainId"
      | "adminUnpause"
      | "checkSignature"
      | "destChainId"
      | "destinationBridgeAddress"
      | "getProposal"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoleMemberIndex"
      | "getSignatures(uint8,uint8,uint64,bytes32,bytes)"
      | "getSignatures(uint256)"
      | "grantRole"
      | "hasRole"
      | "hasVote"
      | "indexToProposal"
      | "initialize"
      | "paused"
      | "proposalIndex"
      | "proposals"
      | "relayerVote"
      | "renounceRole"
      | "revokeRole"
      | "signatures"
      | "submitSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_relayerThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminChangeRelayerThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetDestChainId",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignature",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "destChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destinationBridgeAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberIndex",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignatures(uint8,uint8,uint64,bytes32,bytes)",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignatures(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "hasVote", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "indexToProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerVote",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "signatures",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSignature",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAYER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_TYPE_HASH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_relayerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminChangeRelayerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adminPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminSetDestChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destinationBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignatures(uint8,uint8,uint64,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignatures(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "indexToProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signatures", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitSignature",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SignaturePass(uint8,uint8,uint64,bytes32,bytes,bytes)": EventFragment;
    "SubmitSignature(uint8,uint8,uint64,bytes32,bytes,bytes)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignaturePass"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SignaturePassEventObject {
  originDomainID: number;
  destinationDomainID: number;
  depositNonce: BigNumber;
  resourceID: string;
  data: string;
  signature: string;
}
export type SignaturePassEvent = TypedEvent<
  [number, number, BigNumber, string, string, string],
  SignaturePassEventObject
>;

export type SignaturePassEventFilter = TypedEventFilter<SignaturePassEvent>;

export interface SubmitSignatureEventObject {
  originDomainID: number;
  destinationDomainID: number;
  depositNonce: BigNumber;
  resourceID: string;
  data: string;
  signature: string;
}
export type SubmitSignatureEvent = TypedEvent<
  [number, number, BigNumber, string, string, string],
  SubmitSignatureEventObject
>;

export type SubmitSignatureEventFilter = TypedEventFilter<SubmitSignatureEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface SignaturesUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignaturesUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    _relayerThreshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    adminChangeRelayerThreshold(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminPause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminSetDestChainId(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminUnpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkSignature(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    destChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    destinationBridgeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProposal(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[SignaturesUpgradeable.ProposalStructOutput]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getSignatures(uint8,uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getSignatures(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasVote(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    indexToProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proposalIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, BigNumber, string, string, BigNumber] & {
        originDomainID: number;
        destinationDomainID: number;
        destinationBridge: string;
        depositNonce: BigNumber;
        resourceID: string;
        data: string;
        proposalIndex: BigNumber;
      }
    >;

    relayerVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    signatures(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    submitSignature(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

  _TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  _relayerThreshold(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  adminChangeRelayerThreshold(
    destinationDomainID: BigNumberish,
    newThreshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminPause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminSetDestChainId(
    destinationDomainID: BigNumberish,
    chainId: BigNumberish,
    destinationBridge: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminUnpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkSignature(
    domainID: BigNumberish,
    destinationDomainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  destChainId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  destinationBridgeAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposal(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<SignaturesUpgradeable.ProposalStructOutput>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleMemberIndex(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSignatures(uint8,uint8,uint64,bytes32,bytes)"(
    domainID: BigNumberish,
    destinationDomainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getSignatures(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasVote(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  indexToProposal(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    admin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, BigNumber, string, string, BigNumber] & {
      originDomainID: number;
      destinationDomainID: number;
      destinationBridge: string;
      depositNonce: BigNumber;
      resourceID: string;
      data: string;
      proposalIndex: BigNumber;
    }
  >;

  relayerVote(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  signatures(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  submitSignature(
    originDomainID: BigNumberish,
    destinationDomainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: BytesLike,
    data: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

    _TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    _relayerThreshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    adminChangeRelayerThreshold(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminPause(overrides?: CallOverrides): Promise<void>;

    adminSetDestChainId(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminUnpause(overrides?: CallOverrides): Promise<void>;

    checkSignature(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    destChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destinationBridgeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposal(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<SignaturesUpgradeable.ProposalStructOutput>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSignatures(uint8,uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getSignatures(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasVote(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    indexToProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(admin: string, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, BigNumber, string, string, BigNumber] & {
        originDomainID: number;
        destinationDomainID: number;
        destinationBridge: string;
        depositNonce: BigNumber;
        resourceID: string;
        data: string;
        proposalIndex: BigNumber;
      }
    >;

    relayerVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signatures(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    submitSignature(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "SignaturePass(uint8,uint8,uint64,bytes32,bytes,bytes)"(
      originDomainID?: BigNumberish | null,
      destinationDomainID?: BigNumberish | null,
      depositNonce?: null,
      resourceID?: BytesLike | null,
      data?: null,
      signature?: null
    ): SignaturePassEventFilter;
    SignaturePass(
      originDomainID?: BigNumberish | null,
      destinationDomainID?: BigNumberish | null,
      depositNonce?: null,
      resourceID?: BytesLike | null,
      data?: null,
      signature?: null
    ): SignaturePassEventFilter;

    "SubmitSignature(uint8,uint8,uint64,bytes32,bytes,bytes)"(
      originDomainID?: BigNumberish | null,
      destinationDomainID?: BigNumberish | null,
      depositNonce?: null,
      resourceID?: BytesLike | null,
      data?: null,
      signature?: null
    ): SubmitSignatureEventFilter;
    SubmitSignature(
      originDomainID?: BigNumberish | null,
      destinationDomainID?: BigNumberish | null,
      depositNonce?: null,
      resourceID?: BytesLike | null,
      data?: null,
      signature?: null
    ): SubmitSignatureEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    _relayerThreshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adminChangeRelayerThreshold(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminPause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    adminSetDestChainId(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminUnpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    checkSignature(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destinationBridgeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSignatures(uint8,uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSignatures(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVote(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    indexToProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    relayerVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    signatures(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitSignature(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _relayerThreshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminChangeRelayerThreshold(
      destinationDomainID: BigNumberish,
      newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminPause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminSetDestChainId(
      destinationDomainID: BigNumberish,
      chainId: BigNumberish,
      destinationBridge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminUnpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkSignature(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    destChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    destinationBridgeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSignatures(uint8,uint8,uint64,bytes32,bytes)"(
      domainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSignatures(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVote(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexToProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    signatures(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitSignature(
      originDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: BytesLike,
      data: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
