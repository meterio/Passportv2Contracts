/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  WithDepositor,
  WithDepositorInterface,
} from "../../../contracts/TestContracts.sol/WithDepositor";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "argumentOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "argumentTwo",
        type: "uint256",
      },
    ],
    name: "WithDepositorCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "argumentOne",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "argumentTwo",
        type: "uint256",
      },
    ],
    name: "withDepositor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f08061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063244c2d9f14602d575b600080fd5b603c60383660046084565b603e565b005b604080516001600160a01b0384168152602081018390527fe671660ec73e1a876b538ddb8bddcb62ce9791b3ff847a6121973424e99e4d29910160405180910390a15050565b60008060408385031215609657600080fd5b82356001600160a01b038116811460ac57600080fd5b94602093909301359350505056fea264697066735822122098df3b500c85704b1008003f4e11faabb1b63bb64163937bed80a881eda2be4364736f6c634300080b0033";

type WithDepositorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WithDepositorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WithDepositor__factory extends ContractFactory {
  constructor(...args: WithDepositorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<WithDepositor> {
    return super.deploy(overrides || {}) as Promise<WithDepositor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WithDepositor {
    return super.attach(address) as WithDepositor;
  }
  override connect(signer: Signer): WithDepositor__factory {
    return super.connect(signer) as WithDepositor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WithDepositorInterface {
    return new utils.Interface(_abi) as WithDepositorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WithDepositor {
    return new Contract(address, _abi, signerOrProvider) as WithDepositor;
  }
}
