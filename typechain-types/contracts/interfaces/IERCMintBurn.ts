/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IERCMintBurnInterface extends utils.Interface {
  functions: {
    "burn(uint256)": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "burnBatch(address,uint256[],uint256[])": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mint(address,uint256,uint256,bytes)": FunctionFragment;
    "mint(address,uint256,string)": FunctionFragment;
    "mintBatch(address,uint256[],uint256[],bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burn(uint256)"
      | "burn(address,uint256,uint256)"
      | "burnBatch"
      | "burnFrom"
      | "mint(address,uint256)"
      | "mint(address,uint256,uint256,bytes)"
      | "mint(address,uint256,string)"
      | "mintBatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burn(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(address,uint256,uint256)",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint256,uint256,bytes)",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint256,string)",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "burn(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burn(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;

  events: {};
}

export interface IERCMintBurn extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERCMintBurnInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "burn(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "burn(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    burnBatch(
      arg0: string,
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    burnFrom(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "mint(address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "mint(address,uint256,string)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintBatch(
      arg0: string,
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  "burn(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "burn(address,uint256,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  burnBatch(
    arg0: string,
    arg1: BigNumberish[],
    arg2: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  burnFrom(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "mint(address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "mint(address,uint256,string)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintBatch(
    arg0: string,
    arg1: BigNumberish[],
    arg2: BigNumberish[],
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    "burn(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnBatch(
      arg0: string,
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    burnFrom(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256,string)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      arg0: string,
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "burn(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "burn(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    burnBatch(
      arg0: string,
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    burnFrom(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "mint(address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "mint(address,uint256,string)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintBatch(
      arg0: string,
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "burn(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    burnBatch(
      arg0: string,
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256,string)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      arg0: string,
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
