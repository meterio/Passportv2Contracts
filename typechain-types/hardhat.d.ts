/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "ERC1155HolderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155HolderUpgradeable__factory>;
    getContractFactory(
      name: "ERC1155ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PausableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "ERC721Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Pausable__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: "BridgeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeUpgradeable__factory>;
    getContractFactory(
      name: "CentrifugeAsset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CentrifugeAsset__factory>;
    getContractFactory(
      name: "ERC20MintablePauseableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20MintablePauseableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20MinterBurnerPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20MinterBurnerPauser__factory>;
    getContractFactory(
      name: "ERC20Safe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Safe__factory>;
    getContractFactory(
      name: "ERC721MinterBurnerPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721MinterBurnerPauser__factory>;
    getContractFactory(
      name: "Forwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Forwarder__factory>;
    getContractFactory(
      name: "ERC1155Handler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Handler__factory>;
    getContractFactory(
      name: "ERC1155HandlerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155HandlerUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Handler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Handler__factory>;
    getContractFactory(
      name: "ERC20HandlerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20HandlerUpgradeable__factory>;
    getContractFactory(
      name: "ERC721Handler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Handler__factory>;
    getContractFactory(
      name: "ERC721HandlerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721HandlerUpgradeable__factory>;
    getContractFactory(
      name: "BasicFeeHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicFeeHandler__factory>;
    getContractFactory(
      name: "FeeHandlerWithOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeHandlerWithOracle__factory>;
    getContractFactory(
      name: "GenericHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenericHandler__factory>;
    getContractFactory(
      name: "GenericHandlerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenericHandlerUpgradeable__factory>;
    getContractFactory(
      name: "HandlerHelpers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HandlerHelpers__factory>;
    getContractFactory(
      name: "HandlerHelpersUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HandlerHelpersUpgradeable__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IDepositExecute",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDepositExecute__factory>;
    getContractFactory(
      name: "IERCHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERCHandler__factory>;
    getContractFactory(
      name: "IERCMintBurn",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERCMintBurn__factory>;
    getContractFactory(
      name: "IFeeHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeHandler__factory>;
    getContractFactory(
      name: "IGenericHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGenericHandler__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "Signatures",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Signatures__factory>;
    getContractFactory(
      name: "SignaturesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignaturesUpgradeable__factory>;
    getContractFactory(
      name: "HandlerRevert",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HandlerRevert__factory>;
    getContractFactory(
      name: "NoArgument",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoArgument__factory>;
    getContractFactory(
      name: "OneArgument",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OneArgument__factory>;
    getContractFactory(
      name: "ReturnData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReturnData__factory>;
    getContractFactory(
      name: "SafeCaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCaster__factory>;
    getContractFactory(
      name: "TestForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestForwarder__factory>;
    getContractFactory(
      name: "TestTarget",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTarget__factory>;
    getContractFactory(
      name: "ThreeArguments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThreeArguments__factory>;
    getContractFactory(
      name: "TwoArguments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TwoArguments__factory>;
    getContractFactory(
      name: "WithDepositor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithDepositor__factory>;
    getContractFactory(
      name: "TokenERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenERC20__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;

    getContractAt(
      name: "AccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "IERC1155ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155ReceiverUpgradeable>;
    getContractAt(
      name: "ERC1155HolderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155HolderUpgradeable>;
    getContractAt(
      name: "ERC1155ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155ReceiverUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: "ERC20PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PausableUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "ERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "ERC721Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Pausable>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bridge>;
    getContractAt(
      name: "BridgeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeUpgradeable>;
    getContractAt(
      name: "CentrifugeAsset",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CentrifugeAsset>;
    getContractAt(
      name: "ERC20MintablePauseableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20MintablePauseableUpgradeable>;
    getContractAt(
      name: "ERC20MinterBurnerPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20MinterBurnerPauser>;
    getContractAt(
      name: "ERC20Safe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Safe>;
    getContractAt(
      name: "ERC721MinterBurnerPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721MinterBurnerPauser>;
    getContractAt(
      name: "Forwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Forwarder>;
    getContractAt(
      name: "ERC1155Handler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Handler>;
    getContractAt(
      name: "ERC1155HandlerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155HandlerUpgradeable>;
    getContractAt(
      name: "ERC20Handler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Handler>;
    getContractAt(
      name: "ERC20HandlerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20HandlerUpgradeable>;
    getContractAt(
      name: "ERC721Handler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Handler>;
    getContractAt(
      name: "ERC721HandlerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721HandlerUpgradeable>;
    getContractAt(
      name: "BasicFeeHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicFeeHandler>;
    getContractAt(
      name: "FeeHandlerWithOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeHandlerWithOracle>;
    getContractAt(
      name: "GenericHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GenericHandler>;
    getContractAt(
      name: "GenericHandlerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GenericHandlerUpgradeable>;
    getContractAt(
      name: "HandlerHelpers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HandlerHelpers>;
    getContractAt(
      name: "HandlerHelpersUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HandlerHelpersUpgradeable>;
    getContractAt(
      name: "IBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IDepositExecute",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDepositExecute>;
    getContractAt(
      name: "IERCHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERCHandler>;
    getContractAt(
      name: "IERCMintBurn",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERCMintBurn>;
    getContractAt(
      name: "IFeeHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeHandler>;
    getContractAt(
      name: "IGenericHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGenericHandler>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "Signatures",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Signatures>;
    getContractAt(
      name: "SignaturesUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignaturesUpgradeable>;
    getContractAt(
      name: "HandlerRevert",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HandlerRevert>;
    getContractAt(
      name: "NoArgument",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NoArgument>;
    getContractAt(
      name: "OneArgument",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OneArgument>;
    getContractAt(
      name: "ReturnData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReturnData>;
    getContractAt(
      name: "SafeCaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCaster>;
    getContractAt(
      name: "TestForwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestForwarder>;
    getContractAt(
      name: "TestTarget",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTarget>;
    getContractAt(
      name: "ThreeArguments",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ThreeArguments>;
    getContractAt(
      name: "TwoArguments",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TwoArguments>;
    getContractAt(
      name: "WithDepositor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithDepositor>;
    getContractAt(
      name: "TokenERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenERC20>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
