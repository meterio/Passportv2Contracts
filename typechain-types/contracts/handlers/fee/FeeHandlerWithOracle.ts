/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface FeeHandlerWithOracleInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ETHReserve()": FunctionFragment;
    "_bridgeAddress()": FunctionFragment;
    "_fee()": FunctionFragment;
    "_feePercent()": FunctionFragment;
    "_gasUsed()": FunctionFragment;
    "_oracleAddress()": FunctionFragment;
    "calculateFee(address,uint8,uint8,bytes32,bytes,bytes)": FunctionFragment;
    "collectFee(address,uint8,uint8,bytes32,bytes,bytes)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoleMemberIndex(bytes32,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "renounceAdmin(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setFeeOracle(address)": FunctionFragment;
    "setFeeProperties(uint32,uint16)": FunctionFragment;
    "transferFee(bytes32,address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "ETHReserve"
      | "_bridgeAddress"
      | "_fee"
      | "_feePercent"
      | "_gasUsed"
      | "_oracleAddress"
      | "calculateFee"
      | "collectFee"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoleMemberIndex"
      | "grantRole"
      | "hasRole"
      | "renounceAdmin"
      | "renounceRole"
      | "revokeRole"
      | "setFeeOracle"
      | "setFeeProperties"
      | "transferFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETHReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_bridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_gasUsed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_oracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberIndex",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeProperties",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFee",
    values: [BytesLike, string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ETHReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_bridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_feePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_gasUsed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_oracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFee",
    data: BytesLike
  ): Result;

  events: {
    "FeeCollected(address,uint8,uint8,bytes32,uint256,address)": EventFragment;
    "FeeDistributed(address,address,uint256)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface FeeCollectedEventObject {
  sender: string;
  fromDomainID: number;
  destinationDomainID: number;
  resourceID: string;
  fee: BigNumber;
  tokenAddress: string;
}
export type FeeCollectedEvent = TypedEvent<
  [string, number, number, string, BigNumber, string],
  FeeCollectedEventObject
>;

export type FeeCollectedEventFilter = TypedEventFilter<FeeCollectedEvent>;

export interface FeeDistributedEventObject {
  tokenAddress: string;
  recipient: string;
  amount: BigNumber;
}
export type FeeDistributedEvent = TypedEvent<
  [string, string, BigNumber],
  FeeDistributedEventObject
>;

export type FeeDistributedEventFilter = TypedEventFilter<FeeDistributedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface FeeHandlerWithOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeHandlerWithOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ETHReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    _bridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    _fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _feePercent(overrides?: CallOverrides): Promise<[number]>;

    _gasUsed(overrides?: CallOverrides): Promise<[number]>;

    _oracleAddress(overrides?: CallOverrides): Promise<[string]>;

    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { fee: BigNumber; tokenAddress: string }>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeOracle(
      oracleAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeProperties(
      gasUsed: BigNumberish,
      feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFee(
      resourceID: BytesLike,
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ETHReserve(overrides?: CallOverrides): Promise<BigNumber>;

  _bridgeAddress(overrides?: CallOverrides): Promise<string>;

  _fee(overrides?: CallOverrides): Promise<BigNumber>;

  _feePercent(overrides?: CallOverrides): Promise<number>;

  _gasUsed(overrides?: CallOverrides): Promise<number>;

  _oracleAddress(overrides?: CallOverrides): Promise<string>;

  calculateFee(
    sender: string,
    fromDomainID: BigNumberish,
    destinationDomainID: BigNumberish,
    resourceID: BytesLike,
    depositData: BytesLike,
    feeData: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { fee: BigNumber; tokenAddress: string }>;

  collectFee(
    sender: string,
    fromDomainID: BigNumberish,
    destinationDomainID: BigNumberish,
    resourceID: BytesLike,
    depositData: BytesLike,
    feeData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleMemberIndex(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeOracle(
    oracleAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeProperties(
    gasUsed: BigNumberish,
    feePercent: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFee(
    resourceID: BytesLike,
    addrs: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ETHReserve(overrides?: CallOverrides): Promise<BigNumber>;

    _bridgeAddress(overrides?: CallOverrides): Promise<string>;

    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    _feePercent(overrides?: CallOverrides): Promise<number>;

    _gasUsed(overrides?: CallOverrides): Promise<number>;

    _oracleAddress(overrides?: CallOverrides): Promise<string>;

    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { fee: BigNumber; tokenAddress: string }>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeOracle(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeProperties(
      gasUsed: BigNumberish,
      feePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFee(
      resourceID: BytesLike,
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeCollected(address,uint8,uint8,bytes32,uint256,address)"(
      sender?: null,
      fromDomainID?: null,
      destinationDomainID?: null,
      resourceID?: null,
      fee?: null,
      tokenAddress?: null
    ): FeeCollectedEventFilter;
    FeeCollected(
      sender?: null,
      fromDomainID?: null,
      destinationDomainID?: null,
      resourceID?: null,
      fee?: null,
      tokenAddress?: null
    ): FeeCollectedEventFilter;

    "FeeDistributed(address,address,uint256)"(
      tokenAddress?: null,
      recipient?: null,
      amount?: null
    ): FeeDistributedEventFilter;
    FeeDistributed(
      tokenAddress?: null,
      recipient?: null,
      amount?: null
    ): FeeDistributedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ETHReserve(overrides?: CallOverrides): Promise<BigNumber>;

    _bridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    _feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    _gasUsed(overrides?: CallOverrides): Promise<BigNumber>;

    _oracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeOracle(
      oracleAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeProperties(
      gasUsed: BigNumberish,
      feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFee(
      resourceID: BytesLike,
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ETHReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _bridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _gasUsed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _oracleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectFee(
      sender: string,
      fromDomainID: BigNumberish,
      destinationDomainID: BigNumberish,
      resourceID: BytesLike,
      depositData: BytesLike,
      feeData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeOracle(
      oracleAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeProperties(
      gasUsed: BigNumberish,
      feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFee(
      resourceID: BytesLike,
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
