/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ThreeArguments } from "../ThreeArguments";

export class ThreeArguments__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ThreeArguments> {
    return super.deploy(overrides || {}) as Promise<ThreeArguments>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ThreeArguments {
    return super.attach(address) as ThreeArguments;
  }
  connect(signer: Signer): ThreeArguments__factory {
    return super.connect(signer) as ThreeArguments__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ThreeArguments {
    return new Contract(address, _abi, signerOrProvider) as ThreeArguments;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "argumentOne",
        type: "string",
      },
      {
        indexed: false,
        internalType: "int8",
        name: "argumentTwo",
        type: "int8",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "argumentThree",
        type: "bool",
      },
    ],
    name: "ThreeArgumentsCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "argumentOne",
        type: "string",
      },
      {
        internalType: "int8",
        name: "argumentTwo",
        type: "int8",
      },
      {
        internalType: "bool",
        name: "argumentThree",
        type: "bool",
      },
    ],
    name: "threeArguments",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061019d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639280b90514610030575b600080fd5b61004361003e366004610088565b610045565b005b7fd589183661fa75f94e2db32f4eb7ebb50f4154c160e15eb43f772a46f360a3a88484848460405161007a9493929190610128565b60405180910390a150505050565b6000806000806060858703121561009e57600080fd5b843567ffffffffffffffff808211156100b657600080fd5b818701915087601f8301126100ca57600080fd5b8135818111156100d957600080fd5b8860208285010111156100eb57600080fd5b60209283019650945050850135600081900b811461010857600080fd5b91506040850135801515811461011d57600080fd5b939692955090935050565b606081528360608201528385608083013760006080858301810182905293900b60208201529015156040820152601f909201601f19169091010191905056fea2646970667358221220f8c78a883c733e3a55afecf344e271512ffa2c685d27d44882666f88465e171d64736f6c634300080b0033";
