{
  "language": "Solidity",
  "sources": {
    "contracts/Bridge.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"./utils/AccessControl.sol\";\nimport \"./utils/Pausable.sol\";\nimport \"./utils/SafeMath.sol\";\nimport \"./utils/SafeCast.sol\";\nimport \"./interfaces/IDepositExecute.sol\";\nimport \"./interfaces/IERCHandler.sol\";\nimport \"./interfaces/IGenericHandler.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./interfaces/IBridge.sol\";\nimport \"./interfaces/IFeeHandler.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\n\n/**\n    @title Facilitates deposits, creation and voting of deposit proposals, and deposit executions.\n    @author ChainSafe Systems.\n */\ncontract Bridge is EIP712, Pausable, AccessControl, SafeMath, IBridge {\n    using SafeCast for *;\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\n            \"PermitBridge(uint8 domainID,uint64 depositNonce,bytes32 resourceID,bytes data)\"\n        );\n\n    // Limit relayers number because proposal can fit only so much votes\n    uint256 public constant MAX_RELAYERS = 200;\n\n    uint8 public _domainID;\n    uint8 public _relayerThreshold;\n    uint40 public _expiry;\n\n    IFeeHandler public _feeHandler; // scrap\n\n    // destinationDomainID => number of deposits\n    mapping(uint8 => uint64) public _depositCounts;\n    // resourceID => handler address\n    mapping(bytes32 => address) public _resourceIDToHandlerAddress;\n    // forwarder address => is Valid\n    mapping(address => bool) public isValidForwarder;\n    // destinationDomainID + depositNonce => dataHash => Proposal\n    mapping(uint72 => mapping(bytes32 => Proposal)) private _proposals;\n\n    // fees\n    uint256 public _fee_;\n    uint256 public _feeReserve;\n    mapping(uint8 => uint256) public specialFee;\n    mapping(uint8 => bool) public special;\n\n    event RelayerThresholdChanged(uint256 newThreshold);\n    event RelayerAdded(address relayer);\n    event RelayerRemoved(address relayer);\n    event FeeHandlerChanged(address newFeeHandler);\n    event Deposit(\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        uint64 depositNonce,\n        address indexed user,\n        bytes data,\n        bytes handlerResponse\n    );\n    event ProposalEvent(\n        uint8 originDomainID,\n        uint64 depositNonce,\n        ProposalStatus status,\n        bytes32 dataHash\n    );\n    event ProposalVote(\n        uint8 originDomainID,\n        uint64 depositNonce,\n        ProposalStatus status,\n        bytes32 dataHash\n    );\n    event FailedHandlerExecution(bytes lowLevelData);\n\n    bytes32 public constant RELAYER_ROLE = keccak256(\"RELAYER_ROLE\");\n\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n    uint256 private _status;\n\n    modifier onlyAdmin() {\n        _onlyAdmin();\n        _;\n    }\n\n    modifier onlyAdminOrRelayer() {\n        _onlyAdminOrRelayer();\n        _;\n    }\n\n    modifier onlyRelayers() {\n        _onlyRelayers();\n        _;\n    }\n\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n        _;\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    function _fee() external view returns (uint256) {\n        return _fee_;\n    }\n\n    function _chainId() external view returns (uint256) {\n        return block.chainid;\n    }\n\n    function _onlyAdminOrRelayer() private view {\n        address sender = _msgSender();\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, sender) ||\n                hasRole(RELAYER_ROLE, sender),\n            \"sender is not relayer or admin\"\n        );\n    }\n\n    function _onlyAdmin() private view {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\n            \"sender doesn't have admin role\"\n        );\n    }\n\n    function _onlyRelayers() private view {\n        require(\n            hasRole(RELAYER_ROLE, _msgSender()),\n            \"sender doesn't have relayer role\"\n        );\n    }\n\n    function _relayerBit(address relayer) private view returns (uint256) {\n        return\n            uint256(1) <<\n            sub(AccessControl.getRoleMemberIndex(RELAYER_ROLE, relayer), 1);\n    }\n\n    function _hasVoted(Proposal memory proposal, address relayer)\n        private\n        view\n        returns (bool)\n    {\n        return (_relayerBit(relayer) & uint256(proposal._yesVotes)) > 0;\n    }\n\n    function _msgSender() internal view override returns (address) {\n        address signer = msg.sender;\n        if (msg.data.length >= 20 && isValidForwarder[signer]) {\n            assembly {\n                signer := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        }\n        return signer;\n    }\n\n    /**\n        @notice Initializes Bridge, creates and grants {_msgSender()} the admin role,\n        creates and grants {initialRelayers} the relayer role.\n        @param domainID ID of chain the Bridge contract exists on.\n        @param initialRelayers Addresses that should be initially granted the relayer role.\n        @param initialRelayerThreshold Number of votes needed for a deposit proposal to be considered passed.\n     */\n    constructor(\n        uint8 domainID,\n        address[] memory initialRelayers,\n        uint256 initialRelayerThreshold,\n        uint256 expiry\n    ) EIP712(\"PermitBridge\", \"1.0\") {\n        _domainID = domainID;\n        _relayerThreshold = initialRelayerThreshold.toUint8();\n        _expiry = expiry.toUint40();\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        for (uint256 i; i < initialRelayers.length; i++) {\n            grantRole(RELAYER_ROLE, initialRelayers[i]);\n        }\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n        @notice Returns true if {relayer} has voted on {destNonce} {dataHash} proposal.\n        @notice Naming left unchanged for backward compatibility.\n        @param destNonce destinationDomainID + depositNonce of the proposal.\n        @param dataHash Hash of data to be provided when deposit proposal is executed.\n        @param relayer Address to check.\n     */\n    function _hasVotedOnProposal(\n        uint72 destNonce,\n        bytes32 dataHash,\n        address relayer\n    ) public view returns (bool) {\n        return _hasVoted(_proposals[destNonce][dataHash], relayer);\n    }\n\n    /**\n        @notice Returns true if {relayer} has the relayer role.\n        @param relayer Address to check.\n     */\n    function isRelayer(address relayer) external view returns (bool) {\n        return hasRole(RELAYER_ROLE, relayer);\n    }\n\n    /**\n        @notice Removes admin role from {_msgSender()} and grants it to {newAdmin}.\n        @notice Only callable by an address that currently has the admin role.\n        @param newAdmin Address that admin role will be granted to.\n     */\n    function renounceAdmin(address newAdmin) external onlyAdmin {\n        address sender = _msgSender();\n        require(sender != newAdmin, \"Cannot renounce oneself\");\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        renounceRole(DEFAULT_ADMIN_ROLE, sender);\n    }\n\n    /**\n        @notice Pauses deposits, proposal creation and voting, and deposit executions.\n        @notice Only callable by an address that currently has the admin role.\n     */\n    function adminPauseTransfers() external onlyAdmin {\n        _pause(_msgSender());\n    }\n\n    /**\n        @notice Unpauses deposits, proposal creation and voting, and deposit executions.\n        @notice Only callable by an address that currently has the admin role.\n     */\n    function adminUnpauseTransfers() external onlyAdmin {\n        _unpause(_msgSender());\n    }\n\n    /**\n        @notice Modifies the number of votes required for a proposal to be considered passed.\n        @notice Only callable by an address that currently has the admin role.\n        @param newThreshold Value {_relayerThreshold} will be changed to.\n        @notice Emits {RelayerThresholdChanged} event.\n     */\n    function adminChangeRelayerThreshold(uint256 newThreshold)\n        external\n        onlyAdmin\n    {\n        _relayerThreshold = newThreshold.toUint8();\n        emit RelayerThresholdChanged(newThreshold);\n    }\n\n    /**\n        @notice Grants {relayerAddress} the relayer role.\n        @notice Only callable by an address that currently has the admin role, which is\n                checked in grantRole().\n        @param relayerAddress Address of relayer to be added.\n        @notice Emits {RelayerAdded} event.\n     */\n    function adminAddRelayer(address relayerAddress) external onlyAdmin {\n        require(_totalRelayers() < MAX_RELAYERS, \"relayers limit reached\");\n        grantRole(RELAYER_ROLE, relayerAddress);\n        emit RelayerAdded(relayerAddress);\n    }\n\n    /**\n        @notice Removes relayer role for {relayerAddress}.\n        @notice Only callable by an address that currently has the admin role, which is\n                checked in revokeRole().\n        @param relayerAddress Address of relayer to be removed.\n        @notice Emits {RelayerRemoved} event.\n     */\n    function adminRemoveRelayer(address relayerAddress)\n        external\n        onlyAdmin\n        whenPaused\n    {\n        revokeRole(RELAYER_ROLE, relayerAddress);\n        emit RelayerRemoved(relayerAddress);\n    }\n\n    function renounceRole(bytes32 role, address account)\n        public\n        override\n        whenPaused\n    {\n        super.renounceRole(role, account);\n    }\n\n    /**\n        @notice Sets a new resource for handler contracts that use the IERCHandler interface,\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\n        @notice Only callable by an address that currently has the admin role.\n        @param handlerAddress Address of handler resource will be set for.\n        @param resourceID ResourceID to be used when making deposits.\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\n     */\n    function adminSetResource(\n        address handlerAddress,\n        bytes32 resourceID,\n        address tokenAddress,\n        bool isNative\n    ) external onlyAdmin {\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.setResource(resourceID, tokenAddress);\n        if (isNative) {\n            handler.setNative(tokenAddress, true);\n        }\n    }\n\n    /**\n        @notice Sets a new resource for handler contracts that use the IGenericHandler interface,\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\n        @notice Only callable by an address that currently has the admin role.\n        @param handlerAddress Address of handler resource will be set for.\n        @param resourceID ResourceID to be used when making deposits.\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\n        @param depositFunctionDepositorOffset Depositor address position offset in the metadata, in bytes.\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\n     */\n    function adminSetGenericResource(\n        address handlerAddress,\n        bytes32 resourceID,\n        address contractAddress,\n        bytes4 depositFunctionSig,\n        uint256 depositFunctionDepositorOffset,\n        bytes4 executeFunctionSig\n    ) external onlyAdmin {\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\n        IGenericHandler handler = IGenericHandler(handlerAddress);\n        handler.setResource(\n            resourceID,\n            contractAddress,\n            depositFunctionSig,\n            depositFunctionDepositorOffset,\n            executeFunctionSig\n        );\n    }\n\n    function adminRemoveResourceId(\n        bytes32 resourceID,\n        address tokenAddress,\n        bool isNative\n    ) external onlyAdmin {\n        address handlerAddress = _resourceIDToHandlerAddress[resourceID];\n        delete _resourceIDToHandlerAddress[resourceID];\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.removeResource(resourceID, tokenAddress);\n        if (isNative) {\n            handler.setNative(tokenAddress, false);\n        }\n    }\n\n    function adminRemoveGenericResource(\n        bytes32 resourceID,\n        address contractAddress\n    ) external onlyAdmin {\n        address handlerAddress = _resourceIDToHandlerAddress[resourceID];\n        delete _resourceIDToHandlerAddress[resourceID];\n        IGenericHandler handler = IGenericHandler(handlerAddress);\n        handler.removeResource(resourceID, contractAddress);\n    }\n\n    /**\n        @notice Sets a resource as burnable for handler contracts that use the IERCHandler interface.\n        @notice Only callable by an address that currently has the admin role.\n        @param handlerAddress Address of handler resource will be set for.\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\n     */\n    function adminSetBurnable(address handlerAddress, address tokenAddress)\n        external\n        onlyAdmin\n    {\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.setBurnable(tokenAddress);\n    }\n\n    /**\n        @notice Sets the nonce for the specific domainID.\n        @notice Only callable by an address that currently has the admin role.\n        @param domainID Domain ID for increasing nonce.\n        @param nonce The nonce value to be set.\n     */\n    function adminSetDepositNonce(uint8 domainID, uint64 nonce)\n        external\n        onlyAdmin\n    {\n        require(\n            nonce > _depositCounts[domainID],\n            \"Does not allow decrements of the nonce\"\n        );\n        _depositCounts[domainID] = nonce;\n    }\n\n    /**\n        @notice Set a forwarder to be used.\n        @notice Only callable by an address that currently has the admin role.\n        @param forwarder Forwarder address to be added.\n        @param valid Decision for the specific forwarder.\n     */\n    function adminSetForwarder(address forwarder, bool valid)\n        external\n        onlyAdmin\n    {\n        isValidForwarder[forwarder] = valid;\n    }\n\n    function adminSetDomainId(uint8 domainID) external onlyAdmin {\n        _domainID = domainID;\n    }\n\n    function adminSetSpecialFee(uint8 destinationDomainID, uint256 _specialFee)\n        public\n        onlyAdmin\n    {\n        special[destinationDomainID] = true;\n        specialFee[destinationDomainID] = _specialFee;\n    }\n\n    function adminRemoveSpecialFee(uint8 destinationDomainID) public onlyAdmin {\n        delete special[destinationDomainID];\n        delete specialFee[destinationDomainID];\n    }\n\n    event FeeChanged(uint256 newFee);\n\n    /**\n        @notice Sets new value of the fee.\n        @notice Only callable by admin.\n        @param newFee Value {_fee} will be updated to.\n     */\n    function adminSetFee(uint256 newFee) external onlyAdmin {\n        require(_fee_ != newFee, \"Current fee is equal to new fee\");\n        _fee_ = newFee;\n        emit FeeChanged(newFee);\n    }\n\n    function _getFee(uint8 destinationDomainID)\n        internal\n        view\n        returns (uint256)\n    {\n        if (special[destinationDomainID]) {\n            return specialFee[destinationDomainID];\n        } else {\n            return _fee_;\n        }\n    }\n\n    function getFee(uint8 destinationDomainID) external view returns (uint256) {\n        return _getFee(destinationDomainID);\n    }\n\n    /**\n        @notice Returns a proposal.\n        @param originDomainID Chain ID deposit originated from.\n        @param depositNonce ID of proposal generated by proposal's origin Bridge contract.\n        @param resourceID ResourceID used to find address of handler to be used for deposit.\n        @return Proposal which consists of:\n        - _dataHash Hash of data to be provided when deposit proposal is executed.\n        - _yesVotes Number of votes in favor of proposal.\n        - _noVotes Number of votes against proposal.\n        - _status Current status of proposal.\n     */\n    function getProposal(\n        uint8 originDomainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data\n    ) external view returns (Proposal memory) {\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        bytes32 dataHash = keccak256(\n            abi.encodePacked(resourceID, handler, data)\n        );\n        uint72 nonceAndID = (uint72(depositNonce) << 8) |\n            uint72(originDomainID);\n        return _proposals[nonceAndID][dataHash];\n    }\n\n    /**\n        @notice Returns total relayers number.\n        @notice Added for backwards compatibility.\n     */\n    function _totalRelayers() public view returns (uint256) {\n        return AccessControl.getRoleMemberCount(RELAYER_ROLE);\n    }\n\n    function adminChangeExpiry(uint256 expiry) external onlyAdmin {\n        _expiry = expiry.toUint40();\n    }\n\n    /**\n        @notice Used to manually withdraw funds from ERC safes.\n        @param handlerAddress Address of handler to withdraw from.\n        @param data ABI-encoded withdrawal params relevant to the specified handler.\n     */\n    function adminWithdraw(address handlerAddress, bytes memory data)\n        external\n        onlyAdmin\n    {\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.withdraw(data);\n    }\n\n    function adminWithdrawETH(address handlerAddress, bytes memory data)\n        external\n        onlyAdmin\n    {\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.withdrawETH(data);\n    }\n\n    event FeeDistributed(\n        address tokenAddress,\n        address recipient,\n        uint256 amount\n    );\n\n    function transferFee(\n        address payable[] calldata addrs,\n        uint256[] calldata amounts\n    ) external onlyAdmin {\n        require(\n            addrs.length == amounts.length,\n            \"addrs[], amounts[]: diff length\"\n        );\n        for (uint256 i = 0; i < addrs.length; i++) {\n            (bool success, ) = addrs[i].call{value: amounts[i]}(\"\");\n            require(success, \"Fee ether transfer failed\");\n            emit FeeDistributed(address(0), addrs[i], amounts[i]);\n        }\n    }\n\n    error IncorrectFeeSupplied(uint256 msgValue, uint256 fee);\n    error ResourceIDNotMappedToHandler();\n\n    /**\n        @notice Initiates a transfer using a specified handler contract.\n        @notice Only callable when Bridge is not paused.\n        @param destinationDomainID ID of chain deposit will be bridged to.\n        @param resourceID ResourceID used to find address of handler to be used for deposit.\n        @param depositData Additional data to be passed to specified handler.\n        @param feeData Additional data to be passed to the fee handler.\n        @notice Emits {Deposit} event with all necessary parameters and a handler response.\n        - ERC20Handler: responds with an empty data.\n        - ERC721Handler: responds with the deposited token metadata acquired by calling a tokenURI method in the token contract.\n        - GenericHandler: responds with the raw bytes returned from the call to the target contract.\n     */\n    function deposit(\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) external payable whenNotPaused {\n        address sender = _msgSender();\n        _deposit(sender, destinationDomainID, resourceID, depositData, feeData);\n    }\n\n    function _deposit(\n        address sender,\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) private {\n        uint256 value = msg.value;\n        uint256 fee = _getFee(destinationDomainID);\n        value -= fee;\n        _feeReserve += fee;\n\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        if (handler == address(0)) {\n            revert ResourceIDNotMappedToHandler();\n        }\n\n        uint64 depositNonce = ++_depositCounts[destinationDomainID];\n        bytes memory handlerResponse = IDepositExecute(handler).deposit{\n            value: value\n        }(resourceID, sender, depositData);\n\n        emit Deposit(\n            destinationDomainID,\n            resourceID,\n            depositNonce,\n            sender,\n            depositData,\n            handlerResponse\n        );\n    }\n\n    error InvalidSignature(address signer, uint256 index);\n\n    function checkSignature(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data,\n        bytes calldata signature\n    ) external view returns (bool) {\n        bytes32 structHash = keccak256(\n            abi.encode(\n                PERMIT_TYPEHASH,\n                domainID,\n                depositNonce,\n                resourceID,\n                keccak256(data)\n            )\n        );\n        bytes32 hash = _hashTypedDataV4(structHash);\n        address sender = ECDSA.recover(hash, signature);\n        return hasRole(RELAYER_ROLE, sender);\n    }\n\n    function voteProposals(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data,\n        bytes[] memory signatures\n    ) external whenNotPaused nonReentrant {\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        require(handler != address(0), \"no handler for resourceID\");\n        bytes32 dataHash = keccak256(\n            abi.encodePacked(resourceID, handler, data)\n        );\n        uint256 length = signatures.length;\n        require(\n            length >= _relayerThreshold,\n            \"Signatures length >= relayerThreshold\"\n        );\n        Proposal memory proposal = Proposal({\n            _status: ProposalStatus.Active,\n            _yesVotes: 0,\n            _yesVotesTotal: 0,\n            _proposedBlock: uint40(block.number) // Overflow is desired.\n        });\n\n        bytes32 hash = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    PERMIT_TYPEHASH,\n                    domainID,\n                    depositNonce,\n                    resourceID,\n                    keccak256(data)\n                )\n            )\n        );\n\n        for (uint256 i; i < length; ++i) {\n            address signer = ECDSA.recover(hash, signatures[i]);\n            if (!hasRole(RELAYER_ROLE, signer)) {\n                revert InvalidSignature(signer, i);\n            }\n\n            require(!_hasVoted(proposal, signer), \"relayer already voted\");\n            proposal._yesVotes = (proposal._yesVotes | _relayerBit(signer))\n                .toUint200();\n            proposal._yesVotesTotal++; // TODO: check if bit counting is cheaper.\n        }\n        proposal._status = ProposalStatus.Executed;\n        IDepositExecute depositHandler = IDepositExecute(handler);\n        depositHandler.executeProposal(resourceID, data);\n        emit ProposalEvent(\n            domainID,\n            depositNonce,\n            ProposalStatus.Executed,\n            dataHash\n        );\n\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\n        require(\n            uint256(_proposals[nonceAndID][dataHash]._status) <= 1,\n            \"proposal already executed/cancelled\"\n        );\n        _proposals[nonceAndID][dataHash] = proposal;\n    }\n\n    /**\n        @notice When called, {_msgSender()} will be marked as voting in favor of proposal.\n        @notice Only callable by relayers when Bridge is not paused.\n        @param domainID ID of chain deposit originated from.\n        @param depositNonce ID of deposited generated by origin Bridge contract.\n        @param data Data originally provided when deposit was made.\n        @notice Proposal must not have already been passed or executed.\n        @notice {_msgSender()} must not have already voted on proposal.\n        @notice Emits {ProposalEvent} event with status indicating the proposal status.\n        @notice Emits {ProposalVote} event.\n     */\n    function voteProposal(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data\n    ) external onlyRelayers whenNotPaused nonReentrant {\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\n        bytes32 dataHash = keccak256(\n            abi.encodePacked(resourceID, handler, data)\n        );\n        Proposal memory proposal = _proposals[nonceAndID][dataHash];\n\n        require(\n            _resourceIDToHandlerAddress[resourceID] != address(0),\n            \"no handler for resourceID\"\n        );\n\n        if (proposal._status == ProposalStatus.Passed) {\n            _executeProposal(domainID, depositNonce, data, resourceID, true);\n            return;\n        }\n\n        address sender = _msgSender();\n\n        require(\n            uint256(proposal._status) <= 1,\n            \"proposal already executed/cancelled\"\n        );\n        require(!_hasVoted(proposal, sender), \"relayer already voted\");\n\n        if (proposal._status == ProposalStatus.Inactive) {\n            proposal = Proposal({\n                _status: ProposalStatus.Active,\n                _yesVotes: 0,\n                _yesVotesTotal: 0,\n                _proposedBlock: uint40(block.number) // Overflow is desired.\n            });\n\n            emit ProposalEvent(\n                domainID,\n                depositNonce,\n                ProposalStatus.Active,\n                dataHash\n            );\n        } else if (\n            uint40(sub(block.number, proposal._proposedBlock)) > _expiry\n        ) {\n            // if the number of blocks that has passed since this proposal was\n            // submitted exceeds the expiry threshold set, cancel the proposal\n            proposal._status = ProposalStatus.Cancelled;\n\n            emit ProposalEvent(\n                domainID,\n                depositNonce,\n                ProposalStatus.Cancelled,\n                dataHash\n            );\n        }\n\n        if (proposal._status != ProposalStatus.Cancelled) {\n            proposal._yesVotes = (proposal._yesVotes | _relayerBit(sender))\n                .toUint200();\n            proposal._yesVotesTotal++; // TODO: check if bit counting is cheaper.\n\n            emit ProposalVote(\n                domainID,\n                depositNonce,\n                proposal._status,\n                dataHash\n            );\n\n            // Finalize if _relayerThreshold has been reached\n            if (proposal._yesVotesTotal >= _relayerThreshold) {\n                proposal._status = ProposalStatus.Passed;\n                emit ProposalEvent(\n                    domainID,\n                    depositNonce,\n                    ProposalStatus.Passed,\n                    dataHash\n                );\n            }\n        }\n        _proposals[nonceAndID][dataHash] = proposal;\n\n        if (proposal._status == ProposalStatus.Passed) {\n            _executeProposal(domainID, depositNonce, data, resourceID, false);\n        }\n    }\n\n    /**\n        @notice Cancels a deposit proposal that has not been executed yet.\n        @notice Only callable by relayers when Bridge is not paused.\n        @param domainID ID of chain deposit originated from.\n        @param depositNonce ID of deposited generated by origin Bridge contract.\n        @param dataHash Hash of data originally provided when deposit was made.\n        @notice Proposal must be past expiry threshold.\n        @notice Emits {ProposalEvent} event with status {Cancelled}.\n     */\n    function cancelProposal(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes32 dataHash\n    ) public onlyAdminOrRelayer {\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\n        Proposal memory proposal = _proposals[nonceAndID][dataHash];\n        ProposalStatus currentStatus = proposal._status;\n\n        require(\n            currentStatus == ProposalStatus.Active ||\n                currentStatus == ProposalStatus.Passed,\n            \"Proposal cannot be cancelled\"\n        );\n        require(\n            uint40(sub(block.number, proposal._proposedBlock)) > _expiry,\n            \"Proposal not at expiry threshold\"\n        );\n\n        proposal._status = ProposalStatus.Cancelled;\n        _proposals[nonceAndID][dataHash] = proposal;\n\n        emit ProposalEvent(\n            domainID,\n            depositNonce,\n            ProposalStatus.Cancelled,\n            dataHash\n        );\n    }\n\n    /**\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\n        @notice Only callable by relayers when Bridge is not paused.\n        @param domainID ID of chain deposit originated from.\n        @param resourceID ResourceID to be used when making deposits.\n        @param depositNonce ID of deposited generated by origin Bridge contract.\n        @param data Data originally provided when deposit was made.\n        @param revertOnFail Decision if the transaction should be reverted in case of handler's executeProposal is reverted or not.\n        @notice Proposal must have Passed status.\n        @notice Hash of {data} must equal proposal's {dataHash}.\n        @notice Emits {ProposalEvent} event with status {Executed}.\n        @notice Emits {FailedExecution} event with the failed reason.\n        @notice Behaviour of this function is different for {GenericHandler} and other specific ERC handlers.\n        In the case of ERC handler, when execution fails, the handler will terminate the function with revert.\n        In the case of {GenericHandler}, when execution fails, the handler will emit a failure event and terminate the function normally.\n     */\n    function executeProposal(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes calldata data,\n        bytes32 resourceID,\n        bool revertOnFail\n    ) public onlyRelayers whenNotPaused nonReentrant {\n        _executeProposal(\n            domainID,\n            depositNonce,\n            data,\n            resourceID,\n            revertOnFail\n        );\n    }\n\n    function _executeProposal(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes calldata data,\n        bytes32 resourceID,\n        bool revertOnFail\n    ) private {\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\n        bytes32 dataHash = keccak256(\n            abi.encodePacked(resourceID, handler, data)\n        );\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\n\n        require(\n            proposal._status == ProposalStatus.Passed,\n            \"Proposal must have Passed status\"\n        );\n\n        proposal._status = ProposalStatus.Executed;\n        IDepositExecute depositHandler = IDepositExecute(handler);\n\n        if (revertOnFail) {\n            depositHandler.executeProposal(resourceID, data);\n        } else {\n            try depositHandler.executeProposal(resourceID, data) {} catch (\n                bytes memory lowLevelData\n            ) {\n                proposal._status = ProposalStatus.Passed;\n                emit FailedHandlerExecution(lowLevelData);\n                return;\n            }\n        }\n\n        emit ProposalEvent(\n            domainID,\n            depositNonce,\n            ProposalStatus.Executed,\n            dataHash\n        );\n    }\n}\n"
    },
    "contracts/utils/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\n// This is adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/access/AccessControl.sol\n// The only difference is added getRoleMemberIndex(bytes32 role, address account) function.\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the index of the account that have `role`.\n     */\n    function getRoleMemberIndex(bytes32 role, address account) public view returns (uint256) {\n        return _roles[role].members._inner._indexes[bytes32(uint256(uint160(account)))];\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This is a stripped down version of Open zeppelin's Pausable contract.\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableSet.sol\n *\n */\ncontract Pausable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _whenNotPaused();\n        _;\n    }\n\n    function _whenNotPaused() private view {\n        require(!_paused, \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _whenPaused();\n        _;\n    }\n\n    function _whenPaused() private view {\n        require(_paused, \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     * @param sender Address which executes pause.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause(address sender) internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(sender);\n    }\n\n    /**\n     * @dev Returns to normal state.\n     * @param sender Address which executes unpause.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause(address sender) internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(sender);\n    }\n}"
    },
    "contracts/utils/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * note that this is a stripped down version of open zeppelin's safemath\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\n */\n\ncontract SafeMath {\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return _sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function _sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n}"
    },
    "contracts/utils/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\n\nlibrary SafeCast {\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value < 2**200, \"value does not fit in 200 bits\");\n        return uint200(value);\n    }\n\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"value does not fit in 128 bits\");\n        return uint128(value);\n    }\n\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value < 2**40, \"value does not fit in 40 bits\");\n        return uint40(value);\n    }\n\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"value does not fit in 8 bits\");\n        return uint8(value);\n    }\n}\n"
    },
    "contracts/interfaces/IDepositExecute.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\n/**\n    @title Interface for handler contracts that support deposits and deposit executions.\n    @author ChainSafe Systems.\n */\ninterface IDepositExecute {\n    /**\n        @notice It is intended that deposit are made using the Bridge contract.\n        @param resourceID ResourceID used to find address of token to be used for deposit.\n        @param depositor Address of account making the deposit in the Bridge contract.\n        @param data Consists of additional data needed for a specific deposit.\n     */\n    function deposit(\n        bytes32 resourceID,\n        address depositor,\n        bytes calldata data\n    ) external payable returns (bytes memory);\n\n    /**\n        @notice It is intended that proposals are executed by the Bridge contract.\n        @param resourceID ResourceID used to find address of token to be used for deposit.\n        @param data Consists of additional data needed for a specific deposit execution.\n     */\n    function executeProposal(bytes32 resourceID, bytes calldata data) external;\n}\n"
    },
    "contracts/interfaces/IERCHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\n/**\n    @title Interface to be used with handlers that support ERC20s and ERC721s.\n    @author ChainSafe Systems.\n */\ninterface IERCHandler {\n    /**\n        @notice Correlates {resourceID} with {contractAddress}.\n        @param resourceID ResourceID to be used when making deposits.\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\n     */\n    function setResource(bytes32 resourceID, address contractAddress) external;\n\n    function removeResource(bytes32 resourceID, address contractAddress) external;\n\n    /**\n        @notice Marks {contractAddress} as mintable/burnable.\n        @param contractAddress Address of contract to be used when making or executing deposits.\n     */\n    function setBurnable(address contractAddress) external;\n\n    /**\n        @notice Withdraw funds from ERC safes.\n        @param data ABI-encoded withdrawal params relevant to the handler.\n     */\n    function withdraw(bytes memory data) external;\n\n    function withdrawETH(bytes memory data) external;\n\n    /**\n        @notice Exposing getter for {_resourceIDToTokenContractAddress}.\n        @param resourceID ResourceID to be used.\n        @return address The {tokenContractAddress} that is currently set for the resourceID.\n     */\n    function _resourceIDToTokenContractAddress(bytes32 resourceID)\n        external\n        view\n        returns (address);\n\n    function setNative(address nativeAddress,bool _isNative) external;\n}\n"
    },
    "contracts/interfaces/IGenericHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\n/**\n    @title Interface for handler that handles generic deposits and deposit executions.\n    @author ChainSafe Systems.\n */\ninterface IGenericHandler {\n    /**\n        @notice Correlates {resourceID} with {contractAddress}, {depositFunctionSig}, and {executeFunctionSig}.\n        @param resourceID ResourceID to be used when making deposits.\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\n        @param depositFunctionDepositorOffset Depositor address position offset in the metadata, in bytes.\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\n     */\n    function setResource(\n        bytes32 resourceID,\n        address contractAddress,\n        bytes4 depositFunctionSig,\n        uint depositFunctionDepositorOffset,\n        bytes4 executeFunctionSig\n    ) external;\n\n    function removeResource(bytes32 resourceID, address contractAddress)\n        external;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.4;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\n"
    },
    "contracts/interfaces/IBridge.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\n/**\n    @title Interface for Bridge contract.\n    @author ChainSafe Systems.\n */\ninterface IBridge {\n    enum ProposalStatus {\n        Inactive,\n        Active,\n        Passed,\n        Executed,\n        Cancelled\n    }\n\n    struct Proposal {\n        ProposalStatus _status;\n        uint200 _yesVotes; // bitmap, 200 maximum votes\n        uint8 _yesVotesTotal;\n        uint40 _proposedBlock; // 1099511627775 maximum block\n    }\n\n    /**\n        @notice Exposing getter for {_domainID} instead of forcing the use of call.\n        @return uint8 The {_domainID} that is currently set for the Bridge contract.\n     */\n    function _domainID() external returns (uint8);\n\n    function getProposal(\n        uint8 originDomainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data\n    ) external view returns (Proposal memory);\n\n    function _relayerThreshold() external view returns (uint8);\n\n    function _resourceIDToHandlerAddress(bytes32)\n        external\n        view\n        returns (address);\n\n    function checkSignature(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data,\n        bytes calldata signature\n    ) external view returns (bool);\n\n    function deposit(\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IFeeHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\n/**\n    @title Interface to be used with fee handlers.\n    @author ChainSafe Systems.\n */\ninterface IFeeHandler {\n    /**\n        @notice This event is emitted when the fee is collected.\n        @param sender Sender of the deposit.\n        @param fromDomainID ID of the source chain.\n        @param destinationDomainID ID of chain deposit will be bridged to.\n        @param resourceID ResourceID to be used when making deposits.\n        @param fee Collected fee amount.\n        @param tokenAddress Address of the token in which the fee was collected (0 for the base currency).\n     */\n    event FeeCollected(\n        address sender,\n        uint8 fromDomainID,\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        uint256 fee,\n        address tokenAddress\n    );\n\n    /**\n        @notice This event is emitted when the fee is distributed to an address.\n        @param tokenAddress Address of the token in which the fee was collected (0 for the base currency).\n        @param recipient Address that receives the distributed fee.\n        @param amount Amount that is distributed.\n     */\n    event FeeDistributed(\n        address tokenAddress,\n        address recipient,\n        uint256 amount\n    );\n\n    /**\n        @notice Collects fee for deposit.\n        @param sender Sender of the deposit.\n        @param fromDomainID ID of the source chain.\n        @param destinationDomainID ID of chain deposit will be bridged to.\n        @param resourceID ResourceID to be used when making deposits.\n        @param depositData Additional data to be passed to specified handler.\n        @param feeData Additional data to be passed to the fee handler.\n     */\n    function collectFee(\n        address sender,\n        uint8 fromDomainID,\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) external payable;\n\n    /**\n        @notice Calculates fee for deposit.\n        @param sender Sender of the deposit.\n        @param fromDomainID ID of the source chain.\n        @param destinationDomainID ID of chain deposit will be bridged to.\n        @param resourceID ResourceID to be used when making deposits.\n        @param depositData Additional data to be passed to specified handler.\n        @param feeData Additional data to be passed to the fee handler.\n        @return Returns the fee amount and token address.\n     */\n    function calculateFee(\n        address sender,\n        uint8 fromDomainID,\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) external view returns (uint256, address);\n\n    function _fee() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Forwarder.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\n\n/**\n    @notice This contract refers to Openzeppelin's MinimalForwarder contract.\n */\ncontract Forwarder is EIP712 {\n    using ECDSA for bytes32;\n\n    struct ForwardRequest {\n        address from;\n        address to;\n        uint256 value;\n        uint256 gas;\n        uint256 nonce;\n        bytes data;\n    }\n\n    bytes32 private constant _TYPEHASH =\n        keccak256(\n            \"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\"\n        );\n\n    mapping(address => uint256) private _nonces;\n\n    constructor() EIP712(\"Forwarder\", \"0.0.1\") {}\n\n    function getNonce(address from) public view returns (uint256) {\n        return _nonces[from];\n    }\n\n    function getChainId() public view returns (uint256) {\n        return block.chainid;\n    }\n\n    function verify(ForwardRequest calldata req, bytes calldata signature)\n        public\n        view\n        returns (bool)\n    {\n        address signer = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    _TYPEHASH,\n                    req.from,\n                    req.to,\n                    req.value,\n                    req.gas,\n                    req.nonce,\n                    keccak256(req.data)\n                )\n            )\n        ).recover(signature);\n        return _nonces[req.from] == req.nonce && signer == req.from;\n    }\n\n    function execute(ForwardRequest calldata req, bytes calldata signature)\n        public\n        payable\n        returns (bool, bytes memory)\n    {\n        require(\n            verify(req, signature),\n            \"MinimalForwarder: signature does not match request\"\n        );\n        _nonces[req.from] = req.nonce + 1;\n\n        (bool success, bytes memory returndata) = req.to.call{\n            gas: req.gas,\n            value: req.value\n        }(abi.encodePacked(req.data, req.from));\n\n        assert(gasleft() > req.gas / 63);\n\n        return (success, returndata);\n    }\n}\n"
    },
    "contracts/Signatures.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\nimport \"./interfaces/IBridge.sol\";\nimport \"./utils/AccessControl.sol\";\nimport \"./utils/SafeCast.sol\";\nimport \"./utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract Signatures is Pausable, AccessControl {\n    using SafeCast for *;\n    // 0xc4cb5d35714699d6e85b9562b644e60393b418d974a5c1dd8efaadac37a142c5\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\n            \"PermitBridge(uint8 domainID,uint64 depositNonce,bytes32 resourceID,bytes data)\"\n        );\n    // 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    bytes32 public constant _TYPE_HASH =\n        keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n    bytes32 public constant RELAYER_ROLE = keccak256(\"RELAYER_ROLE\");\n    // 0x058443738ec3641a3233a9f285e16671e4ad9755445580d761017e695f75052b\n    bytes32 private constant _HASHED_NAME = keccak256(bytes(\"PermitBridge\"));\n    // 0xe6bbd6277e1bf288eed5e8d1780f9a50b239e86b153736bceebccf4ea79d90b3\n    bytes32 private constant _HASHED_VERSION = keccak256(bytes(\"1.0\"));\n\n    mapping(uint8 => uint8) public _relayerThreshold;\n    mapping(uint8 => uint256) public destChainId;\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    modifier onlyAdmin() {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\n            \"sender doesn't have admin role\"\n        );\n        _;\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        uint256 chainId,\n        address signatureContract\n    ) private pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    typeHash,\n                    nameHash,\n                    versionHash,\n                    chainId,\n                    signatureContract\n                )\n            );\n    }\n\n    function _hashTypedDataV4(\n        bytes32 structHash,\n        uint256 chainId,\n        address signatureContract\n    ) internal view virtual returns (bytes32) {\n        return\n            ECDSA.toTypedDataHash(\n                _buildDomainSeparator(\n                    _TYPE_HASH,\n                    _HASHED_NAME,\n                    _HASHED_VERSION,\n                    chainId,\n                    signatureContract\n                ),\n                structHash\n            );\n    }\n\n    function checkSignature(\n        uint8 domainID,\n        uint8 destinationDomainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data,\n        bytes calldata signature\n    ) public view returns (address) {\n        bytes32 structHash = keccak256(\n            abi.encode(\n                PERMIT_TYPEHASH,\n                domainID,\n                depositNonce,\n                resourceID,\n                keccak256(data)\n            )\n        );\n        address destinationBridge = destinationBridgeAddress[\n            destinationDomainID\n        ];\n        bytes32 hash = _hashTypedDataV4(\n            structHash,\n            destChainId[destinationDomainID] == 0\n                ? uint256(destinationDomainID)\n                : destChainId[destinationDomainID],\n            destinationBridge\n        );\n        return ECDSA.recover(hash, signature);\n    }\n\n    /// @notice depositHash = keccak256(abi.encode(originDomainID,destinationDomainID,depositNonce,resourceID,keccak256(data)));\n    /// @notice depositHash => signature[]\n    mapping(bytes32 => bytes[]) public signatures;\n    /// @notice signature => bool\n    mapping(bytes => bool) public hasVote; // scrap\n    mapping(bytes32 => mapping(address => bool)) public relayerVote;\n    mapping(uint8 => address) public destinationBridgeAddress;\n\n    event SubmitSignature(\n        uint8 indexed originDomainID,\n        uint8 indexed destinationDomainID,\n        uint64 depositNonce,\n        bytes32 indexed resourceID,\n        bytes data,\n        bytes signature\n    );\n\n    event SignaturePass(\n        uint8 indexed originDomainID,\n        uint8 indexed destinationDomainID,\n        uint64 depositNonce,\n        bytes32 indexed resourceID,\n        bytes data,\n        bytes signature\n    );\n\n    function adminChangeRelayerThreshold(\n        uint8 destinationDomainID,\n        uint256 newThreshold\n    ) external onlyAdmin {\n        _relayerThreshold[destinationDomainID] = newThreshold.toUint8();\n    }\n\n    function adminSetDestChainId(\n        uint8 destinationDomainID,\n        uint256 chainId,\n        address destinationBridge\n    ) external onlyAdmin {\n        destChainId[destinationDomainID] = chainId;\n        destinationBridgeAddress[destinationDomainID] = destinationBridge;\n    }\n\n    function adminPause() external onlyAdmin {\n        _pause(_msgSender());\n    }\n\n    function adminUnpause() external onlyAdmin {\n        _unpause(_msgSender());\n    }\n\n    struct Proposal {\n        uint8 originDomainID;\n        uint8 destinationDomainID;\n        address destinationBridge;\n        uint64 depositNonce;\n        bytes32 resourceID;\n        bytes data;\n        uint256 proposalIndex;\n    }\n\n    uint256 public proposalIndex;\n    mapping(bytes32 => Proposal) public proposals;\n    mapping(uint256 => bytes32) public indexToProposal;\n\n    function submitSignature(\n        uint8 originDomainID,\n        uint8 destinationDomainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data,\n        bytes calldata signature\n    ) external whenNotPaused {\n        address destinationBridge = destinationBridgeAddress[\n            destinationDomainID\n        ];\n        address relayer = checkSignature(\n            originDomainID,\n            destinationDomainID,\n            depositNonce,\n            resourceID,\n            data,\n            signature\n        );\n        require(hasRole(RELAYER_ROLE, relayer), \"invalid signature\");\n        bytes32 depositHash = keccak256(\n            abi.encode(\n                originDomainID,\n                destinationDomainID,\n                depositNonce,\n                resourceID,\n                keccak256(data)\n            )\n        );\n        require(!relayerVote[depositHash][relayer], \"signature aleardy submit\");\n        relayerVote[depositHash][relayer] = true;\n        require(\n            signatures[depositHash].length <\n                _relayerThreshold[destinationDomainID],\n            \"Signture aleardy pass\"\n        );\n        if (signatures[depositHash].length == 0) {\n            proposalIndex++;\n            proposals[depositHash] = Proposal({\n                originDomainID: originDomainID,\n                destinationDomainID: destinationDomainID,\n                destinationBridge: destinationBridge,\n                depositNonce: depositNonce,\n                resourceID: resourceID,\n                data: data,\n                proposalIndex: proposalIndex\n            });\n            indexToProposal[proposalIndex] = depositHash;\n        }\n        signatures[depositHash].push(signature);\n\n        emit SubmitSignature(\n            originDomainID,\n            destinationDomainID,\n            depositNonce,\n            resourceID,\n            data,\n            signature\n        );\n        if (\n            signatures[depositHash].length >=\n            _relayerThreshold[destinationDomainID]\n        ) {\n            emit SignaturePass(\n                originDomainID,\n                destinationDomainID,\n                depositNonce,\n                resourceID,\n                data,\n                signature\n            );\n        }\n    }\n\n    function getSignatures(\n        uint8 domainID,\n        uint8 destinationDomainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data\n    ) external view returns (bytes[] memory) {\n        return\n            signatures[\n                keccak256(\n                    abi.encode(\n                        domainID,\n                        destinationDomainID,\n                        depositNonce,\n                        resourceID,\n                        keccak256(data)\n                    )\n                )\n            ];\n    }\n\n    function getProposal(uint256 index) public view returns (Proposal memory) {\n        require(index <= proposalIndex, \"Proposal not exist\");\n        return proposals[indexToProposal[index]];\n    }\n\n    function getSignatures(uint256 index)\n        external\n        view\n        returns (bytes[] memory)\n    {\n        require(index <= proposalIndex, \"Proposal not exist\");\n        return signatures[indexToProposal[index]];\n    }\n}\n"
    },
    "contracts/TestContracts.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"./utils/SafeCast.sol\";\nimport \"./handlers/HandlerHelpers.sol\";\n\ncontract NoArgument {\n    event NoArgumentCalled();\n\n    function noArgument() external {\n        emit NoArgumentCalled();\n    }\n}\n\ncontract OneArgument {\n    event OneArgumentCalled(uint256 indexed argumentOne);\n\n    function oneArgument(uint256 argumentOne) external {\n        emit OneArgumentCalled(argumentOne);\n    }\n}\n\ncontract TwoArguments {\n    event TwoArgumentsCalled(address[] argumentOne, bytes4 argumentTwo);\n\n    function twoArguments(address[] calldata argumentOne, bytes4 argumentTwo) external {\n        emit TwoArgumentsCalled(argumentOne, argumentTwo);\n    }\n}\n\ncontract ThreeArguments {\n    event ThreeArgumentsCalled(string argumentOne, int8 argumentTwo, bool argumentThree);\n\n    function threeArguments(string calldata argumentOne, int8 argumentTwo, bool argumentThree) external {\n        emit ThreeArgumentsCalled(argumentOne, argumentTwo, argumentThree);\n    }\n}\n\ncontract WithDepositor {\n    event WithDepositorCalled(address argumentOne, uint256 argumentTwo);\n\n    function withDepositor(address argumentOne, uint256 argumentTwo) external {\n        emit WithDepositorCalled(argumentOne, argumentTwo);\n    }\n}\n\ncontract SafeCaster {\n    using SafeCast for *;\n\n    function toUint200(uint input) external pure returns(uint200) {\n        return input.toUint200();\n    }\n}\n\ncontract ReturnData {\n    function returnData(string memory argument) external pure returns(bytes32 response) {\n        assembly {\n            response := mload(add(argument, 32))\n        }\n    }\n}\n\ncontract HandlerRevert is HandlerHelpers {\n    uint private _totalAmount;\n\n    constructor(\n        address          bridgeAddress\n    ) public HandlerHelpers(bridgeAddress) {\n    }\n\n    function executeProposal(bytes32, bytes calldata) external view {\n        if (_totalAmount == 0) {\n            revert('Something bad happened');\n        }\n        return;\n    }\n\n    function virtualIncreaseBalance(uint amount) external {\n        _totalAmount = amount;\n    }\n}\n\ncontract TestForwarder {\n    function execute(bytes memory data, address to, address sender) external {\n        bytes memory callData = abi.encodePacked(data, sender);\n        (bool success, ) = to.call(callData);\n        require(success, \"Relay call failed\");\n    }\n}\n\ncontract TestTarget {\n    uint public calls = 0;\n    uint public gasLeft;\n    bytes public data;\n    bool public burnAllGas;\n    fallback() external payable {\n        gasLeft = gasleft();\n        calls++;\n        data = msg.data;\n        if (burnAllGas) {\n            assert(false);\n        }\n    }\n\n    function setBurnAllGas() public {\n        burnAllGas = true;\n    }\n}\n"
    },
    "contracts/handlers/HandlerHelpers.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"../interfaces/IERCHandler.sol\";\n\n/**\n    @title Function used across handler contracts.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with the Bridge contract.\n */\ncontract HandlerHelpers is IERCHandler {\n    address public immutable _bridgeAddress;\n\n    // resourceID => token contract address\n    mapping(bytes32 => address) public _resourceIDToTokenContractAddress;\n\n    // token contract address => resourceID\n    mapping(address => bytes32) public _tokenContractAddressToResourceID;\n\n    // token contract address => is whitelisted\n    mapping(address => bool) public _contractWhitelist;\n\n    // token contract address => is burnable\n    mapping(address => bool) public _burnList;\n    // native => bool\n    mapping(address => bool) public isNative;\n\n    modifier onlyBridge() {\n        _onlyBridge();\n        _;\n    }\n\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    constructor(address bridgeAddress) {\n        _bridgeAddress = bridgeAddress;\n    }\n\n    function _onlyBridge() private view {\n        require(msg.sender == _bridgeAddress, \"sender must be bridge contract\");\n    }\n\n    /**\n        @notice First verifies {_resourceIDToContractAddress}[{resourceID}] and\n        {_contractAddressToResourceID}[{contractAddress}] are not already set,\n        then sets {_resourceIDToContractAddress} with {contractAddress},\n        {_contractAddressToResourceID} with {resourceID},\n        and {_contractWhitelist} to true for {contractAddress}.\n        @param resourceID ResourceID to be used when making deposits.\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\n     */\n    function setResource(bytes32 resourceID, address contractAddress)\n        external\n        override\n        onlyBridge\n    {\n        _setResource(resourceID, contractAddress);\n    }\n\n    function removeResource(bytes32 resourceID, address contractAddress)\n        external\n        override\n        onlyBridge\n    {\n        _removeResource(resourceID, contractAddress);\n    }\n\n    /**\n        @notice First verifies {contractAddress} is whitelisted, then sets {_burnList}[{contractAddress}]\n        to true.\n        @param contractAddress Address of contract to be used when making or executing deposits.\n     */\n    function setBurnable(address contractAddress) external override onlyBridge {\n        _setBurnable(contractAddress);\n    }\n\n    function withdraw(bytes memory data) external virtual override {}\n\n    function withdrawETH(bytes memory data) external virtual override {}\n\n    function _setResource(bytes32 resourceID, address contractAddress)\n        internal\n    {\n        _resourceIDToTokenContractAddress[resourceID] = contractAddress;\n        _tokenContractAddressToResourceID[contractAddress] = resourceID;\n\n        _contractWhitelist[contractAddress] = true;\n    }\n\n    function _removeResource(bytes32 resourceID, address contractAddress)\n        internal\n    {\n        delete _resourceIDToTokenContractAddress[resourceID];\n        delete _tokenContractAddressToResourceID[contractAddress];\n        delete _contractWhitelist[contractAddress];\n    }\n\n    function _setBurnable(address contractAddress) internal {\n        require(\n            _contractWhitelist[contractAddress],\n            \"provided contract is not whitelisted\"\n        );\n        _burnList[contractAddress] = true;\n    }\n\n    function setNative(address nativeAddress, bool _isNative)\n        external\n        override\n        onlyBridge\n    {\n        isNative[nativeAddress] = _isNative;\n    }\n}\n"
    },
    "contracts/handlers/ERC721Handler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IDepositExecute.sol\";\nimport \"./HandlerHelpers.sol\";\nimport \"../ERC721Safe.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\n/**\n    @title Handles ERC721 deposits and deposit executions.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with the Bridge contract.\n */\ncontract ERC721Handler is IDepositExecute, HandlerHelpers, ERC721Safe {\n    using ERC165Checker for address;\n\n    bytes4 private constant _INTERFACE_ERC721_METADATA = 0x5b5e139f;\n\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    constructor(address bridgeAddress) HandlerHelpers(bridgeAddress) {}\n\n    /**\n        @notice A deposit is initiated by making a deposit in the Bridge contract.\n        @param resourceID ResourceID used to find address of token to be used for deposit.\n        @param depositor Address of account making the deposit in the Bridge contract.\n        @param data Consists of {tokenID} padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        tokenID                                     uint256    bytes    0  - 32\n        @notice If the corresponding {tokenAddress} for the parsed {resourceID} supports {_INTERFACE_ERC721_METADATA},\n        then {metaData} will be set according to the {tokenURI} method in the token contract.\n        @dev Depending if the corresponding {tokenAddress} for the parsed {resourceID} is\n        marked true in {_burnList}, deposited tokens will be burned, if not, they will be locked.\n        @return metaData : the deposited token metadata acquired by calling a {tokenURI} method in the token contract.\n     */\n    function deposit(\n        bytes32 resourceID,\n        address depositor,\n        bytes calldata data\n    ) external payable override onlyBridge returns (bytes memory metaData) {\n        require(msg.value == 0, \"msg.value != 0\");\n        uint256 tokenID;\n\n        (tokenID) = abi.decode(data, (uint256));\n\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n        require(\n            _contractWhitelist[tokenAddress],\n            \"provided tokenAddress is not whitelisted\"\n        );\n\n        // Check if the contract supports metadata, fetch it if it does\n        if (tokenAddress.supportsInterface(_INTERFACE_ERC721_METADATA)) {\n            IERC721Metadata erc721 = IERC721Metadata(tokenAddress);\n            metaData = bytes(erc721.tokenURI(tokenID));\n        }\n\n        if (_burnList[tokenAddress]) {\n            burnERC721(tokenAddress, depositor, tokenID);\n        } else {\n            lockERC721(tokenAddress, depositor, address(this), tokenID);\n        }\n    }\n\n    /**\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\n        by a relayer on the deposit's destination chain.\n        @param data Consists of {tokenID}, {resourceID}, {lenDestinationRecipientAddress},\n        {destinationRecipientAddress}, {lenMeta}, and {metaData} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        tokenID                                     uint256    bytes    0  - 32\n        destinationRecipientAddress     length      uint256    bytes    32 - 64\n        destinationRecipientAddress                   bytes    bytes    64 - (64 + len(destinationRecipientAddress))\n        metadata                        length      uint256    bytes    (64 + len(destinationRecipientAddress)) - (64 + len(destinationRecipientAddress) + 32)\n        metadata                                      bytes    bytes    (64 + len(destinationRecipientAddress) + 32) - END\n     */\n    function executeProposal(bytes32 resourceID, bytes calldata data)\n        external\n        override\n        onlyBridge\n    {\n        uint256 tokenID;\n        uint256 lenDestinationRecipientAddress;\n        bytes memory destinationRecipientAddress;\n        uint256 offsetMetaData;\n        uint256 lenMetaData;\n        bytes memory metaData;\n\n        (tokenID, lenDestinationRecipientAddress) = abi.decode(\n            data,\n            (uint256, uint256)\n        );\n        offsetMetaData = 64 + lenDestinationRecipientAddress;\n        destinationRecipientAddress = bytes(data[64:offsetMetaData]);\n        lenMetaData = abi.decode(data[offsetMetaData:], (uint256));\n        metaData = bytes(\n            data[offsetMetaData + 32:offsetMetaData + 32 + lenMetaData]\n        );\n\n        bytes20 recipientAddress;\n\n        assembly {\n            recipientAddress := mload(add(destinationRecipientAddress, 0x20))\n        }\n\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n        require(\n            _contractWhitelist[address(tokenAddress)],\n            \"provided tokenAddress is not whitelisted\"\n        );\n\n        if (_burnList[tokenAddress]) {\n            mintERC721(\n                tokenAddress,\n                address(recipientAddress),\n                tokenID,\n                metaData\n            );\n        } else {\n            releaseERC721(\n                tokenAddress,\n                address(this),\n                address(recipientAddress),\n                tokenID\n            );\n        }\n    }\n\n    /**\n        @notice Used to manually release ERC721 tokens from ERC721Safe.\n        @param data Consists of {tokenAddress}, {recipient}, and {tokenID} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        tokenAddress                           address     bytes  0 - 32\n        recipient                              address     bytes  32 - 64\n        tokenID                                uint        bytes  64 - 96\n     */\n    function withdraw(bytes memory data) external override onlyBridge {\n        address tokenAddress;\n        address recipient;\n        uint256 tokenID;\n\n        (tokenAddress, recipient, tokenID) = abi.decode(\n            data,\n            (address, address, uint256)\n        );\n\n        releaseERC721(tokenAddress, address(this), recipient, tokenID);\n    }\n}\n"
    },
    "contracts/ERC721Safe.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./interfaces/IERCMintBurn.sol\";\nimport \"./ERC721MinterBurnerPauser.sol\";\n\n/**\n    @title Manages deposited ERC721s.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with ERC721Handler contract.\n */\ncontract ERC721Safe {\n    using SafeMath for uint256;\n\n    /**\n        @notice Used to gain custody of deposited token.\n        @param tokenAddress Address of ERC721 to transfer.\n        @param owner Address of current token owner.\n        @param recipient Address to transfer token to.\n        @param tokenID ID of token to transfer.\n     */\n    function lockERC721(\n        address tokenAddress,\n        address owner,\n        address recipient,\n        uint tokenID\n    ) internal {\n        IERC721 erc721 = IERC721(tokenAddress);\n        erc721.transferFrom(owner, recipient, tokenID);\n    }\n\n    /**\n        @notice Transfers custody of token to recipient.\n        @param tokenAddress Address of ERC721 to transfer.\n        @param owner Address of current token owner.\n        @param recipient Address to transfer token to.\n        @param tokenID ID of token to transfer.\n     */\n    function releaseERC721(\n        address tokenAddress,\n        address owner,\n        address recipient,\n        uint256 tokenID\n    ) internal {\n        IERC721 erc721 = IERC721(tokenAddress);\n        erc721.transferFrom(owner, recipient, tokenID);\n    }\n\n    /**\n        @notice Used to create new ERC721s.\n        @param tokenAddress Address of ERC721 to mint.\n        @param recipient Address to mint token to.\n        @param tokenID ID of token to mint.\n        @param data Optional data to send along with mint call.\n     */\n    function mintERC721(\n        address tokenAddress,\n        address recipient,\n        uint256 tokenID,\n        bytes memory data\n    ) internal {\n        IERCMintBurn erc721 = IERCMintBurn(tokenAddress);\n        erc721.mint(recipient, tokenID, string(data));\n    }\n\n    /**\n        @notice Used to burn ERC721s.\n        @param tokenAddress Address of ERC721 to burn.\n        @param tokenID ID of token to burn.\n     */\n    function burnERC721(\n        address tokenAddress,\n        address owner,\n        uint256 tokenID\n    ) internal {\n        ERC721MinterBurnerPauser erc721 = ERC721MinterBurnerPauser(\n            tokenAddress\n        );\n        require(erc721.ownerOf(tokenID) == owner, \"Burn not from owner\");\n        erc721.burn(tokenID);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.2) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IERCMintBurn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\ninterface IERCMintBurn {\n    /// @dev IERC20 burnFrom\n    function burnFrom(address, uint256) external;\n\n    /// @dev ERC20 & ERC721 burn\n    function burn(uint256) external;\n\n    /// @dev ERC1155 burn\n    function burn(\n        address,\n        uint256,\n        uint256\n    ) external;\n\n    /// @dev ERC1155 burnBatch\n    function burnBatch(\n        address,\n        uint256[] calldata,\n        uint256[] calldata\n    ) external;\n\n    /// @dev ERC20 Mint\n    function mint(address, uint256) external;\n\n    /// @dev ERC721 Mint\n    function mint(\n        address,\n        uint256,\n        string calldata\n    ) external;\n\n    /// @dev ERC1155 Mint\n    function mint(\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external;\n\n    /// @dev ERC1155 mintBatch\n    function mintBatch(\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external;\n}\n"
    },
    "contracts/ERC721MinterBurnerPauser.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\n// This is adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/presets/ERC721PresetMinterPauserAutoId.sol\n\nimport \"./utils/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\n\ncontract ERC721MinterBurnerPauser is\n    Context,\n    AccessControl,\n    ERC721Burnable,\n    ERC721Pausable,\n    ERC721URIStorage\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    string public baseURI;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE` and `MINTER_ROLE`to the account that\n     * deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory baseURI_\n    ) ERC721(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n\n        _setBaseURI(baseURI_);\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(\n        address to,\n        uint256 tokenId,\n        string memory _data\n    ) public {\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"ERC721MinterBurnerPauser: must have minter role to mint\"\n        );\n\n        _mint(to, tokenId);\n        _setTokenURI(tokenId, _data);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public {\n        require(\n            hasRole(PAUSER_ROLE, _msgSender()),\n            \"ERC721MinterBurnerPauser: must have pauser role to pause\"\n        );\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public {\n        require(\n            hasRole(PAUSER_ROLE, _msgSender()),\n            \"ERC721MinterBurnerPauser: must have pauser role to unpause\"\n        );\n        _unpause();\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override(ERC721, ERC721URIStorage)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override(ERC721, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function _setBaseURI(string memory baseURI_) internal {\n        baseURI = baseURI_;\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    function _burn(uint256 tokenId)\n        internal\n        virtual\n        override(ERC721, ERC721URIStorage)\n    {\n        super._burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/handlers/ERC721HandlerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IDepositExecute.sol\";\nimport {HandlerHelpersUpgradeable as HandlerHelpers} from \"./HandlerHelpersUpgradeable.sol\";\nimport \"../ERC721Safe.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport {ERC165CheckerUpgradeable as ERC165Checker} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\";\n\n/**\n    @title Handles ERC721 deposits and deposit executions.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with the Bridge contract.\n */\ncontract ERC721HandlerUpgradeable is\n    IDepositExecute,\n    HandlerHelpers,\n    ERC721Safe\n{\n    using ERC165Checker for address;\n\n    bytes4 private constant _INTERFACE_ERC721_METADATA = 0x5b5e139f;\n\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    function initialize(address bridgeAddress) public initializer {\n        __HandlerHelpers_init(bridgeAddress);\n    }\n\n    /**\n        @notice A deposit is initiated by making a deposit in the Bridge contract.\n        @param resourceID ResourceID used to find address of token to be used for deposit.\n        @param depositor Address of account making the deposit in the Bridge contract.\n        @param data Consists of {tokenID} padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        tokenID                                     uint256    bytes    0  - 32\n        @notice If the corresponding {tokenAddress} for the parsed {resourceID} supports {_INTERFACE_ERC721_METADATA},\n        then {metaData} will be set according to the {tokenURI} method in the token contract.\n        @dev Depending if the corresponding {tokenAddress} for the parsed {resourceID} is\n        marked true in {_burnList}, deposited tokens will be burned, if not, they will be locked.\n        @return metaData : the deposited token metadata acquired by calling a {tokenURI} method in the token contract.\n     */\n    function deposit(\n        bytes32 resourceID,\n        address depositor,\n        bytes calldata data\n    ) external payable override onlyBridge returns (bytes memory metaData) {\n        require(msg.value == 0, \"msg.value != 0\");\n        uint256 tokenID;\n\n        (tokenID) = abi.decode(data, (uint256));\n\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n        require(\n            _contractWhitelist[tokenAddress],\n            \"provided tokenAddress is not whitelisted\"\n        );\n\n        // Check if the contract supports metadata, fetch it if it does\n        if (tokenAddress.supportsInterface(_INTERFACE_ERC721_METADATA)) {\n            IERC721Metadata erc721 = IERC721Metadata(tokenAddress);\n            metaData = bytes(erc721.tokenURI(tokenID));\n        }\n\n        if (_burnList[tokenAddress]) {\n            burnERC721(tokenAddress, depositor, tokenID);\n        } else {\n            lockERC721(tokenAddress, depositor, address(this), tokenID);\n        }\n    }\n\n    /**\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\n        by a relayer on the deposit's destination chain.\n        @param data Consists of {tokenID}, {resourceID}, {lenDestinationRecipientAddress},\n        {destinationRecipientAddress}, {lenMeta}, and {metaData} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        tokenID                                     uint256    bytes    0  - 32\n        destinationRecipientAddress     length      uint256    bytes    32 - 64\n        destinationRecipientAddress                   bytes    bytes    64 - (64 + len(destinationRecipientAddress))\n        metadata                        length      uint256    bytes    (64 + len(destinationRecipientAddress)) - (64 + len(destinationRecipientAddress) + 32)\n        metadata                                      bytes    bytes    (64 + len(destinationRecipientAddress) + 32) - END\n     */\n    function executeProposal(bytes32 resourceID, bytes calldata data)\n        external\n        override\n        onlyBridge\n    {\n        uint256 tokenID;\n        uint256 lenDestinationRecipientAddress;\n        bytes memory destinationRecipientAddress;\n        uint256 offsetMetaData;\n        uint256 lenMetaData;\n        bytes memory metaData;\n\n        (tokenID, lenDestinationRecipientAddress) = abi.decode(\n            data,\n            (uint256, uint256)\n        );\n        offsetMetaData = 64 + lenDestinationRecipientAddress;\n        destinationRecipientAddress = bytes(data[64:offsetMetaData]);\n        lenMetaData = abi.decode(data[offsetMetaData:], (uint256));\n        metaData = bytes(\n            data[offsetMetaData + 32:offsetMetaData + 32 + lenMetaData]\n        );\n\n        bytes20 recipientAddress;\n\n        assembly {\n            recipientAddress := mload(add(destinationRecipientAddress, 0x20))\n        }\n\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n        require(\n            _contractWhitelist[address(tokenAddress)],\n            \"provided tokenAddress is not whitelisted\"\n        );\n\n        if (_burnList[tokenAddress]) {\n            mintERC721(\n                tokenAddress,\n                address(recipientAddress),\n                tokenID,\n                metaData\n            );\n        } else {\n            releaseERC721(\n                tokenAddress,\n                address(this),\n                address(recipientAddress),\n                tokenID\n            );\n        }\n    }\n\n    /**\n        @notice Used to manually release ERC721 tokens from ERC721Safe.\n        @param data Consists of {tokenAddress}, {recipient}, and {tokenID} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        tokenAddress                           address     bytes  0 - 32\n        recipient                              address     bytes  32 - 64\n        tokenID                                uint        bytes  64 - 96\n     */\n    function withdraw(bytes memory data) external override onlyBridge {\n        address tokenAddress;\n        address recipient;\n        uint256 tokenID;\n\n        (tokenAddress, recipient, tokenID) = abi.decode(\n            data,\n            (address, address, uint256)\n        );\n\n        releaseERC721(tokenAddress, address(this), recipient, tokenID);\n    }\n}\n"
    },
    "contracts/handlers/HandlerHelpersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"../interfaces/IERCHandler.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n    @title Function used across handler contracts.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with the Bridge contract.\n */\ncontract HandlerHelpersUpgradeable is IERCHandler, Initializable {\n    address public _bridgeAddress;\n\n    // resourceID => token contract address\n    mapping(bytes32 => address) public _resourceIDToTokenContractAddress;\n\n    // token contract address => resourceID\n    mapping(address => bytes32) public _tokenContractAddressToResourceID;\n\n    // token contract address => is whitelisted\n    mapping(address => bool) public _contractWhitelist;\n\n    // token contract address => is burnable\n    mapping(address => bool) public _burnList;\n    // native => bool\n    mapping(address => bool) public isNative;\n\n    modifier onlyBridge() {\n        _onlyBridge();\n        _;\n    }\n\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    function __HandlerHelpers_init(address bridgeAddress) internal initializer {\n        _bridgeAddress = bridgeAddress;\n    }\n\n    function _onlyBridge() private view {\n        require(msg.sender == _bridgeAddress, \"sender must be bridge contract\");\n    }\n\n    /**\n        @notice First verifies {_resourceIDToContractAddress}[{resourceID}] and\n        {_contractAddressToResourceID}[{contractAddress}] are not already set,\n        then sets {_resourceIDToContractAddress} with {contractAddress},\n        {_contractAddressToResourceID} with {resourceID},\n        and {_contractWhitelist} to true for {contractAddress}.\n        @param resourceID ResourceID to be used when making deposits.\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\n     */\n    function setResource(bytes32 resourceID, address contractAddress)\n        external\n        override\n        onlyBridge\n    {\n        _setResource(resourceID, contractAddress);\n    }\n\n    function removeResource(bytes32 resourceID, address contractAddress)\n        external\n        override\n        onlyBridge\n    {\n        _removeResource(resourceID, contractAddress);\n    }\n\n    /**\n        @notice First verifies {contractAddress} is whitelisted, then sets {_burnList}[{contractAddress}]\n        to true.\n        @param contractAddress Address of contract to be used when making or executing deposits.\n     */\n    function setBurnable(address contractAddress) external override onlyBridge {\n        _setBurnable(contractAddress);\n    }\n\n    function withdraw(bytes memory data) external virtual override {}\n\n    function withdrawETH(bytes memory data) external virtual override {}\n\n    function _setResource(bytes32 resourceID, address contractAddress)\n        internal\n    {\n        _resourceIDToTokenContractAddress[resourceID] = contractAddress;\n        _tokenContractAddressToResourceID[contractAddress] = resourceID;\n\n        _contractWhitelist[contractAddress] = true;\n    }\n\n    function _removeResource(bytes32 resourceID, address contractAddress)\n        internal\n    {\n        delete _resourceIDToTokenContractAddress[resourceID];\n        delete _tokenContractAddressToResourceID[contractAddress];\n        delete _contractWhitelist[contractAddress];\n    }\n\n    function _setBurnable(address contractAddress) internal {\n        require(\n            _contractWhitelist[contractAddress],\n            \"provided contract is not whitelisted\"\n        );\n        _burnList[contractAddress] = true;\n    }\n\n    function setNative(address nativeAddress, bool _isNative)\n        external\n        override\n        onlyBridge\n    {\n        isNative[nativeAddress] = _isNative;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.2) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165CheckerUpgradeable {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165Upgradeable).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155ReceiverUpgradeable.sol\";\nimport \"../../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\n    function __ERC1155Receiver_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/handlers/GenericHandlerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IGenericHandler.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n    @title Handles generic deposits and deposit executions.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with the Bridge contract.\n */\ncontract GenericHandlerUpgradeable is IGenericHandler, Initializable {\n    address public _bridgeAddress;\n\n    // resourceID => contract address\n    mapping(bytes32 => address) public _resourceIDToContractAddress;\n\n    // contract address => resourceID\n    mapping(address => bytes32) public _contractAddressToResourceID;\n\n    // contract address => deposit function signature\n    mapping(address => bytes4)\n        public _contractAddressToDepositFunctionSignature;\n\n    // contract address => depositor address position offset in the metadata\n    mapping(address => uint256)\n        public _contractAddressToDepositFunctionDepositorOffset;\n\n    // contract address => execute proposal function signature\n    mapping(address => bytes4)\n        public _contractAddressToExecuteFunctionSignature;\n\n    // token contract address => is whitelisted\n    mapping(address => bool) public _contractWhitelist;\n\n    modifier onlyBridge() {\n        _onlyBridge();\n        _;\n    }\n\n    function _onlyBridge() private view {\n        require(msg.sender == _bridgeAddress, \"sender must be bridge contract\");\n    }\n\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    function initialize(address bridgeAddress) public initializer {\n        _bridgeAddress = bridgeAddress;\n    }\n\n    /**\n        @notice First verifies {_resourceIDToContractAddress}[{resourceID}] and\n        {_contractAddressToResourceID}[{contractAddress}] are not already set,\n        then sets {_resourceIDToContractAddress} with {contractAddress},\n        {_contractAddressToResourceID} with {resourceID},\n        {_contractAddressToDepositFunctionSignature} with {depositFunctionSig},\n        {_contractAddressToDepositFunctionDepositorOffset} with {depositFunctionDepositorOffset},\n        {_contractAddressToExecuteFunctionSignature} with {executeFunctionSig},\n        and {_contractWhitelist} to true for {contractAddress}.\n        @param resourceID ResourceID to be used when making deposits.\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\n        @param depositFunctionDepositorOffset Depositor address position offset in the metadata, in bytes.\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\n     */\n    function setResource(\n        bytes32 resourceID,\n        address contractAddress,\n        bytes4 depositFunctionSig,\n        uint256 depositFunctionDepositorOffset,\n        bytes4 executeFunctionSig\n    ) external override onlyBridge {\n        _setResource(\n            resourceID,\n            contractAddress,\n            depositFunctionSig,\n            depositFunctionDepositorOffset,\n            executeFunctionSig\n        );\n    }\n\n    function removeResource(bytes32 resourceID, address contractAddress)\n        external\n        override\n        onlyBridge\n    {\n        _removeResource(resourceID, contractAddress);\n    }\n\n    /**\n        @notice A deposit is initiated by making a deposit in the Bridge contract.\n        @param resourceID ResourceID used to find address of contract to be used for deposit.\n        @param depositor Address of the account making deposit in the Bridge contract.\n        @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        len(data)                              uint256     bytes  0  - 32\n        data                                   bytes       bytes  64 - END\n        @notice {contractAddress} is required to be whitelisted\n        @notice If {_contractAddressToDepositFunctionSignature}[{contractAddress}] is set,\n        {metaData} is expected to consist of needed function arguments.\n        @return the raw bytes returned from the call to {contractAddress}.\n     */\n    function deposit(\n        bytes32 resourceID,\n        address depositor,\n        bytes calldata data\n    ) external onlyBridge returns (bytes memory) {\n        uint256 lenMetadata;\n        bytes memory metadata;\n\n        lenMetadata = abi.decode(data, (uint256));\n        metadata = bytes(data[32:32 + lenMetadata]);\n\n        address contractAddress = _resourceIDToContractAddress[resourceID];\n        uint256 depositorOffset = _contractAddressToDepositFunctionDepositorOffset[\n                contractAddress\n            ];\n        if (depositorOffset > 0) {\n            uint256 metadataDepositor;\n            // Skipping 32 bytes of length prefix and depositorOffset bytes.\n            assembly {\n                metadataDepositor := mload(\n                    add(add(metadata, 32), depositorOffset)\n                )\n            }\n            // metadataDepositor contains 0xdepositorAddressdepositorAddressdeposite************************\n            // Shift it 12 bytes right:   0x000000000000000000000000depositorAddressdepositorAddressdeposite\n            require(\n                depositor == address(uint160(metadataDepositor >> 96)),\n                \"incorrect depositor in the data\"\n            );\n        }\n\n        require(\n            _contractWhitelist[contractAddress],\n            \"provided contractAddress is not whitelisted\"\n        );\n\n        bytes4 sig = _contractAddressToDepositFunctionSignature[\n            contractAddress\n        ];\n        if (sig != bytes4(0)) {\n            bytes memory callData = abi.encodePacked(sig, metadata);\n            (bool success, bytes memory handlerResponse) = contractAddress.call(\n                callData\n            );\n            require(success, \"call to contractAddress failed\");\n            return handlerResponse;\n        }\n    }\n\n    /**\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\n        @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.\n        @notice Data passed into the function should be constructed as follows:\n        len(data)                              uint256     bytes  0  - 32\n        data                                   bytes       bytes  32 - END\n        @notice {contractAddress} is required to be whitelisted\n        @notice If {_contractAddressToExecuteFunctionSignature}[{contractAddress}] is set,\n        {metaData} is expected to consist of needed function arguments.\n     */\n    function executeProposal(bytes32 resourceID, bytes calldata data)\n        external\n        onlyBridge\n    {\n        uint256 lenMetadata;\n        bytes memory metaData;\n\n        lenMetadata = abi.decode(data, (uint256));\n        metaData = bytes(data[32:32 + lenMetadata]);\n\n        address contractAddress = _resourceIDToContractAddress[resourceID];\n        require(\n            _contractWhitelist[contractAddress],\n            \"provided contractAddress is not whitelisted\"\n        );\n\n        bytes4 sig = _contractAddressToExecuteFunctionSignature[\n            contractAddress\n        ];\n        if (sig != bytes4(0)) {\n            bytes memory callData = abi.encodePacked(sig, metaData);\n            (bool success, ) = contractAddress.call(callData);\n            require(success, \"call to contractAddress failed\");\n        }\n    }\n\n    function _setResource(\n        bytes32 resourceID,\n        address contractAddress,\n        bytes4 depositFunctionSig,\n        uint256 depositFunctionDepositorOffset,\n        bytes4 executeFunctionSig\n    ) internal {\n        require(\n            _resourceIDToContractAddress[resourceID] == address(0),\n            \"_resourceIDToContractAddress[resourceID] != address(0)\"\n        );\n        _resourceIDToContractAddress[resourceID] = contractAddress;\n        require(\n            _contractAddressToResourceID[contractAddress] == bytes32(0),\n            \"_contractAddressToResourceID[contractAddress] != bytes32(0)\"\n        );\n        _contractAddressToResourceID[contractAddress] = resourceID;\n\n        _contractAddressToDepositFunctionSignature[\n            contractAddress\n        ] = depositFunctionSig;\n        _contractAddressToDepositFunctionDepositorOffset[\n            contractAddress\n        ] = depositFunctionDepositorOffset;\n        _contractAddressToExecuteFunctionSignature[\n            contractAddress\n        ] = executeFunctionSig;\n\n        _contractWhitelist[contractAddress] = true;\n    }\n\n    function _removeResource(bytes32 resourceID, address contractAddress)\n        internal\n    {\n        delete _resourceIDToContractAddress[resourceID];\n        delete _contractAddressToResourceID[contractAddress];\n        delete _contractAddressToDepositFunctionSignature[contractAddress];\n        delete _contractAddressToDepositFunctionDepositorOffset[\n            contractAddress\n        ];\n        delete _contractAddressToExecuteFunctionSignature[contractAddress];\n        delete _contractWhitelist[contractAddress];\n    }\n}\n"
    },
    "contracts/handlers/GenericHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IGenericHandler.sol\";\n\n/**\n    @title Handles generic deposits and deposit executions.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with the Bridge contract.\n */\ncontract GenericHandler is IGenericHandler {\n    address public immutable _bridgeAddress;\n\n    // resourceID => contract address\n    mapping(bytes32 => address) public _resourceIDToContractAddress;\n\n    // contract address => resourceID\n    mapping(address => bytes32) public _contractAddressToResourceID;\n\n    // contract address => deposit function signature\n    mapping(address => bytes4)\n        public _contractAddressToDepositFunctionSignature;\n\n    // contract address => depositor address position offset in the metadata\n    mapping(address => uint256)\n        public _contractAddressToDepositFunctionDepositorOffset;\n\n    // contract address => execute proposal function signature\n    mapping(address => bytes4)\n        public _contractAddressToExecuteFunctionSignature;\n\n    // token contract address => is whitelisted\n    mapping(address => bool) public _contractWhitelist;\n\n    modifier onlyBridge() {\n        _onlyBridge();\n        _;\n    }\n\n    function _onlyBridge() private view {\n        require(msg.sender == _bridgeAddress, \"sender must be bridge contract\");\n    }\n\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    constructor(address bridgeAddress) {\n        _bridgeAddress = bridgeAddress;\n    }\n\n    /**\n        @notice First verifies {_resourceIDToContractAddress}[{resourceID}] and\n        {_contractAddressToResourceID}[{contractAddress}] are not already set,\n        then sets {_resourceIDToContractAddress} with {contractAddress},\n        {_contractAddressToResourceID} with {resourceID},\n        {_contractAddressToDepositFunctionSignature} with {depositFunctionSig},\n        {_contractAddressToDepositFunctionDepositorOffset} with {depositFunctionDepositorOffset},\n        {_contractAddressToExecuteFunctionSignature} with {executeFunctionSig},\n        and {_contractWhitelist} to true for {contractAddress}.\n        @param resourceID ResourceID to be used when making deposits.\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\n        @param depositFunctionDepositorOffset Depositor address position offset in the metadata, in bytes.\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\n     */\n    function setResource(\n        bytes32 resourceID,\n        address contractAddress,\n        bytes4 depositFunctionSig,\n        uint256 depositFunctionDepositorOffset,\n        bytes4 executeFunctionSig\n    ) external override onlyBridge {\n        _setResource(\n            resourceID,\n            contractAddress,\n            depositFunctionSig,\n            depositFunctionDepositorOffset,\n            executeFunctionSig\n        );\n    }\n\n    function removeResource(bytes32 resourceID, address contractAddress)\n        external\n        override\n        onlyBridge\n    {\n        _removeResource(resourceID, contractAddress);\n    }\n\n    /**\n        @notice A deposit is initiated by making a deposit in the Bridge contract.\n        @param resourceID ResourceID used to find address of contract to be used for deposit.\n        @param depositor Address of the account making deposit in the Bridge contract.\n        @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        len(data)                              uint256     bytes  0  - 32\n        data                                   bytes       bytes  64 - END\n        @notice {contractAddress} is required to be whitelisted\n        @notice If {_contractAddressToDepositFunctionSignature}[{contractAddress}] is set,\n        {metaData} is expected to consist of needed function arguments.\n        @return the raw bytes returned from the call to {contractAddress}.\n     */\n    function deposit(\n        bytes32 resourceID,\n        address depositor,\n        bytes calldata data\n    ) external onlyBridge returns (bytes memory) {\n        uint256 lenMetadata;\n        bytes memory metadata;\n\n        lenMetadata = abi.decode(data, (uint256));\n        metadata = bytes(data[32:32 + lenMetadata]);\n\n        address contractAddress = _resourceIDToContractAddress[resourceID];\n        uint256 depositorOffset = _contractAddressToDepositFunctionDepositorOffset[\n                contractAddress\n            ];\n        if (depositorOffset > 0) {\n            uint256 metadataDepositor;\n            // Skipping 32 bytes of length prefix and depositorOffset bytes.\n            assembly {\n                metadataDepositor := mload(\n                    add(add(metadata, 32), depositorOffset)\n                )\n            }\n            // metadataDepositor contains 0xdepositorAddressdepositorAddressdeposite************************\n            // Shift it 12 bytes right:   0x000000000000000000000000depositorAddressdepositorAddressdeposite\n            require(\n                depositor == address(uint160(metadataDepositor >> 96)),\n                \"incorrect depositor in the data\"\n            );\n        }\n\n        require(\n            _contractWhitelist[contractAddress],\n            \"provided contractAddress is not whitelisted\"\n        );\n\n        bytes4 sig = _contractAddressToDepositFunctionSignature[\n            contractAddress\n        ];\n        if (sig != bytes4(0)) {\n            bytes memory callData = abi.encodePacked(sig, metadata);\n            (bool success, bytes memory handlerResponse) = contractAddress.call(\n                callData\n            );\n            require(success, \"call to contractAddress failed\");\n            return handlerResponse;\n        }\n    }\n\n    /**\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\n        @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.\n        @notice Data passed into the function should be constructed as follows:\n        len(data)                              uint256     bytes  0  - 32\n        data                                   bytes       bytes  32 - END\n        @notice {contractAddress} is required to be whitelisted\n        @notice If {_contractAddressToExecuteFunctionSignature}[{contractAddress}] is set,\n        {metaData} is expected to consist of needed function arguments.\n     */\n    function executeProposal(bytes32 resourceID, bytes calldata data)\n        external\n        onlyBridge\n    {\n        uint256 lenMetadata;\n        bytes memory metaData;\n\n        lenMetadata = abi.decode(data, (uint256));\n        metaData = bytes(data[32:32 + lenMetadata]);\n\n        address contractAddress = _resourceIDToContractAddress[resourceID];\n        require(\n            _contractWhitelist[contractAddress],\n            \"provided contractAddress is not whitelisted\"\n        );\n\n        bytes4 sig = _contractAddressToExecuteFunctionSignature[\n            contractAddress\n        ];\n        if (sig != bytes4(0)) {\n            bytes memory callData = abi.encodePacked(sig, metaData);\n            (bool success, ) = contractAddress.call(callData);\n            require(success, \"call to contractAddress failed\");\n        }\n    }\n\n    function _setResource(\n        bytes32 resourceID,\n        address contractAddress,\n        bytes4 depositFunctionSig,\n        uint256 depositFunctionDepositorOffset,\n        bytes4 executeFunctionSig\n    ) internal {\n        require(\n            _resourceIDToContractAddress[resourceID] == address(0),\n            \"_resourceIDToContractAddress[resourceID] != address(0)\"\n        );\n        _resourceIDToContractAddress[resourceID] = contractAddress;\n        require(\n            _contractAddressToResourceID[contractAddress] == bytes32(0),\n            \"_contractAddressToResourceID[contractAddress] != bytes32(0)\"\n        );\n        _contractAddressToResourceID[contractAddress] = resourceID;\n\n        _contractAddressToDepositFunctionSignature[\n            contractAddress\n        ] = depositFunctionSig;\n        _contractAddressToDepositFunctionDepositorOffset[\n            contractAddress\n        ] = depositFunctionDepositorOffset;\n        _contractAddressToExecuteFunctionSignature[\n            contractAddress\n        ] = executeFunctionSig;\n\n        _contractWhitelist[contractAddress] = true;\n    }\n\n    function _removeResource(bytes32 resourceID, address contractAddress)\n        internal\n    {\n        delete _resourceIDToContractAddress[resourceID];\n        delete _contractAddressToResourceID[contractAddress];\n        delete _contractAddressToDepositFunctionSignature[contractAddress];\n        delete _contractAddressToDepositFunctionDepositorOffset[\n            contractAddress\n        ];\n        delete _contractAddressToExecuteFunctionSignature[contractAddress];\n        delete _contractWhitelist[contractAddress];\n    }\n}\n"
    },
    "contracts/BridgeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport {AccessControlUpgradeable as AccessControl} from \"./utils/AccessControlUpgradeable.sol\";\nimport \"./utils/PausableUpgradeable.sol\";\nimport \"./utils/SafeMath.sol\";\nimport \"./utils/SafeCast.sol\";\nimport \"./interfaces/IDepositExecute.sol\";\nimport \"./interfaces/IERCHandler.sol\";\nimport \"./interfaces/IGenericHandler.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./interfaces/IBridge.sol\";\nimport \"./interfaces/IFeeHandler.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\n\n/**\n    @title Facilitates deposits, creation and voting of deposit proposals, and deposit executions.\n    @author ChainSafe Systems.\n */\ncontract BridgeUpgradeable is\n    EIP712Upgradeable,\n    PausableUpgradeable,\n    AccessControl,\n    SafeMath,\n    IBridge\n{\n    using SafeCast for *;\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\n            \"PermitBridge(uint8 domainID,uint64 depositNonce,bytes32 resourceID,bytes data)\"\n        );\n\n    // Limit relayers number because proposal can fit only so much votes\n    uint256 public constant MAX_RELAYERS = 200;\n\n    uint8 public _domainID;\n    uint8 public _relayerThreshold;\n    uint40 public _expiry;\n\n    IFeeHandler public _feeHandler; // scrap\n\n    // destinationDomainID => number of deposits\n    mapping(uint8 => uint64) public _depositCounts;\n    // resourceID => handler address\n    mapping(bytes32 => address) public _resourceIDToHandlerAddress;\n    // forwarder address => is Valid\n    mapping(address => bool) public isValidForwarder;\n    // destinationDomainID + depositNonce => dataHash => Proposal\n    mapping(uint72 => mapping(bytes32 => Proposal)) private _proposals;\n\n    // fees\n    uint256 public _fee_;\n    uint256 public _feeReserve;\n    mapping(uint8 => uint256) public specialFee;\n    mapping(uint8 => bool) public special;\n\n    event RelayerThresholdChanged(uint256 newThreshold);\n    event RelayerAdded(address relayer);\n    event RelayerRemoved(address relayer);\n    event FeeHandlerChanged(address newFeeHandler);\n    event Deposit(\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        uint64 depositNonce,\n        address indexed user,\n        bytes data,\n        bytes handlerResponse\n    );\n    event ProposalEvent(\n        uint8 originDomainID,\n        uint64 depositNonce,\n        ProposalStatus status,\n        bytes32 dataHash\n    );\n    event ProposalVote(\n        uint8 originDomainID,\n        uint64 depositNonce,\n        ProposalStatus status,\n        bytes32 dataHash\n    );\n    event FailedHandlerExecution(bytes lowLevelData);\n\n    bytes32 public constant RELAYER_ROLE = keccak256(\"RELAYER_ROLE\");\n\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n    uint256 private _status;\n\n    modifier onlyAdmin() {\n        _onlyAdmin();\n        _;\n    }\n\n    modifier onlyAdminOrRelayer() {\n        _onlyAdminOrRelayer();\n        _;\n    }\n\n    modifier onlyRelayers() {\n        _onlyRelayers();\n        _;\n    }\n\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n        _;\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    function _fee() external view returns (uint256) {\n        return _fee_;\n    }\n\n    function _chainId() external view returns (uint256) {\n        return block.chainid;\n    }\n\n    function _onlyAdminOrRelayer() private view {\n        address sender = _msgSender();\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, sender) ||\n                hasRole(RELAYER_ROLE, sender),\n            \"sender is not relayer or admin\"\n        );\n    }\n\n    function _onlyAdmin() private view {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\n            \"sender doesn't have admin role\"\n        );\n    }\n\n    function _onlyRelayers() private view {\n        require(\n            hasRole(RELAYER_ROLE, _msgSender()),\n            \"sender doesn't have relayer role\"\n        );\n    }\n\n    function _relayerBit(address relayer) private view returns (uint256) {\n        return\n            uint256(1) <<\n            sub(AccessControl.getRoleMemberIndex(RELAYER_ROLE, relayer), 1);\n    }\n\n    function _hasVoted(Proposal memory proposal, address relayer)\n        private\n        view\n        returns (bool)\n    {\n        return (_relayerBit(relayer) & uint256(proposal._yesVotes)) > 0;\n    }\n\n    function _msgSender() internal view override returns (address) {\n        address signer = msg.sender;\n        if (msg.data.length >= 20 && isValidForwarder[signer]) {\n            assembly {\n                signer := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        }\n        return signer;\n    }\n\n    /**\n        @notice Initializes Bridge, creates and grants {_msgSender()} the admin role,\n        creates and grants {initialRelayers} the relayer role.\n        @param domainID ID of chain the Bridge contract exists on.\n        @param initialRelayers Addresses that should be initially granted the relayer role.\n        @param initialRelayerThreshold Number of votes needed for a deposit proposal to be considered passed.\n     */\n    function initialize(\n        uint8 domainID,\n        address[] memory initialRelayers,\n        uint256 initialRelayerThreshold,\n        uint256 expiry,\n        address admin\n    ) public initializer {\n        __Pausable_init();\n        __EIP712_init(\"PermitBridge\", \"1.0\");\n        _domainID = domainID;\n        _relayerThreshold = initialRelayerThreshold.toUint8();\n        _expiry = expiry.toUint40();\n\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n\n        for (uint256 i; i < initialRelayers.length; i++) {\n            grantRole(RELAYER_ROLE, initialRelayers[i]);\n        }\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n        @notice Returns true if {relayer} has voted on {destNonce} {dataHash} proposal.\n        @notice Naming left unchanged for backward compatibility.\n        @param destNonce destinationDomainID + depositNonce of the proposal.\n        @param dataHash Hash of data to be provided when deposit proposal is executed.\n        @param relayer Address to check.\n     */\n    function _hasVotedOnProposal(\n        uint72 destNonce,\n        bytes32 dataHash,\n        address relayer\n    ) public view returns (bool) {\n        return _hasVoted(_proposals[destNonce][dataHash], relayer);\n    }\n\n    /**\n        @notice Returns true if {relayer} has the relayer role.\n        @param relayer Address to check.\n     */\n    function isRelayer(address relayer) external view returns (bool) {\n        return hasRole(RELAYER_ROLE, relayer);\n    }\n\n    /**\n        @notice Removes admin role from {_msgSender()} and grants it to {newAdmin}.\n        @notice Only callable by an address that currently has the admin role.\n        @param newAdmin Address that admin role will be granted to.\n     */\n    function renounceAdmin(address newAdmin) external onlyAdmin {\n        address sender = _msgSender();\n        require(sender != newAdmin, \"Cannot renounce oneself\");\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        renounceRole(DEFAULT_ADMIN_ROLE, sender);\n    }\n\n    /**\n        @notice Pauses deposits, proposal creation and voting, and deposit executions.\n        @notice Only callable by an address that currently has the admin role.\n     */\n    function adminPauseTransfers() external onlyAdmin {\n        _pause(_msgSender());\n    }\n\n    /**\n        @notice Unpauses deposits, proposal creation and voting, and deposit executions.\n        @notice Only callable by an address that currently has the admin role.\n     */\n    function adminUnpauseTransfers() external onlyAdmin {\n        _unpause(_msgSender());\n    }\n\n    /**\n        @notice Modifies the number of votes required for a proposal to be considered passed.\n        @notice Only callable by an address that currently has the admin role.\n        @param newThreshold Value {_relayerThreshold} will be changed to.\n        @notice Emits {RelayerThresholdChanged} event.\n     */\n    function adminChangeRelayerThreshold(uint256 newThreshold)\n        external\n        onlyAdmin\n    {\n        _relayerThreshold = newThreshold.toUint8();\n        emit RelayerThresholdChanged(newThreshold);\n    }\n\n    /**\n        @notice Grants {relayerAddress} the relayer role.\n        @notice Only callable by an address that currently has the admin role, which is\n                checked in grantRole().\n        @param relayerAddress Address of relayer to be added.\n        @notice Emits {RelayerAdded} event.\n     */\n    function adminAddRelayer(address relayerAddress) external onlyAdmin {\n        require(_totalRelayers() < MAX_RELAYERS, \"relayers limit reached\");\n        grantRole(RELAYER_ROLE, relayerAddress);\n        emit RelayerAdded(relayerAddress);\n    }\n\n    /**\n        @notice Removes relayer role for {relayerAddress}.\n        @notice Only callable by an address that currently has the admin role, which is\n                checked in revokeRole().\n        @param relayerAddress Address of relayer to be removed.\n        @notice Emits {RelayerRemoved} event.\n     */\n    function adminRemoveRelayer(address relayerAddress)\n        external\n        onlyAdmin\n        whenPaused\n    {\n        revokeRole(RELAYER_ROLE, relayerAddress);\n        emit RelayerRemoved(relayerAddress);\n    }\n\n    function renounceRole(bytes32 role, address account)\n        public\n        override\n        whenPaused\n    {\n        super.renounceRole(role, account);\n    }\n\n    /**\n        @notice Sets a new resource for handler contracts that use the IERCHandler interface,\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\n        @notice Only callable by an address that currently has the admin role.\n        @param handlerAddress Address of handler resource will be set for.\n        @param resourceID ResourceID to be used when making deposits.\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\n     */\n    function adminSetResource(\n        address handlerAddress,\n        bytes32 resourceID,\n        address tokenAddress,\n        bool isNative\n    ) external onlyAdmin {\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.setResource(resourceID, tokenAddress);\n        if (isNative) {\n            handler.setNative(tokenAddress, true);\n        }\n    }\n\n    /**\n        @notice Sets a new resource for handler contracts that use the IGenericHandler interface,\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\n        @notice Only callable by an address that currently has the admin role.\n        @param handlerAddress Address of handler resource will be set for.\n        @param resourceID ResourceID to be used when making deposits.\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\n        @param depositFunctionDepositorOffset Depositor address position offset in the metadata, in bytes.\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\n     */\n    function adminSetGenericResource(\n        address handlerAddress,\n        bytes32 resourceID,\n        address contractAddress,\n        bytes4 depositFunctionSig,\n        uint256 depositFunctionDepositorOffset,\n        bytes4 executeFunctionSig\n    ) external onlyAdmin {\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\n        IGenericHandler handler = IGenericHandler(handlerAddress);\n        handler.setResource(\n            resourceID,\n            contractAddress,\n            depositFunctionSig,\n            depositFunctionDepositorOffset,\n            executeFunctionSig\n        );\n    }\n\n    function adminRemoveResourceId(\n        bytes32 resourceID,\n        address tokenAddress,\n        bool isNative\n    ) external onlyAdmin {\n        address handlerAddress = _resourceIDToHandlerAddress[resourceID];\n        delete _resourceIDToHandlerAddress[resourceID];\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.removeResource(resourceID, tokenAddress);\n        if (isNative) {\n            handler.setNative(tokenAddress, false);\n        }\n    }\n\n    function adminRemoveGenericResource(\n        bytes32 resourceID,\n        address contractAddress\n    ) external onlyAdmin {\n        address handlerAddress = _resourceIDToHandlerAddress[resourceID];\n        delete _resourceIDToHandlerAddress[resourceID];\n        IGenericHandler handler = IGenericHandler(handlerAddress);\n        handler.removeResource(resourceID, contractAddress);\n    }\n\n    /**\n        @notice Sets a resource as burnable for handler contracts that use the IERCHandler interface.\n        @notice Only callable by an address that currently has the admin role.\n        @param handlerAddress Address of handler resource will be set for.\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\n     */\n    function adminSetBurnable(address handlerAddress, address tokenAddress)\n        external\n        onlyAdmin\n    {\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.setBurnable(tokenAddress);\n    }\n\n    /**\n        @notice Sets the nonce for the specific domainID.\n        @notice Only callable by an address that currently has the admin role.\n        @param domainID Domain ID for increasing nonce.\n        @param nonce The nonce value to be set.\n     */\n    function adminSetDepositNonce(uint8 domainID, uint64 nonce)\n        external\n        onlyAdmin\n    {\n        require(\n            nonce > _depositCounts[domainID],\n            \"Does not allow decrements of the nonce\"\n        );\n        _depositCounts[domainID] = nonce;\n    }\n\n    /**\n        @notice Set a forwarder to be used.\n        @notice Only callable by an address that currently has the admin role.\n        @param forwarder Forwarder address to be added.\n        @param valid Decision for the specific forwarder.\n     */\n    function adminSetForwarder(address forwarder, bool valid)\n        external\n        onlyAdmin\n    {\n        isValidForwarder[forwarder] = valid;\n    }\n\n    function adminSetDomainId(uint8 domainID) external onlyAdmin {\n        _domainID = domainID;\n    }\n\n    function adminSetSpecialFee(uint8 destinationDomainID, uint256 _specialFee)\n        public\n        onlyAdmin\n    {\n        special[destinationDomainID] = true;\n        specialFee[destinationDomainID] = _specialFee;\n    }\n\n    function adminRemoveSpecialFee(uint8 destinationDomainID) public onlyAdmin {\n        delete special[destinationDomainID];\n        delete specialFee[destinationDomainID];\n    }\n\n    event FeeChanged(uint256 newFee);\n\n    /**\n        @notice Sets new value of the fee.\n        @notice Only callable by admin.\n        @param newFee Value {_fee} will be updated to.\n     */\n    function adminSetFee(uint256 newFee) external onlyAdmin {\n        require(_fee_ != newFee, \"Current fee is equal to new fee\");\n        _fee_ = newFee;\n        emit FeeChanged(newFee);\n    }\n\n    function _getFee(uint8 destinationDomainID)\n        internal\n        view\n        returns (uint256)\n    {\n        if (special[destinationDomainID]) {\n            return specialFee[destinationDomainID];\n        } else {\n            return _fee_;\n        }\n    }\n\n    function getFee(uint8 destinationDomainID) external view returns (uint256) {\n        return _getFee(destinationDomainID);\n    }\n\n    /**\n        @notice Returns a proposal.\n        @param originDomainID Chain ID deposit originated from.\n        @param depositNonce ID of proposal generated by proposal's origin Bridge contract.\n        @param resourceID ResourceID used to find address of handler to be used for deposit.\n        @return Proposal which consists of:\n        - _dataHash Hash of data to be provided when deposit proposal is executed.\n        - _yesVotes Number of votes in favor of proposal.\n        - _noVotes Number of votes against proposal.\n        - _status Current status of proposal.\n     */\n    function getProposal(\n        uint8 originDomainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data\n    ) external view returns (Proposal memory) {\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        bytes32 dataHash = keccak256(\n            abi.encodePacked(resourceID, handler, data)\n        );\n        uint72 nonceAndID = (uint72(depositNonce) << 8) |\n            uint72(originDomainID);\n        return _proposals[nonceAndID][dataHash];\n    }\n\n    /**\n        @notice Returns total relayers number.\n        @notice Added for backwards compatibility.\n     */\n    function _totalRelayers() public view returns (uint256) {\n        return AccessControl.getRoleMemberCount(RELAYER_ROLE);\n    }\n\n    function adminChangeExpiry(uint256 expiry) external onlyAdmin {\n        _expiry = expiry.toUint40();\n    }\n\n    /**\n        @notice Used to manually withdraw funds from ERC safes.\n        @param handlerAddress Address of handler to withdraw from.\n        @param data ABI-encoded withdrawal params relevant to the specified handler.\n     */\n    function adminWithdraw(address handlerAddress, bytes memory data)\n        external\n        onlyAdmin\n    {\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.withdraw(data);\n    }\n\n    function adminWithdrawETH(address handlerAddress, bytes memory data)\n        external\n        onlyAdmin\n    {\n        IERCHandler handler = IERCHandler(handlerAddress);\n        handler.withdrawETH(data);\n    }\n\n    event FeeDistributed(\n        address tokenAddress,\n        address recipient,\n        uint256 amount\n    );\n\n    function transferFee(\n        address payable[] calldata addrs,\n        uint256[] calldata amounts\n    ) external onlyAdmin {\n        require(\n            addrs.length == amounts.length,\n            \"addrs[], amounts[]: diff length\"\n        );\n        for (uint256 i = 0; i < addrs.length; i++) {\n            (bool success, ) = addrs[i].call{value: amounts[i]}(\"\");\n            require(success, \"Fee ether transfer failed\");\n            emit FeeDistributed(address(0), addrs[i], amounts[i]);\n        }\n    }\n\n    error IncorrectFeeSupplied(uint256 msgValue, uint256 fee);\n    error ResourceIDNotMappedToHandler();\n\n    /**\n        @notice Initiates a transfer using a specified handler contract.\n        @notice Only callable when Bridge is not paused.\n        @param destinationDomainID ID of chain deposit will be bridged to.\n        @param resourceID ResourceID used to find address of handler to be used for deposit.\n        @param depositData Additional data to be passed to specified handler.\n        @param feeData Additional data to be passed to the fee handler.\n        @notice Emits {Deposit} event with all necessary parameters and a handler response.\n        - ERC20Handler: responds with an empty data.\n        - ERC721Handler: responds with the deposited token metadata acquired by calling a tokenURI method in the token contract.\n        - GenericHandler: responds with the raw bytes returned from the call to the target contract.\n     */\n    function deposit(\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) external payable whenNotPaused {\n        address sender = _msgSender();\n        _deposit(sender, destinationDomainID, resourceID, depositData, feeData);\n    }\n\n    function _deposit(\n        address sender,\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) private {\n        uint256 value = msg.value;\n        uint256 fee = _getFee(destinationDomainID);\n        value -= fee;\n        _feeReserve += fee;\n\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        if (handler == address(0)) {\n            revert ResourceIDNotMappedToHandler();\n        }\n\n        uint64 depositNonce = ++_depositCounts[destinationDomainID];\n        bytes memory handlerResponse = IDepositExecute(handler).deposit{\n            value: value\n        }(resourceID, sender, depositData);\n\n        emit Deposit(\n            destinationDomainID,\n            resourceID,\n            depositNonce,\n            sender,\n            depositData,\n            handlerResponse\n        );\n    }\n\n    error InvalidSignature(address signer, uint256 index);\n\n    function checkSignature(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data,\n        bytes calldata signature\n    ) external view returns (bool) {\n        bytes32 structHash = keccak256(\n            abi.encode(\n                PERMIT_TYPEHASH,\n                domainID,\n                depositNonce,\n                resourceID,\n                keccak256(data)\n            )\n        );\n        bytes32 hash = _hashTypedDataV4(structHash);\n        address sender = ECDSAUpgradeable.recover(hash, signature);\n        return hasRole(RELAYER_ROLE, sender);\n    }\n\n    function voteProposals(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data,\n        bytes[] memory signatures\n    ) external whenNotPaused nonReentrant{\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        require(handler != address(0), \"no handler for resourceID\");\n        bytes32 dataHash = keccak256(\n            abi.encodePacked(resourceID, handler, data)\n        );\n        uint256 length = signatures.length;\n        require(\n            length >= _relayerThreshold,\n            \"Signatures length >= relayerThreshold\"\n        );\n        Proposal memory proposal = Proposal({\n            _status: ProposalStatus.Active,\n            _yesVotes: 0,\n            _yesVotesTotal: 0,\n            _proposedBlock: uint40(block.number) // Overflow is desired.\n        });\n\n        bytes32 hash = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    PERMIT_TYPEHASH,\n                    domainID,\n                    depositNonce,\n                    resourceID,\n                    keccak256(data)\n                )\n            )\n        );\n\n        for (uint256 i; i < length; ++i) {\n            address signer = ECDSAUpgradeable.recover(hash, signatures[i]);\n            if (!hasRole(RELAYER_ROLE, signer)) {\n                revert InvalidSignature(signer, i);\n            }\n\n            require(!_hasVoted(proposal, signer), \"relayer already voted\");\n            proposal._yesVotes = (proposal._yesVotes | _relayerBit(signer))\n                .toUint200();\n            proposal._yesVotesTotal++; // TODO: check if bit counting is cheaper.\n        }\n        proposal._status = ProposalStatus.Executed;\n        IDepositExecute depositHandler = IDepositExecute(handler);\n        depositHandler.executeProposal(resourceID, data);\n        emit ProposalEvent(\n            domainID,\n            depositNonce,\n            ProposalStatus.Executed,\n            dataHash\n        );\n\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\n        require(\n            uint256(_proposals[nonceAndID][dataHash]._status) <= 1,\n            \"proposal already executed/cancelled\"\n        );\n        _proposals[nonceAndID][dataHash] = proposal;\n    }\n\n    /**\n        @notice When called, {_msgSender()} will be marked as voting in favor of proposal.\n        @notice Only callable by relayers when Bridge is not paused.\n        @param domainID ID of chain deposit originated from.\n        @param depositNonce ID of deposited generated by origin Bridge contract.\n        @param data Data originally provided when deposit was made.\n        @notice Proposal must not have already been passed or executed.\n        @notice {_msgSender()} must not have already voted on proposal.\n        @notice Emits {ProposalEvent} event with status indicating the proposal status.\n        @notice Emits {ProposalVote} event.\n     */\n    function voteProposal(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data\n    ) external onlyRelayers whenNotPaused nonReentrant {\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\n        bytes32 dataHash = keccak256(\n            abi.encodePacked(resourceID, handler, data)\n        );\n        Proposal memory proposal = _proposals[nonceAndID][dataHash];\n\n        require(\n            _resourceIDToHandlerAddress[resourceID] != address(0),\n            \"no handler for resourceID\"\n        );\n\n        if (proposal._status == ProposalStatus.Passed) {\n            _executeProposal(domainID, depositNonce, data, resourceID, true);\n            return;\n        }\n\n        address sender = _msgSender();\n\n        require(\n            uint256(proposal._status) <= 1,\n            \"proposal already executed/cancelled\"\n        );\n        require(!_hasVoted(proposal, sender), \"relayer already voted\");\n\n        if (proposal._status == ProposalStatus.Inactive) {\n            proposal = Proposal({\n                _status: ProposalStatus.Active,\n                _yesVotes: 0,\n                _yesVotesTotal: 0,\n                _proposedBlock: uint40(block.number) // Overflow is desired.\n            });\n\n            emit ProposalEvent(\n                domainID,\n                depositNonce,\n                ProposalStatus.Active,\n                dataHash\n            );\n        } else if (\n            uint40(sub(block.number, proposal._proposedBlock)) > _expiry\n        ) {\n            // if the number of blocks that has passed since this proposal was\n            // submitted exceeds the expiry threshold set, cancel the proposal\n            proposal._status = ProposalStatus.Cancelled;\n\n            emit ProposalEvent(\n                domainID,\n                depositNonce,\n                ProposalStatus.Cancelled,\n                dataHash\n            );\n        }\n\n        if (proposal._status != ProposalStatus.Cancelled) {\n            proposal._yesVotes = (proposal._yesVotes | _relayerBit(sender))\n                .toUint200();\n            proposal._yesVotesTotal++; // TODO: check if bit counting is cheaper.\n\n            emit ProposalVote(\n                domainID,\n                depositNonce,\n                proposal._status,\n                dataHash\n            );\n\n            // Finalize if _relayerThreshold has been reached\n            if (proposal._yesVotesTotal >= _relayerThreshold) {\n                proposal._status = ProposalStatus.Passed;\n                emit ProposalEvent(\n                    domainID,\n                    depositNonce,\n                    ProposalStatus.Passed,\n                    dataHash\n                );\n            }\n        }\n        _proposals[nonceAndID][dataHash] = proposal;\n\n        if (proposal._status == ProposalStatus.Passed) {\n            _executeProposal(domainID, depositNonce, data, resourceID, false);\n        }\n    }\n\n    /**\n        @notice Cancels a deposit proposal that has not been executed yet.\n        @notice Only callable by relayers when Bridge is not paused.\n        @param domainID ID of chain deposit originated from.\n        @param depositNonce ID of deposited generated by origin Bridge contract.\n        @param dataHash Hash of data originally provided when deposit was made.\n        @notice Proposal must be past expiry threshold.\n        @notice Emits {ProposalEvent} event with status {Cancelled}.\n     */\n    function cancelProposal(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes32 dataHash\n    ) public onlyAdminOrRelayer {\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\n        Proposal memory proposal = _proposals[nonceAndID][dataHash];\n        ProposalStatus currentStatus = proposal._status;\n\n        require(\n            currentStatus == ProposalStatus.Active ||\n                currentStatus == ProposalStatus.Passed,\n            \"Proposal cannot be cancelled\"\n        );\n        require(\n            uint40(sub(block.number, proposal._proposedBlock)) > _expiry,\n            \"Proposal not at expiry threshold\"\n        );\n\n        proposal._status = ProposalStatus.Cancelled;\n        _proposals[nonceAndID][dataHash] = proposal;\n\n        emit ProposalEvent(\n            domainID,\n            depositNonce,\n            ProposalStatus.Cancelled,\n            dataHash\n        );\n    }\n\n    /**\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\n        @notice Only callable by relayers when Bridge is not paused.\n        @param domainID ID of chain deposit originated from.\n        @param resourceID ResourceID to be used when making deposits.\n        @param depositNonce ID of deposited generated by origin Bridge contract.\n        @param data Data originally provided when deposit was made.\n        @param revertOnFail Decision if the transaction should be reverted in case of handler's executeProposal is reverted or not.\n        @notice Proposal must have Passed status.\n        @notice Hash of {data} must equal proposal's {dataHash}.\n        @notice Emits {ProposalEvent} event with status {Executed}.\n        @notice Emits {FailedExecution} event with the failed reason.\n        @notice Behaviour of this function is different for {GenericHandler} and other specific ERC handlers.\n        In the case of ERC handler, when execution fails, the handler will terminate the function with revert.\n        In the case of {GenericHandler}, when execution fails, the handler will emit a failure event and terminate the function normally.\n     */\n    function executeProposal(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes calldata data,\n        bytes32 resourceID,\n        bool revertOnFail\n    ) public onlyRelayers whenNotPaused nonReentrant {\n        _executeProposal(\n            domainID,\n            depositNonce,\n            data,\n            resourceID,\n            revertOnFail\n        );\n    }\n\n    function _executeProposal(\n        uint8 domainID,\n        uint64 depositNonce,\n        bytes calldata data,\n        bytes32 resourceID,\n        bool revertOnFail\n    ) private {\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\n        bytes32 dataHash = keccak256(\n            abi.encodePacked(resourceID, handler, data)\n        );\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\n\n        require(\n            proposal._status == ProposalStatus.Passed,\n            \"Proposal must have Passed status\"\n        );\n\n        proposal._status = ProposalStatus.Executed;\n        IDepositExecute depositHandler = IDepositExecute(handler);\n\n        if (revertOnFail) {\n            depositHandler.executeProposal(resourceID, data);\n        } else {\n            try depositHandler.executeProposal(resourceID, data) {} catch (\n                bytes memory lowLevelData\n            ) {\n                proposal._status = ProposalStatus.Passed;\n                emit FailedHandlerExecution(lowLevelData);\n                return;\n            }\n        }\n\n        emit ProposalEvent(\n            domainID,\n            depositNonce,\n            ProposalStatus.Executed,\n            dataHash\n        );\n    }\n}\n"
    },
    "contracts/utils/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\n// This is adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/access/AccessControl.sol\n// The only difference is added getRoleMemberIndex(bytes32 role, address account) function.\n\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is ContextUpgradeable {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using AddressUpgradeable for address;\n\n    struct RoleData {\n        EnumerableSetUpgradeable.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(\n        bytes32 indexed role,\n        address indexed account,\n        address indexed sender\n    );\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(\n        bytes32 indexed role,\n        address indexed account,\n        address indexed sender\n    );\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index)\n        public\n        view\n        returns (address)\n    {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the index of the account that have `role`.\n     */\n    function getRoleMemberIndex(bytes32 role, address account)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            _roles[role].members._inner._indexes[\n                bytes32(uint256(uint160(account)))\n            ];\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(\n            hasRole(_roles[role].adminRole, _msgSender()),\n            \"AccessControl: sender must be an admin to grant\"\n        );\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(\n            hasRole(_roles[role].adminRole, _msgSender()),\n            \"AccessControl: sender must be an admin to revoke\"\n        );\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(\n            account == _msgSender(),\n            \"AccessControl: can only renounce roles for self\"\n        );\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "contracts/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This is a stripped down version of Open zeppelin's Pausable contract.\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableSet.sol\n *\n */\ncontract PausableUpgradeable is Initializable{\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenNotPaused() {\n        _whenNotPaused();\n        _;\n    }\n\n    function _whenNotPaused() private view {\n        require(!_paused, \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenPaused() {\n        _whenPaused();\n        _;\n    }\n\n    function _whenPaused() private view {\n        require(_paused, \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     * @param sender Address which executes pause.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause(address sender) internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(sender);\n    }\n\n    /**\n     * @dev Returns to normal state.\n     * @param sender Address which executes unpause.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause(address sender) internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(sender);\n    }\n    uint256[49] private __gap;\n}"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/ERC20MintablePauseableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\n\ncontract ERC20MintablePauseableUpgradeable is\n    ERC20PausableUpgradeable,\n    ERC20BurnableUpgradeable,\n    EIP712Upgradeable,\n    AccessControlEnumerableUpgradeable\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    mapping(address => bool) public blackList;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH =\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint256) public nonces;\n    uint8 private _decimals;\n\n    function initialize(\n        string memory name,\n        string memory symbol,\n        uint8 decimals_,\n        address admin\n    ) public initializer {\n        _decimals = decimals_;\n        __ERC20_init(name, symbol);\n        __EIP712_init(\"PermitToken\", \"1.0\");\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n        _setupRole(MINTER_ROLE, admin);\n    }\n\n    modifier onlyAdmin() {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"forbidden\");\n        _;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20Upgradeable, ERC20PausableUpgradeable) {\n        require(!blackList[from], \"forbidden\");\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    function setBlackList(address account) public onlyAdmin {\n        blackList[account] = !blackList[account];\n    }\n\n    function mint(address to, uint256 amount) public virtual {\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"ERC20PresetMinterPauser: must have minter role to mint\"\n        );\n        _mint(to, amount);\n    }\n\n    function pause() public onlyAdmin {\n        _pause();\n    }\n\n    function unpause() public onlyAdmin {\n        _unpause();\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        bytes memory signature\n    ) public {\n        // hash调用方法和参数\n        bytes32 structHash = keccak256(\n            abi.encode(\n                PERMIT_TYPEHASH,\n                owner,\n                spender,\n                value,\n                nonces[owner]++,\n                deadline\n            )\n        );\n        // 结构化hash\n        bytes32 hash = _hashTypedDataV4(structHash);\n        // 还原签名人\n        address signer = ECDSAUpgradeable.recover(hash, signature);\n        require(owner == signer, \"Permit: invalid signature\");\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../security/PausableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\n    function __ERC20Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __ERC20Pausable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/SignaturesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\nimport \"./interfaces/IBridge.sol\";\nimport \"./utils/PausableUpgradeable.sol\";\nimport {AccessControlUpgradeable as AccessControl} from \"./utils/AccessControlUpgradeable.sol\";\nimport \"./utils/SafeCast.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\n\ncontract SignaturesUpgradeable is PausableUpgradeable, AccessControl {\n    using SafeCast for *;\n    // 0xc4cb5d35714699d6e85b9562b644e60393b418d974a5c1dd8efaadac37a142c5\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\n            \"PermitBridge(uint8 domainID,uint64 depositNonce,bytes32 resourceID,bytes data)\"\n        );\n    // 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    bytes32 public constant _TYPE_HASH =\n        keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n    bytes32 public constant RELAYER_ROLE = keccak256(\"RELAYER_ROLE\");\n    // 0x058443738ec3641a3233a9f285e16671e4ad9755445580d761017e695f75052b\n    bytes32 private constant _HASHED_NAME = keccak256(bytes(\"PermitBridge\"));\n    // 0xe6bbd6277e1bf288eed5e8d1780f9a50b239e86b153736bceebccf4ea79d90b3\n    bytes32 private constant _HASHED_VERSION = keccak256(bytes(\"1.0\"));\n\n    mapping(uint8 => uint8) public _relayerThreshold;\n    mapping(uint8 => uint256) public destChainId;\n\n    function initialize(address admin) public initializer {\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    modifier onlyAdmin() {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\n            \"sender doesn't have admin role\"\n        );\n        _;\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash,\n        uint256 chainId,\n        address signatureContract\n    ) private pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    typeHash,\n                    nameHash,\n                    versionHash,\n                    chainId,\n                    signatureContract\n                )\n            );\n    }\n\n    function _hashTypedDataV4(\n        bytes32 structHash,\n        uint256 chainId,\n        address signatureContract\n    ) internal view virtual returns (bytes32) {\n        return\n            ECDSAUpgradeable.toTypedDataHash(\n                _buildDomainSeparator(\n                    _TYPE_HASH,\n                    _HASHED_NAME,\n                    _HASHED_VERSION,\n                    chainId,\n                    signatureContract\n                ),\n                structHash\n            );\n    }\n\n    function checkSignature(\n        uint8 domainID,\n        uint8 destinationDomainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data,\n        bytes calldata signature\n    ) public view returns (address) {\n        bytes32 structHash = keccak256(\n            abi.encode(\n                PERMIT_TYPEHASH,\n                domainID,\n                depositNonce,\n                resourceID,\n                keccak256(data)\n            )\n        );\n        address destinationBridge = destinationBridgeAddress[\n            destinationDomainID\n        ];\n        bytes32 hash = _hashTypedDataV4(\n            structHash,\n            destChainId[destinationDomainID] == 0\n                ? uint256(destinationDomainID)\n                : destChainId[destinationDomainID],\n            destinationBridge\n        );\n        return ECDSAUpgradeable.recover(hash, signature);\n    }\n\n    /// @notice depositHash = keccak256(abi.encode(originDomainID,destinationDomainID,depositNonce,resourceID,keccak256(data)));\n    /// @notice depositHash => signature[]\n    mapping(bytes32 => bytes[]) public signatures;\n    /// @notice signature => bool\n    mapping(bytes => bool) public hasVote; // scrap\n    mapping(bytes32 => mapping(address => bool)) public relayerVote;\n    mapping(uint8 => address) public destinationBridgeAddress;\n\n    event SubmitSignature(\n        uint8 indexed originDomainID,\n        uint8 indexed destinationDomainID,\n        uint64 depositNonce,\n        bytes32 indexed resourceID,\n        bytes data,\n        bytes signature\n    );\n\n    event SignaturePass(\n        uint8 indexed originDomainID,\n        uint8 indexed destinationDomainID,\n        uint64 depositNonce,\n        bytes32 indexed resourceID,\n        bytes data,\n        bytes signature\n    );\n\n    function adminChangeRelayerThreshold(\n        uint8 destinationDomainID,\n        uint256 newThreshold\n    ) external onlyAdmin {\n        _relayerThreshold[destinationDomainID] = newThreshold.toUint8();\n    }\n\n    function adminSetDestChainId(\n        uint8 destinationDomainID,\n        uint256 chainId,\n        address destinationBridge\n    ) external onlyAdmin {\n        destChainId[destinationDomainID] = chainId;\n        destinationBridgeAddress[destinationDomainID] = destinationBridge;\n    }\n\n    function adminPause() external onlyAdmin {\n        _pause(_msgSender());\n    }\n\n    function adminUnpause() external onlyAdmin {\n        _unpause(_msgSender());\n    }\n\n    struct Proposal {\n        uint8 originDomainID;\n        uint8 destinationDomainID;\n        address destinationBridge;\n        uint64 depositNonce;\n        bytes32 resourceID;\n        bytes data;\n        uint256 proposalIndex;\n    }\n\n    uint256 public proposalIndex;\n    mapping(bytes32 => Proposal) public proposals;\n    mapping(uint256 => bytes32) public indexToProposal;\n\n    function submitSignature(\n        uint8 originDomainID,\n        uint8 destinationDomainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data,\n        bytes calldata signature\n    ) external whenNotPaused {\n        address destinationBridge = destinationBridgeAddress[\n            destinationDomainID\n        ];\n        address relayer = checkSignature(\n            originDomainID,\n            destinationDomainID,\n            depositNonce,\n            resourceID,\n            data,\n            signature\n        );\n        require(hasRole(RELAYER_ROLE, relayer), \"invalid signature\");\n        bytes32 depositHash = keccak256(\n            abi.encode(\n                originDomainID,\n                destinationDomainID,\n                depositNonce,\n                resourceID,\n                keccak256(data)\n            )\n        );\n        require(!relayerVote[depositHash][relayer], \"signature aleardy submit\");\n        relayerVote[depositHash][relayer] = true;\n        require(\n            signatures[depositHash].length <\n                _relayerThreshold[destinationDomainID],\n            \"Signture aleardy pass\"\n        );\n        if (signatures[depositHash].length == 0) {\n            proposalIndex++;\n            proposals[depositHash] = Proposal({\n                originDomainID: originDomainID,\n                destinationDomainID: destinationDomainID,\n                destinationBridge: destinationBridge,\n                depositNonce: depositNonce,\n                resourceID: resourceID,\n                data: data,\n                proposalIndex: proposalIndex\n            });\n            indexToProposal[proposalIndex] = depositHash;\n        }\n        signatures[depositHash].push(signature);\n\n        emit SubmitSignature(\n            originDomainID,\n            destinationDomainID,\n            depositNonce,\n            resourceID,\n            data,\n            signature\n        );\n        if (\n            signatures[depositHash].length >=\n            _relayerThreshold[destinationDomainID]\n        ) {\n            emit SignaturePass(\n                originDomainID,\n                destinationDomainID,\n                depositNonce,\n                resourceID,\n                data,\n                signature\n            );\n        }\n    }\n\n    function getSignatures(\n        uint8 domainID,\n        uint8 destinationDomainID,\n        uint64 depositNonce,\n        bytes32 resourceID,\n        bytes calldata data\n    ) external view returns (bytes[] memory) {\n        return\n            signatures[\n                keccak256(\n                    abi.encode(\n                        domainID,\n                        destinationDomainID,\n                        depositNonce,\n                        resourceID,\n                        keccak256(data)\n                    )\n                )\n            ];\n    }\n\n    function getProposal(uint256 index) public view returns (Proposal memory) {\n        require(index <= proposalIndex, \"Proposal not exist\");\n        return proposals[indexToProposal[index]];\n    }\n\n    function getSignatures(uint256 index)\n        external\n        view\n        returns (bytes[] memory)\n    {\n        require(index <= proposalIndex, \"Proposal not exist\");\n        return signatures[indexToProposal[index]];\n    }\n}\n"
    },
    "contracts/handlers/fee/FeeHandlerWithOracle.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../../utils/AccessControl.sol\";\nimport \"../../interfaces/IFeeHandler.sol\";\nimport \"../../interfaces/IERCHandler.sol\";\nimport \"../../interfaces/IBridge.sol\";\nimport \"../../ERC20Safe.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n    @title Handles deposit fees based on Effective rates provided by Fee oracle.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with the Bridge contract.\n */\ncontract FeeHandlerWithOracle is IFeeHandler, AccessControl, ERC20Safe {\n    address public immutable _bridgeAddress;\n\n    address public _oracleAddress;\n    uint256 public override _fee = 0;\n\n    uint32 public _gasUsed;\n    uint16 public _feePercent; // multiplied by 100 to avoid precision loss\n\n    struct OracleMessageType {\n        // Base Effective Rate - effective rate between base currencies of source and dest networks (eg. MATIC/ETH)\n        uint256 ber;\n        // Token Effective Rate - rate between base currency of destination network and token that is being trasferred (eg. MATIC/USDT)\n        uint256 ter;\n        uint256 dstGasPrice;\n        uint256 expiresAt;\n        uint8 fromDomainID;\n        uint8 toDomainID;\n        bytes32 resourceID;\n    }\n\n    struct FeeDataType {\n        bytes message;\n        bytes sig;\n        uint256 amount;\n    }\n\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    constructor(address bridgeAddress) {\n        _bridgeAddress = bridgeAddress;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    // Admin functions\n    /**\n        @notice Removes admin role from {_msgSender()} and grants it to {newAdmin}.\n        @notice Only callable by an address that currently has the admin role.\n        @param newAdmin Address that admin role will be granted to.\n     */\n    function renounceAdmin(address newAdmin) external onlyAdmin {\n        address sender = _msgSender();\n        require(sender != newAdmin, \"Cannot renounce oneself\");\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        renounceRole(DEFAULT_ADMIN_ROLE, sender);\n    }\n\n    /**\n        @notice Sets the fee oracle address for signature verification.\n        @param oracleAddress Fee oracle address.\n     */\n    function setFeeOracle(address oracleAddress) external onlyAdmin {\n        _oracleAddress = oracleAddress;\n    }\n\n    /**\n        @notice Sets the fee properties.\n        @param gasUsed Gas used for transfer.\n        @param feePercent Added to fee amount. total fee = fee + fee * feePercent\n     */\n    function setFeeProperties(uint32 gasUsed, uint16 feePercent)\n        external\n        onlyAdmin\n    {\n        _gasUsed = gasUsed;\n        _feePercent = feePercent;\n    }\n\n    /**\n        @notice Collects fee for deposit.\n        @param sender Sender of the deposit.\n        @param fromDomainID ID of the source chain.\n        @param destinationDomainID ID of chain deposit will be bridged to.\n        @param resourceID ResourceID to be used when making deposits.\n        @param depositData Additional data to be passed to specified handler.\n        @param feeData Additional data to be passed to the fee handler.\n     */\n    function collectFee(\n        address sender,\n        uint8 fromDomainID,\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) external payable onlyBridge {\n        require(msg.value == 0, \"collectFee: msg.value != 0\");\n        (uint256 fee, address tokenAddress) = _calculateFee(\n            sender,\n            fromDomainID,\n            destinationDomainID,\n            resourceID,\n            depositData,\n            feeData\n        );\n        lockERC20(tokenAddress, sender, address(this), fee);\n        emit FeeCollected(\n            sender,\n            fromDomainID,\n            destinationDomainID,\n            resourceID,\n            fee,\n            tokenAddress\n        );\n    }\n\n    /**\n        @notice Calculates fee for deposit.\n        @param sender Sender of the deposit.\n        @param fromDomainID ID of the source chain.\n        @param destinationDomainID ID of chain deposit will be bridged to.\n        @param resourceID ResourceID to be used when making deposits.\n        @param depositData Additional data to be passed to specified handler.\n        @param feeData Additional data to be passed to the fee handler.\n        @return fee Returns the fee amount.\n        @return tokenAddress Returns the address of the token to be used for fee.\n     */\n    function calculateFee(\n        address sender,\n        uint8 fromDomainID,\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) external view returns (uint256 fee, address tokenAddress) {\n        return\n            _calculateFee(\n                sender,\n                fromDomainID,\n                destinationDomainID,\n                resourceID,\n                depositData,\n                feeData\n            );\n    }\n\n    function _calculateFee(\n        address sender,\n        uint8 fromDomainID,\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) internal view returns (uint256 fee, address tokenAddress) {\n        /** \n            Message:\n            ber * 10^18:  uint256\n            ter * 10^18:  uint256\n            dstGasPrice:  uint256\n            expiresAt:    uint256\n            fromDomainID: uint8 encoded as uint256\n            toDomainID:   uint8 encoded as uint256\n            resourceID:   bytes32\n            sig:          bytes(65 bytes)\n\n            total in bytes:\n            message:\n            32 * 7  = 224\n            message + sig:\n            224 + 65 = 289\n\n            amount: uint256\n            total: 321\n        */\n\n        require(feeData.length == 321, \"Incorrect feeData length\");\n\n        FeeDataType memory feeDataDecoded;\n\n        feeDataDecoded.message = bytes(feeData[:224]);\n        feeDataDecoded.sig = bytes(feeData[224:289]);\n        feeDataDecoded.amount = abi.decode(feeData[289:], (uint256));\n\n        OracleMessageType memory oracleMessage = abi.decode(\n            feeDataDecoded.message,\n            (OracleMessageType)\n        );\n        require(\n            block.timestamp <= oracleMessage.expiresAt,\n            \"Obsolete oracle data\"\n        );\n        require(\n            (oracleMessage.fromDomainID == fromDomainID) &&\n                (oracleMessage.toDomainID == destinationDomainID) &&\n                (oracleMessage.resourceID == resourceID),\n            \"Incorrect deposit params\"\n        );\n\n        bytes32 messageHash = keccak256(feeDataDecoded.message);\n\n        verifySig(messageHash, feeDataDecoded.sig, _oracleAddress);\n\n        address tokenHandler = IBridge(_bridgeAddress)\n            ._resourceIDToHandlerAddress(resourceID);\n        address tokenAddress = IERCHandler(tokenHandler)\n            ._resourceIDToTokenContractAddress(resourceID);\n\n        // txCost = dstGasPrice * _gasUsed * Token Effective Rate (rate of dest base currency to token)\n        uint256 txCost = (oracleMessage.dstGasPrice *\n            _gasUsed *\n            oracleMessage.ter) / 1e18;\n\n        fee = (feeDataDecoded.amount * _feePercent) / 1e4; // 100 for percent and 100 to avoid precision loss\n\n        if (fee < txCost) {\n            fee = txCost;\n        }\n        return (fee, tokenAddress);\n    }\n\n    /**\n        @notice Transfers tokens from the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1.\n        This means that the address at index 0 for addrs will receive the amount of tokens from amounts at index 0.\n        @param resourceID ResourceID of the token.\n        @param addrs Array of addresses to transfer {amounts} to.\n        @param amounts Array of amounts to transfer to {addrs}.\n     */\n    function transferFee(\n        bytes32 resourceID,\n        address[] calldata addrs,\n        uint256[] calldata amounts\n    ) external onlyAdmin {\n        require(\n            addrs.length == amounts.length,\n            \"addrs[], amounts[]: diff length\"\n        );\n        address tokenHandler = IBridge(_bridgeAddress)\n            ._resourceIDToHandlerAddress(resourceID);\n        address tokenAddress = IERCHandler(tokenHandler)\n            ._resourceIDToTokenContractAddress(resourceID);\n        for (uint256 i = 0; i < addrs.length; i++) {\n            releaseERC20(tokenAddress, addrs[i], amounts[i]);\n            emit FeeDistributed(tokenAddress, addrs[i], amounts[i]);\n        }\n    }\n\n    function verifySig(\n        bytes32 message,\n        bytes memory signature,\n        address signerAddress\n    ) internal pure {\n        address signerAddressRecovered = ECDSA.recover(message, signature);\n        require(signerAddressRecovered == signerAddress, \"Invalid signature\");\n    }\n\n    modifier onlyAdmin() {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"sender doesn't have admin role\"\n        );\n        _;\n    }\n\n    modifier onlyBridge() {\n        _onlyBridge();\n        _;\n    }\n\n    function _onlyBridge() private view {\n        require(msg.sender == _bridgeAddress, \"sender must be bridge contract\");\n    }\n}\n"
    },
    "contracts/ERC20Safe.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./interfaces/IERCMintBurn.sol\";\n\n/**\n    @title Manages deposited ERC20s.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with ERC20Handler contract.\n */\ncontract ERC20Safe {\n    using SafeMath for uint256;\n    uint256 public ETHReserve;\n\n    /**\n        @notice Used to gain custody of deposited token.\n        @param tokenAddress Address of ERC20 to transfer.\n        @param owner Address of current token owner.\n        @param recipient Address to transfer tokens to.\n        @param amount Amount of tokens to transfer.\n     */\n    function lockERC20(\n        address tokenAddress,\n        address owner,\n        address recipient,\n        uint256 amount\n    ) internal {\n        IERC20 erc20 = IERC20(tokenAddress);\n        _safeTransferFrom(erc20, owner, recipient, amount);\n    }\n\n    /**\n        @notice Transfers custody of token to recipient.\n        @param tokenAddress Address of ERC20 to transfer.\n        @param recipient Address to transfer tokens to.\n        @param amount Amount of tokens to transfer.\n     */\n    function releaseERC20(\n        address tokenAddress,\n        address recipient,\n        uint256 amount\n    ) internal {\n        IERC20 erc20 = IERC20(tokenAddress);\n        _safeTransfer(erc20, recipient, amount);\n    }\n\n    function depositETH(uint256 amount) internal {\n        require(amount == msg.value, \"msg.value and data mismatched\");\n        require(\n            address(this).balance >= ETHReserve + amount,\n            \"ETHReserve mismatched\"\n        );\n        ETHReserve = address(this).balance;\n    }\n\n    function withdrawETH(address recipient, uint256 amount) internal {\n        uint256 balanceBefore = address(this).balance;\n        _safeTransferETH(recipient, amount);\n        require(\n            address(this).balance == balanceBefore - amount,\n            \"ERC20: withdraw fail!\"\n        );\n        ETHReserve = address(this).balance;\n    }\n\n    /**\n        @notice Used to create new ERC20s.\n        @param tokenAddress Address of ERC20 to transfer.\n        @param recipient Address to mint token to.\n        @param amount Amount of token to mint.\n     */\n    function mintERC20(\n        address tokenAddress,\n        address recipient,\n        uint256 amount\n    ) internal {\n        IERCMintBurn erc20 = IERCMintBurn(tokenAddress);\n        erc20.mint(recipient, amount);\n    }\n\n    /**\n        @notice Used to burn ERC20s.\n        @param tokenAddress Address of ERC20 to burn.\n        @param owner Current owner of tokens.\n        @param amount Amount of tokens to burn.\n     */\n    function burnERC20(\n        address tokenAddress,\n        address owner,\n        uint256 amount\n    ) internal {\n        IERCMintBurn erc20 = IERCMintBurn(tokenAddress);\n        erc20.burnFrom(owner, amount);\n    }\n\n    /**\n        @notice used to transfer ERC20s safely\n        @param token Token instance to transfer\n        @param to Address to transfer token to\n        @param value Amount of token to transfer\n     */\n    function _safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) private {\n        _safeCall(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function _safeTransferETH(address to, uint256 value) private {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(\n            success,\n            \"TransferHelper::safeTransferETH: ETH transfer failed\"\n        );\n    }\n\n    /**\n        @notice used to transfer ERC20s safely\n        @param token Token instance to transfer\n        @param from Address to transfer token from\n        @param to Address to transfer token to\n        @param value Amount of token to transfer\n     */\n    function _safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) private {\n        _safeCall(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n        @notice used to make calls to ERC20s safely\n        @param token Token instance call targets\n        @param data encoded call data\n     */\n    function _safeCall(IERC20 token, bytes memory data) private {\n        uint256 tokenSize;\n        assembly {\n            tokenSize := extcodesize(token)\n        }\n        require(tokenSize > 0, \"ERC20: not a contract\");\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"ERC20: call failed\");\n\n        if (returndata.length > 0) {\n            require(\n                abi.decode(returndata, (bool)),\n                \"ERC20: operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/handlers/ERC20HandlerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IDepositExecute.sol\";\nimport {HandlerHelpersUpgradeable as HandlerHelpers} from \"./HandlerHelpersUpgradeable.sol\";\nimport \"../ERC20Safe.sol\";\n\n/**\n    @title Handles ERC20 deposits and deposit executions.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with the Bridge contract.\n */\ncontract ERC20HandlerUpgradeable is IDepositExecute, HandlerHelpers, ERC20Safe {\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    function initialize(address bridgeAddress) public initializer {\n        __HandlerHelpers_init(bridgeAddress);\n    }\n\n    error ProvidedTokenAddressIsNotWhitelisted();\n\n    receive() external payable {}\n\n    /**\n        @notice A deposit is initiated by making a deposit in the Bridge contract.\n        @param resourceID ResourceID used to find address of token to be used for deposit.\n        @param depositor Address of account making the deposit in the Bridge contract.\n        @param data Consists of {amount} padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        amount                      uint256     bytes   0 - 32\n        @dev Depending if the corresponding {tokenAddress} for the parsed {resourceID} is\n        marked true in {_burnList}, deposited tokens will be burned, if not, they will be locked.\n        @return an empty data.\n     */\n    function deposit(\n        bytes32 resourceID,\n        address depositor,\n        bytes calldata data\n    ) external payable override onlyBridge returns (bytes memory) {\n        uint256 amount;\n        (amount) = abi.decode(data, (uint256));\n\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n        if (!_contractWhitelist[tokenAddress]) {\n            revert ProvidedTokenAddressIsNotWhitelisted();\n        }\n\n        if (_burnList[tokenAddress]) {\n            burnERC20(tokenAddress, depositor, amount);\n        } else if (isNative[tokenAddress]) {\n            depositETH(amount);\n        } else {\n            lockERC20(tokenAddress, depositor, address(this), amount);\n        }\n        return new bytes(0);\n    }\n\n    /**\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\n        by a relayer on the deposit's destination chain.\n        @param data Consists of {resourceID}, {amount}, {lenDestinationRecipientAddress},\n        and {destinationRecipientAddress} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        amount                                 uint256     bytes  0 - 32\n        destinationRecipientAddress length     uint256     bytes  32 - 64\n        destinationRecipientAddress            bytes       bytes  64 - END\n     */\n    function executeProposal(bytes32 resourceID, bytes calldata data)\n        external\n        override\n        onlyBridge\n    {\n        uint256 amount;\n        uint256 lenDestinationRecipientAddress;\n        bytes memory destinationRecipientAddress;\n\n        (amount, lenDestinationRecipientAddress) = abi.decode(\n            data,\n            (uint256, uint256)\n        );\n        destinationRecipientAddress = bytes(\n            data[64:64 + lenDestinationRecipientAddress]\n        );\n\n        bytes20 recipientAddress;\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n\n        assembly {\n            recipientAddress := mload(add(destinationRecipientAddress, 0x20))\n        }\n\n        require(\n            _contractWhitelist[tokenAddress],\n            \"provided tokenAddress is not whitelisted\"\n        );\n\n        if (_burnList[tokenAddress]) {\n            mintERC20(tokenAddress, address(recipientAddress), amount);\n        } else if (isNative[tokenAddress]) {\n            withdrawETH(address(recipientAddress), amount);\n        } else {\n            releaseERC20(tokenAddress, address(recipientAddress), amount);\n        }\n    }\n\n    /**\n        @notice Used to manually release ERC20 tokens from ERC20Safe.\n        @param data Consists of {tokenAddress}, {recipient}, and {amount} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        tokenAddress                           address     bytes  0 - 32\n        recipient                              address     bytes  32 - 64\n        amount                                 uint        bytes  64 - 96\n     */\n    function withdraw(bytes memory data) external override onlyBridge {\n        address tokenAddress;\n        address recipient;\n        uint256 amount;\n\n        (tokenAddress, recipient, amount) = abi.decode(\n            data,\n            (address, address, uint256)\n        );\n\n        releaseERC20(tokenAddress, recipient, amount);\n    }\n\n    /**\n        @notice Used to manually release ETH ERC20Safe.\n        @param data Consists of {recipient}, and {amount} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        recipient                           address     bytes  0 - 32\n        amount                                 uint     bytes  32 - 64\n     */\n    function withdrawETH(bytes memory data) external override onlyBridge {\n        address recipient;\n        uint256 amount;\n\n        (recipient, amount) = abi.decode(data, (address, uint256));\n\n        withdrawETH(recipient, amount);\n    }\n}\n"
    },
    "contracts/handlers/ERC1155HandlerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IDepositExecute.sol\";\nimport {HandlerHelpersUpgradeable as HandlerHelpers} from \"./HandlerHelpersUpgradeable.sol\";\nimport \"../ERC1155Safe.sol\";\nimport {ERC165CheckerUpgradeable as ERC165Checker} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\";\nimport {ERC1155HolderUpgradeable as ERC1155Holder} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\";\n\ncontract ERC1155HandlerUpgradeable is\n    IDepositExecute,\n    HandlerHelpers,\n    ERC1155Safe,\n    ERC1155Holder\n{\n    using ERC165Checker for address;\n\n    bytes4 private constant _INTERFACE_ERC1155_METADATA = 0x0e89341c;\n    bytes private constant EMPTY_BYTES = \"\";\n\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    function initialize(address bridgeAddress) public initializer {\n        __HandlerHelpers_init(bridgeAddress);\n    }\n\n    /**\n        @notice A deposit is initiated by making a deposit in the Bridge contract.\n        @param resourceID ResourceID used to find address of token to be used for deposit.\n        @param depositor Address of account making the deposit in the Bridge contract.\n        @param data Consists of ABI-encoded arrays of tokenIDs and amounts.\n     */\n    function deposit(\n        bytes32 resourceID,\n        address depositor,\n        bytes calldata data\n    ) external payable override onlyBridge returns (bytes memory) {\n        require(msg.value == 0, \"msg.value != 0\");\n        uint256[] memory tokenIDs;\n        uint256[] memory amounts;\n\n        (tokenIDs, amounts) = abi.decode(data, (uint256[], uint256[]));\n\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n        require(\n            tokenAddress != address(0),\n            \"provided resourceID does not exist\"\n        );\n\n        if (_burnList[tokenAddress]) {\n            burnBatchERC1155(tokenAddress, depositor, tokenIDs, amounts);\n        } else {\n            lockBatchERC1155(\n                tokenAddress,\n                depositor,\n                address(this),\n                tokenIDs,\n                amounts,\n                EMPTY_BYTES\n            );\n        }\n        return new bytes(0);\n    }\n\n    /**\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\n        by a relayer on the deposit's destination chain.\n        @param data Consists of ABI-encoded {tokenIDs}, {amounts}, {recipient},\n        and {transferData} of types uint[], uint[], bytes, bytes.\n        @notice Data passed into the function should be constructed as ABI encoding of:\n        tokenIDs                                    uint256[]  bytes\n        amounts                                     uint256[]  bytes\n        destinationRecipientAddress                   bytes    bytes\n        transferData                                  bytes    bytes\n     */\n    function executeProposal(bytes32 resourceID, bytes calldata data)\n        external\n        override\n        onlyBridge\n    {\n        uint256[] memory tokenIDs;\n        uint256[] memory amounts;\n        bytes memory recipient;\n        bytes memory transferData;\n\n        (tokenIDs, amounts, recipient, transferData) = abi.decode(\n            data,\n            (uint256[], uint256[], bytes, bytes)\n        );\n\n        bytes20 recipientAddress;\n\n        assembly {\n            recipientAddress := mload(add(recipient, 0x20))\n        }\n\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n        require(\n            _contractWhitelist[address(tokenAddress)],\n            \"provided tokenAddress is not whitelisted\"\n        );\n\n        if (_burnList[tokenAddress]) {\n            mintBatchERC1155(\n                tokenAddress,\n                address(recipientAddress),\n                tokenIDs,\n                amounts,\n                transferData\n            );\n        } else {\n            releaseBatchERC1155(\n                tokenAddress,\n                address(this),\n                address(recipientAddress),\n                tokenIDs,\n                amounts,\n                transferData\n            );\n        }\n    }\n\n    /**\n        @notice Used to manually release ERC1155 tokens from ERC1155Safe.\n        @param data Consists of ABI-encoded {tokenAddress}, {recipient}, {tokenIDs}, \n        {amounts}, and {transferData} of types address, address, uint[], uint[], bytes.\n     */\n    function withdraw(bytes memory data) external override onlyBridge {\n        address tokenAddress;\n        address recipient;\n        uint256[] memory tokenIDs;\n        uint256[] memory amounts;\n        bytes memory transferData;\n\n        (tokenAddress, recipient, tokenIDs, amounts, transferData) = abi.decode(\n            data,\n            (address, address, uint256[], uint256[], bytes)\n        );\n\n        releaseBatchERC1155(\n            tokenAddress,\n            address(this),\n            recipient,\n            tokenIDs,\n            amounts,\n            transferData\n        );\n    }\n}\n"
    },
    "contracts/ERC1155Safe.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"./interfaces/IERCMintBurn.sol\";\n\n/**\n    @title Manages deposited ERC1155s.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with ERC1155Handler contract.\n */\ncontract ERC1155Safe {\n    using SafeMath for uint256;\n\n    /**\n        @notice Used to gain custody of deposited token with batching.\n        @param tokenAddress Address of ERC1155 to transfer.\n        @param owner Address of current token owner.\n        @param recipient Address to transfer token to.\n        @param tokenIDs IDs of tokens to transfer.\n        @param amounts Amounts of tokens to transfer.\n        @param data Additional data.\n     */\n    function lockBatchERC1155(\n        address tokenAddress,\n        address owner,\n        address recipient,\n        uint256[] memory tokenIDs,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal {\n        IERC1155 erc1155 = IERC1155(tokenAddress);\n        erc1155.safeBatchTransferFrom(\n            owner,\n            recipient,\n            tokenIDs,\n            amounts,\n            data\n        );\n    }\n\n    /**\n        @notice Transfers custody of token to recipient with batching.\n        @param tokenAddress Address of ERC1155 to transfer.\n        @param owner Address of current token owner.\n        @param recipient Address to transfer token to.\n        @param tokenIDs IDs of tokens to transfer.\n        @param amounts Amounts of tokens to transfer.\n        @param data Additional data.\n     */\n    function releaseBatchERC1155(\n        address tokenAddress,\n        address owner,\n        address recipient,\n        uint256[] memory tokenIDs,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal {\n        IERC1155 erc1155 = IERC1155(tokenAddress);\n        erc1155.safeBatchTransferFrom(\n            owner,\n            recipient,\n            tokenIDs,\n            amounts,\n            data\n        );\n    }\n\n    /**\n        @notice Used to create new ERC1155s with batching.\n        @param tokenAddress Address of ERC1155 to mint.\n        @param recipient Address to mint token to.\n        @param tokenIDs IDs of tokens to mint.\n        @param amounts Amounts of token to mint.\n        @param data Additional data.\n     */\n    function mintBatchERC1155(\n        address tokenAddress,\n        address recipient,\n        uint256[] memory tokenIDs,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal {\n        IERCMintBurn erc1155 = IERCMintBurn(tokenAddress);\n        erc1155.mintBatch(recipient, tokenIDs, amounts, data);\n    }\n\n    /**\n        @notice Used to burn ERC1155s with batching.\n        @param tokenAddress Address of ERC1155 to burn.\n        @param owner owner of token.\n        @param tokenIDs IDs of tokens to burn.\n        @param amounts Amounts of tokens to burn.\n     */\n    function burnBatchERC1155(\n        address tokenAddress,\n        address owner,\n        uint256[] memory tokenIDs,\n        uint256[] memory amounts\n    ) internal {\n        IERCMintBurn erc1155 = IERCMintBurn(tokenAddress);\n        erc1155.burnBatch(owner, tokenIDs, amounts);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\n    function __ERC1155Holder_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\n    }\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/handlers/ERC1155Handler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IDepositExecute.sol\";\nimport \"./HandlerHelpers.sol\";\nimport \"../ERC1155Safe.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\n\ncontract ERC1155Handler is\n    IDepositExecute,\n    HandlerHelpers,\n    ERC1155Safe,\n    ERC1155Holder\n{\n    using ERC165Checker for address;\n\n    bytes4 private constant _INTERFACE_ERC1155_METADATA = 0x0e89341c;\n    bytes private constant EMPTY_BYTES = \"\";\n\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    constructor(address bridgeAddress) HandlerHelpers(bridgeAddress) {}\n\n    /**\n        @notice A deposit is initiated by making a deposit in the Bridge contract.\n        @param resourceID ResourceID used to find address of token to be used for deposit.\n        @param depositor Address of account making the deposit in the Bridge contract.\n        @param data Consists of ABI-encoded arrays of tokenIDs and amounts.\n     */\n    function deposit(\n        bytes32 resourceID,\n        address depositor,\n        bytes calldata data\n    ) external payable override onlyBridge returns (bytes memory) {\n        require(msg.value == 0, \"msg.value != 0\");\n        uint256[] memory tokenIDs;\n        uint256[] memory amounts;\n\n        (tokenIDs, amounts) = abi.decode(data, (uint256[], uint256[]));\n\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n        require(\n            tokenAddress != address(0),\n            \"provided resourceID does not exist\"\n        );\n\n        if (_burnList[tokenAddress]) {\n            burnBatchERC1155(tokenAddress, depositor, tokenIDs, amounts);\n        } else {\n            lockBatchERC1155(\n                tokenAddress,\n                depositor,\n                address(this),\n                tokenIDs,\n                amounts,\n                EMPTY_BYTES\n            );\n        }\n        return new bytes(0);\n    }\n\n    /**\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\n        by a relayer on the deposit's destination chain.\n        @param data Consists of ABI-encoded {tokenIDs}, {amounts}, {recipient},\n        and {transferData} of types uint[], uint[], bytes, bytes.\n        @notice Data passed into the function should be constructed as ABI encoding of:\n        tokenIDs                                    uint256[]  bytes\n        amounts                                     uint256[]  bytes\n        destinationRecipientAddress                   bytes    bytes\n        transferData                                  bytes    bytes\n     */\n    function executeProposal(bytes32 resourceID, bytes calldata data)\n        external\n        override\n        onlyBridge\n    {\n        uint256[] memory tokenIDs;\n        uint256[] memory amounts;\n        bytes memory recipient;\n        bytes memory transferData;\n\n        (tokenIDs, amounts, recipient, transferData) = abi.decode(\n            data,\n            (uint256[], uint256[], bytes, bytes)\n        );\n\n        bytes20 recipientAddress;\n\n        assembly {\n            recipientAddress := mload(add(recipient, 0x20))\n        }\n\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n        require(\n            _contractWhitelist[address(tokenAddress)],\n            \"provided tokenAddress is not whitelisted\"\n        );\n\n        if (_burnList[tokenAddress]) {\n            mintBatchERC1155(\n                tokenAddress,\n                address(recipientAddress),\n                tokenIDs,\n                amounts,\n                transferData\n            );\n        } else {\n            releaseBatchERC1155(\n                tokenAddress,\n                address(this),\n                address(recipientAddress),\n                tokenIDs,\n                amounts,\n                transferData\n            );\n        }\n    }\n\n    /**\n        @notice Used to manually release ERC1155 tokens from ERC1155Safe.\n        @param data Consists of ABI-encoded {tokenAddress}, {recipient}, {tokenIDs}, \n        {amounts}, and {transferData} of types address, address, uint[], uint[], bytes.\n     */\n    function withdraw(bytes memory data) external override onlyBridge {\n        address tokenAddress;\n        address recipient;\n        uint256[] memory tokenIDs;\n        uint256[] memory amounts;\n        bytes memory transferData;\n\n        (tokenAddress, recipient, tokenIDs, amounts, transferData) = abi.decode(\n            data,\n            (address, address, uint256[], uint256[], bytes)\n        );\n\n        releaseBatchERC1155(\n            tokenAddress,\n            address(this),\n            recipient,\n            tokenIDs,\n            amounts,\n            transferData\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/proxy/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "contracts/proxy/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n}\n"
    },
    "contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/TokenERC20.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract TokenERC20 is AccessControl, ERC20Burnable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initalSupply\n    ) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(MINTER_ROLE, _msgSender());\n        _mint(_msgSender(), initalSupply);\n    }\n\n    function mint(address to, uint256 amount) public virtual {\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"TokenERC20: must have minter role to mint\"\n        );\n        _mint(to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "contracts/handlers/fee/BasicFeeHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"../../interfaces/IFeeHandler.sol\";\nimport \"../../utils/AccessControl.sol\";\n\n/**\n    @title Handles deposit fees.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with the Bridge contract.\n */\ncontract BasicFeeHandler is IFeeHandler, AccessControl {\n    address public immutable _bridgeAddress;\n\n    uint256 public override _fee;\n    mapping(uint8 => uint256) public specialFee;\n    mapping(uint8 => bool) public special;\n\n    event FeeChanged(uint256 newFee);\n\n    modifier onlyBridge() {\n        _onlyBridge();\n        _;\n    }\n\n    function _onlyBridge() private view {\n        require(msg.sender == _bridgeAddress, \"sender must be bridge contract\");\n    }\n\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    constructor(address bridgeAddress) {\n        _bridgeAddress = bridgeAddress;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /**\n        @notice Removes admin role from {_msgSender()} and grants it to {newAdmin}.\n        @notice Only callable by an address that currently has the admin role.\n        @param newAdmin Address that admin role will be granted to.\n     */\n    function renounceAdmin(address newAdmin) external onlyAdmin {\n        address sender = _msgSender();\n        require(sender != newAdmin, \"Cannot renounce oneself\");\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        renounceRole(DEFAULT_ADMIN_ROLE, sender);\n    }\n\n    function setSpecialFee(uint8 fromDomainID, uint256 _specialFee)\n        public\n        onlyAdmin\n    {\n        special[fromDomainID] = true;\n        specialFee[fromDomainID] = _specialFee;\n    }\n\n    /**\n        @notice Collects fee for deposit.\n        @param sender Sender of the deposit.\n        @param destinationDomainID ID of chain deposit will be bridged to.\n        @param resourceID ResourceID to be used when making deposits.\n        @param depositData Additional data to be passed to specified handler.\n        @param feeData Additional data to be passed to the fee handler.\n     */\n    function collectFee(\n        address sender,\n        uint8 fromDomainID,\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) external payable onlyBridge {\n        uint256 fee = special[destinationDomainID]\n            ? specialFee[destinationDomainID]\n            : _fee;\n        require(msg.value == fee, \"Incorrect fee supplied\");\n        emit FeeCollected(\n            sender,\n            fromDomainID,\n            destinationDomainID,\n            resourceID,\n            fee,\n            address(0)\n        );\n    }\n\n    /**\n        @notice Calculates fee for deposit.\n        @param sender Sender of the deposit.\n        @param destinationDomainID ID of chain deposit will be bridged to.\n        @param resourceID ResourceID to be used when making deposits.\n        @param depositData Additional data to be passed to specified handler.\n        @param feeData Additional data to be passed to the fee handler.\n        @return Returns the fee amount.\n     */\n    function calculateFee(\n        address sender,\n        uint8 fromDomainID,\n        uint8 destinationDomainID,\n        bytes32 resourceID,\n        bytes calldata depositData,\n        bytes calldata feeData\n    ) external view returns (uint256, address) {\n        return (\n            special[destinationDomainID]\n                ? specialFee[destinationDomainID]\n                : _fee,\n            address(0)\n        );\n    }\n\n    /**\n        @notice Sets new value of the fee.\n        @notice Only callable by admin.\n        @param newFee Value {_fee} will be updated to.\n     */\n    function changeFee(uint256 newFee) external onlyAdmin {\n        require(_fee != newFee, \"Current fee is equal to new fee\");\n        _fee = newFee;\n        emit FeeChanged(newFee);\n    }\n\n    /**\n        @notice Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1.\n        This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.\n        @param addrs Array of addresses to transfer {amounts} to.\n        @param amounts Array of amonuts to transfer to {addrs}.\n     */\n    function transferFee(\n        address payable[] calldata addrs,\n        uint256[] calldata amounts\n    ) external onlyAdmin {\n        require(\n            addrs.length == amounts.length,\n            \"addrs[], amounts[]: diff length\"\n        );\n        for (uint256 i = 0; i < addrs.length; i++) {\n            (bool success, ) = addrs[i].call{value: amounts[i]}(\"\");\n            require(success, \"Fee ether transfer failed\");\n            emit FeeDistributed(address(0), addrs[i], amounts[i]);\n        }\n    }\n\n    modifier onlyAdmin() {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"sender doesn't have admin role\"\n        );\n        _;\n    }\n}\n"
    },
    "contracts/ERC20MinterBurnerPauser.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to aother accounts\n */\ncontract ERC20MinterBurnerPauser is ERC20PresetMinterPauser {\n    uint8 private _decimals;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals_\n    ) ERC20PresetMinterPauser(name, symbol) {\n        _decimals = decimals_;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/handlers/ERC20Handler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IDepositExecute.sol\";\nimport \"./HandlerHelpers.sol\";\nimport \"../ERC20Safe.sol\";\n\n/**\n    @title Handles ERC20 deposits and deposit executions.\n    @author ChainSafe Systems.\n    @notice This contract is intended to be used with the Bridge contract.\n */\ncontract ERC20Handler is IDepositExecute, HandlerHelpers, ERC20Safe {\n    /**\n        @param bridgeAddress Contract address of previously deployed Bridge.\n     */\n    constructor(address bridgeAddress) HandlerHelpers(bridgeAddress) {}\n\n    error ProvidedTokenAddressIsNotWhitelisted();\n\n    receive() external payable {}\n\n    /**\n        @notice A deposit is initiated by making a deposit in the Bridge contract.\n        @param resourceID ResourceID used to find address of token to be used for deposit.\n        @param depositor Address of account making the deposit in the Bridge contract.\n        @param data Consists of {amount} padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        amount                      uint256     bytes   0 - 32\n        @dev Depending if the corresponding {tokenAddress} for the parsed {resourceID} is\n        marked true in {_burnList}, deposited tokens will be burned, if not, they will be locked.\n        @return an empty data.\n     */\n    function deposit(\n        bytes32 resourceID,\n        address depositor,\n        bytes calldata data\n    ) external payable override onlyBridge returns (bytes memory) {\n        uint256 amount;\n        (amount) = abi.decode(data, (uint256));\n\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n        if (!_contractWhitelist[tokenAddress]) {\n            revert ProvidedTokenAddressIsNotWhitelisted();\n        }\n\n        if (_burnList[tokenAddress]) {\n            burnERC20(tokenAddress, depositor, amount);\n        } else if (isNative[tokenAddress]) {\n            depositETH(amount);\n        } else {\n            lockERC20(tokenAddress, depositor, address(this), amount);\n        }\n        return new bytes(0);\n    }\n\n    /**\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\n        by a relayer on the deposit's destination chain.\n        @param data Consists of {resourceID}, {amount}, {lenDestinationRecipientAddress},\n        and {destinationRecipientAddress} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        amount                                 uint256     bytes  0 - 32\n        destinationRecipientAddress length     uint256     bytes  32 - 64\n        destinationRecipientAddress            bytes       bytes  64 - END\n     */\n    function executeProposal(bytes32 resourceID, bytes calldata data)\n        external\n        override\n        onlyBridge\n    {\n        uint256 amount;\n        uint256 lenDestinationRecipientAddress;\n        bytes memory destinationRecipientAddress;\n\n        (amount, lenDestinationRecipientAddress) = abi.decode(\n            data,\n            (uint256, uint256)\n        );\n        destinationRecipientAddress = bytes(\n            data[64:64 + lenDestinationRecipientAddress]\n        );\n\n        bytes20 recipientAddress;\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n\n        assembly {\n            recipientAddress := mload(add(destinationRecipientAddress, 0x20))\n        }\n\n        require(\n            _contractWhitelist[tokenAddress],\n            \"provided tokenAddress is not whitelisted\"\n        );\n\n        if (_burnList[tokenAddress]) {\n            mintERC20(tokenAddress, address(recipientAddress), amount);\n        } else if (isNative[tokenAddress]) {\n            withdrawETH(address(recipientAddress), amount);\n        } else {\n            releaseERC20(tokenAddress, address(recipientAddress), amount);\n        }\n    }\n\n    /**\n        @notice Used to manually release ERC20 tokens from ERC20Safe.\n        @param data Consists of {tokenAddress}, {recipient}, and {amount} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        tokenAddress                           address     bytes  0 - 32\n        recipient                              address     bytes  32 - 64\n        amount                                 uint        bytes  64 - 96\n     */\n    function withdraw(bytes memory data) external override onlyBridge {\n        address tokenAddress;\n        address recipient;\n        uint256 amount;\n\n        (tokenAddress, recipient, amount) = abi.decode(\n            data,\n            (address, address, uint256)\n        );\n\n        releaseERC20(tokenAddress, recipient, amount);\n    }\n\n    /**\n        @notice Used to manually release ETH ERC20Safe.\n        @param data Consists of {recipient}, and {amount} all padded to 32 bytes.\n        @notice Data passed into the function should be constructed as follows:\n        recipient                           address     bytes  0 - 32\n        amount                                 uint     bytes  32 - 64\n     */\n    function withdrawETH(bytes memory data) external override onlyBridge {\n        address recipient;\n        uint256 amount;\n\n        (recipient, amount) = abi.decode(data, (address, uint256));\n\n        withdrawETH(recipient, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "metadata",
          "evm.methodIdentifiers",
          "storageLayout"
        ],
        "": ["ast"]
      }
    }
  }
}
